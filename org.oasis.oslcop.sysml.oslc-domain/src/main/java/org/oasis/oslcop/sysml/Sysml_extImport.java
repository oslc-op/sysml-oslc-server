// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.Sysml_extDomainConstants;
import org.oasis.oslcop.sysml.Relationship;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.Sysml_extDomainConstants;

import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Namespace;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.TextualRepresentation;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Sysml_extDomainConstants.IMPORT_NAMESPACE)
@OslcName(Sysml_extDomainConstants.IMPORT_LOCALNAME)
@OslcResourceShape(title = "Import Shape", describes = Sysml_extDomainConstants.IMPORT_TYPE)
public class Sysml_extImport
    extends Relationship
    implements ISysml_extImport
{
    // Start of user code attributeAnnotation:visibility
    // End of user code
    private String visibility;
    // Start of user code attributeAnnotation:importedMemberName
    // End of user code
    private String importedMemberName;
    // Start of user code attributeAnnotation:isRecursive
    // End of user code
    private Boolean isRecursive;
    // Start of user code attributeAnnotation:isImportAll
    // End of user code
    private Boolean isImportAll;
    // Start of user code attributeAnnotation:importedNamespace
    // End of user code
    private Link importedNamespace;
    // Start of user code attributeAnnotation:importOwningNamespace
    // End of user code
    private Link importOwningNamespace;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Sysml_extImport()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Sysml_extImport(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Sysml_extDomainConstants.IMPORT_PATH,
        Sysml_extImport.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Import Resource} - update Import.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:visibility
    // End of user code
    @OslcName("visibility")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "visibility")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcAllowedValue({"private", "protected", "public"})
    public String getVisibility()
    {
        // Start of user code getterInit:visibility
        // End of user code
        return visibility;
    }
    
    // Start of user code getterAnnotation:importedMemberName
    // End of user code
    @OslcName("importedMemberName")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "importedMemberName")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getImportedMemberName()
    {
        // Start of user code getterInit:importedMemberName
        // End of user code
        return importedMemberName;
    }
    
    // Start of user code getterAnnotation:isRecursive
    // End of user code
    @OslcName("isRecursive")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "isRecursive")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isIsRecursive()
    {
        // Start of user code getterInit:isRecursive
        // End of user code
        return isRecursive;
    }
    
    // Start of user code getterAnnotation:isImportAll
    // End of user code
    @OslcName("isImportAll")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "isImportAll")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isIsImportAll()
    {
        // Start of user code getterInit:isImportAll
        // End of user code
        return isImportAll;
    }
    
    // Start of user code getterAnnotation:importedNamespace
    // End of user code
    @OslcName("importedNamespace")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "importedNamespace")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.NAMESPACE_TYPE})
    @OslcReadOnly(false)
    public Link getImportedNamespace()
    {
        // Start of user code getterInit:importedNamespace
        // End of user code
        return importedNamespace;
    }
    
    // Start of user code getterAnnotation:importOwningNamespace
    // End of user code
    @OslcName("importOwningNamespace")
    @OslcPropertyDefinition(Sysml_extDomainConstants.SYSML_EXT_NAMSPACE + "importOwningNamespace")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.NAMESPACE_TYPE})
    @OslcReadOnly(false)
    public Link getImportOwningNamespace()
    {
        // Start of user code getterInit:importOwningNamespace
        // End of user code
        return importOwningNamespace;
    }
    
    
    // Start of user code setterAnnotation:visibility
    // End of user code
    public void setVisibility(final String visibility )
    {
        // Start of user code setterInit:visibility
        // End of user code
        this.visibility = visibility;
    
        // Start of user code setterFinalize:visibility
        // End of user code
    }
    
    // Start of user code setterAnnotation:importedMemberName
    // End of user code
    public void setImportedMemberName(final String importedMemberName )
    {
        // Start of user code setterInit:importedMemberName
        // End of user code
        this.importedMemberName = importedMemberName;
    
        // Start of user code setterFinalize:importedMemberName
        // End of user code
    }
    
    // Start of user code setterAnnotation:isRecursive
    // End of user code
    public void setIsRecursive(final Boolean isRecursive )
    {
        // Start of user code setterInit:isRecursive
        // End of user code
        this.isRecursive = isRecursive;
    
        // Start of user code setterFinalize:isRecursive
        // End of user code
    }
    
    // Start of user code setterAnnotation:isImportAll
    // End of user code
    public void setIsImportAll(final Boolean isImportAll )
    {
        // Start of user code setterInit:isImportAll
        // End of user code
        this.isImportAll = isImportAll;
    
        // Start of user code setterFinalize:isImportAll
        // End of user code
    }
    
    // Start of user code setterAnnotation:importedNamespace
    // End of user code
    public void setImportedNamespace(final Link importedNamespace )
    {
        // Start of user code setterInit:importedNamespace
        // End of user code
        this.importedNamespace = importedNamespace;
    
        // Start of user code setterFinalize:importedNamespace
        // End of user code
    }
    
    // Start of user code setterAnnotation:importOwningNamespace
    // End of user code
    public void setImportOwningNamespace(final Link importOwningNamespace )
    {
        // Start of user code setterInit:importOwningNamespace
        // End of user code
        this.importOwningNamespace = importOwningNamespace;
    
        // Start of user code setterFinalize:importOwningNamespace
        // End of user code
    }
    
    
}
