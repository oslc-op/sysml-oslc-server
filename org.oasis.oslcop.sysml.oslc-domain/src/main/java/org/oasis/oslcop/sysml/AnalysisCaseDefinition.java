// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.CaseDefinition;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.ActionUsage;
import org.oasis.oslcop.sysml.AllocationUsage;
import org.oasis.oslcop.sysml.AnalysisCaseUsage;
import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.AttributeUsage;
import org.oasis.oslcop.sysml.CalculationUsage;
import org.oasis.oslcop.sysml.CaseUsage;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.ConcernUsage;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.ConnectorAsUsage;
import org.oasis.oslcop.sysml.ConstraintUsage;
import org.oasis.oslcop.sysml.Disjoining;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.EnumerationUsage;
import org.oasis.oslcop.sysml.Expression;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FlowConnectionUsage;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.InterfaceUsage;
import org.oasis.oslcop.sysml.ItemUsage;
import org.oasis.oslcop.sysml.LifeClass;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.oasis.oslcop.sysml.OccurrenceUsage;
import org.oasis.oslcop.sysml.PartUsage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.PortUsage;
import org.oasis.oslcop.sysml.ReferenceUsage;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.RenderingUsage;
import org.oasis.oslcop.sysml.RequirementUsage;
import org.oasis.oslcop.sysml.Specialization;
import org.oasis.oslcop.sysml.StateUsage;
import org.oasis.oslcop.sysml.Subclassification;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.TransitionUsage;
import org.oasis.oslcop.sysml.Usage;
import org.oasis.oslcop.sysml.UseCaseUsage;
import org.oasis.oslcop.sysml.VariantMembership;
import org.oasis.oslcop.sysml.VerificationCaseUsage;
import org.oasis.oslcop.sysml.ViewUsage;
import org.oasis.oslcop.sysml.ViewpointUsage;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.ANALYSISCASEDEFINITION_NAMESPACE)
@OslcName(SysmlDomainConstants.ANALYSISCASEDEFINITION_LOCALNAME)
@OslcResourceShape(title = "AnalysisCaseDefinition Shape", describes = SysmlDomainConstants.ANALYSISCASEDEFINITION_TYPE)
public class AnalysisCaseDefinition
    extends CaseDefinition
    implements IAnalysisCaseDefinition
{
    // Start of user code attributeAnnotation:analysisAction
    // End of user code
    private Set<Link> analysisAction = new HashSet<Link>();
    // Start of user code attributeAnnotation:resultExpression
    // End of user code
    private Link resultExpression;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public AnalysisCaseDefinition()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public AnalysisCaseDefinition(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.ANALYSISCASEDEFINITION_PATH,
        AnalysisCaseDefinition.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local AnalysisCaseDefinition Resource} - update AnalysisCaseDefinition.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addAnalysisAction(final Link analysisAction)
    {
        this.analysisAction.add(analysisAction);
    }
    
    
    // Start of user code getterAnnotation:analysisAction
    // End of user code
    @OslcName("analysisAction")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "analysisAction")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getAnalysisAction()
    {
        // Start of user code getterInit:analysisAction
        // End of user code
        return analysisAction;
    }
    
    // Start of user code getterAnnotation:resultExpression
    // End of user code
    @OslcName("resultExpression")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "resultExpression")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.EXPRESSION_TYPE})
    @OslcReadOnly(false)
    public Link getResultExpression()
    {
        // Start of user code getterInit:resultExpression
        // End of user code
        return resultExpression;
    }
    
    
    // Start of user code setterAnnotation:analysisAction
    // End of user code
    public void setAnalysisAction(final Set<Link> analysisAction )
    {
        // Start of user code setterInit:analysisAction
        // End of user code
        this.analysisAction.clear();
        if (analysisAction != null)
        {
            this.analysisAction.addAll(analysisAction);
        }
    
        // Start of user code setterFinalize:analysisAction
        // End of user code
    }
    
    // Start of user code setterAnnotation:resultExpression
    // End of user code
    public void setResultExpression(final Link resultExpression )
    {
        // Start of user code setterInit:resultExpression
        // End of user code
        this.resultExpression = resultExpression;
    
        // Start of user code setterFinalize:resultExpression
        // End of user code
    }
    
    
}
