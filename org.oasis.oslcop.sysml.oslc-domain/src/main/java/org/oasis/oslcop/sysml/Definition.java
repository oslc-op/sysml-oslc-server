// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.Classifier;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.ActionUsage;
import org.oasis.oslcop.sysml.AllocationUsage;
import org.oasis.oslcop.sysml.AnalysisCaseUsage;
import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.AttributeUsage;
import org.oasis.oslcop.sysml.CalculationUsage;
import org.oasis.oslcop.sysml.CaseUsage;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.ConcernUsage;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.ConnectorAsUsage;
import org.oasis.oslcop.sysml.ConstraintUsage;
import org.oasis.oslcop.sysml.Disjoining;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.EnumerationUsage;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FlowConnectionUsage;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.InterfaceUsage;
import org.oasis.oslcop.sysml.ItemUsage;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.oasis.oslcop.sysml.OccurrenceUsage;
import org.oasis.oslcop.sysml.PartUsage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.PortUsage;
import org.oasis.oslcop.sysml.ReferenceUsage;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.RenderingUsage;
import org.oasis.oslcop.sysml.RequirementUsage;
import org.oasis.oslcop.sysml.Specialization;
import org.oasis.oslcop.sysml.StateUsage;
import org.oasis.oslcop.sysml.Subclassification;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.TransitionUsage;
import org.oasis.oslcop.sysml.Usage;
import org.oasis.oslcop.sysml.UseCaseUsage;
import org.oasis.oslcop.sysml.VariantMembership;
import org.oasis.oslcop.sysml.VerificationCaseUsage;
import org.oasis.oslcop.sysml.ViewUsage;
import org.oasis.oslcop.sysml.ViewpointUsage;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.DEFINITION_NAMESPACE)
@OslcName(SysmlDomainConstants.DEFINITION_LOCALNAME)
@OslcResourceShape(title = "Definition Shape", describes = SysmlDomainConstants.DEFINITION_TYPE)
public class Definition
    extends Classifier
    implements IDefinition
{
    // Start of user code attributeAnnotation:isVariation
    // End of user code
    private Boolean isVariation;
    // Start of user code attributeAnnotation:ownedUsage
    // End of user code
    private Set<Link> ownedUsage = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedPort
    // End of user code
    private Set<Link> ownedPort = new HashSet<Link>();
    // Start of user code attributeAnnotation:directedUsage
    // End of user code
    private Set<Link> directedUsage = new HashSet<Link>();
    // Start of user code attributeAnnotation:usage
    // End of user code
    private Set<Link> usage = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedState
    // End of user code
    private Set<Link> ownedState = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedConstraint
    // End of user code
    private Set<Link> ownedConstraint = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedTransition
    // End of user code
    private Set<Link> ownedTransition = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedRequirement
    // End of user code
    private Set<Link> ownedRequirement = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedCalculation
    // End of user code
    private Set<Link> ownedCalculation = new HashSet<Link>();
    // Start of user code attributeAnnotation:variantMembership
    // End of user code
    private Set<Link> variantMembership = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedAnalysisCase
    // End of user code
    private Set<Link> ownedAnalysisCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:variant
    // End of user code
    private Set<Link> variant = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedCase
    // End of user code
    private Set<Link> ownedCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedReference
    // End of user code
    private Set<Link> ownedReference = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedAction
    // End of user code
    private Set<Link> ownedAction = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedConnection
    // End of user code
    private Set<Link> ownedConnection = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedItem
    // End of user code
    private Set<Link> ownedItem = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedPart
    // End of user code
    private Set<Link> ownedPart = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedInterface
    // End of user code
    private Set<Link> ownedInterface = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedAttribute
    // End of user code
    private Set<Link> ownedAttribute = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedView
    // End of user code
    private Set<Link> ownedView = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedViewpoint
    // End of user code
    private Set<Link> ownedViewpoint = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedRendering
    // End of user code
    private Set<Link> ownedRendering = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedVerificationCase
    // End of user code
    private Set<Link> ownedVerificationCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedEnumeration
    // End of user code
    private Set<Link> ownedEnumeration = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedAllocation
    // End of user code
    private Set<Link> ownedAllocation = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedConcern
    // End of user code
    private Set<Link> ownedConcern = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedOccurrence
    // End of user code
    private Set<Link> ownedOccurrence = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedUseCase
    // End of user code
    private Set<Link> ownedUseCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:ownedFlow
    // End of user code
    private Set<Link> ownedFlow = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Definition()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Definition(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.DEFINITION_PATH,
        Definition.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Definition Resource} - update Definition.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addOwnedUsage(final Link ownedUsage)
    {
        this.ownedUsage.add(ownedUsage);
    }
    
    public void addOwnedPort(final Link ownedPort)
    {
        this.ownedPort.add(ownedPort);
    }
    
    public void addDirectedUsage(final Link directedUsage)
    {
        this.directedUsage.add(directedUsage);
    }
    
    public void addUsage(final Link usage)
    {
        this.usage.add(usage);
    }
    
    public void addOwnedState(final Link ownedState)
    {
        this.ownedState.add(ownedState);
    }
    
    public void addOwnedConstraint(final Link ownedConstraint)
    {
        this.ownedConstraint.add(ownedConstraint);
    }
    
    public void addOwnedTransition(final Link ownedTransition)
    {
        this.ownedTransition.add(ownedTransition);
    }
    
    public void addOwnedRequirement(final Link ownedRequirement)
    {
        this.ownedRequirement.add(ownedRequirement);
    }
    
    public void addOwnedCalculation(final Link ownedCalculation)
    {
        this.ownedCalculation.add(ownedCalculation);
    }
    
    public void addVariantMembership(final Link variantMembership)
    {
        this.variantMembership.add(variantMembership);
    }
    
    public void addOwnedAnalysisCase(final Link ownedAnalysisCase)
    {
        this.ownedAnalysisCase.add(ownedAnalysisCase);
    }
    
    public void addVariant(final Link variant)
    {
        this.variant.add(variant);
    }
    
    public void addOwnedCase(final Link ownedCase)
    {
        this.ownedCase.add(ownedCase);
    }
    
    public void addOwnedReference(final Link ownedReference)
    {
        this.ownedReference.add(ownedReference);
    }
    
    public void addOwnedAction(final Link ownedAction)
    {
        this.ownedAction.add(ownedAction);
    }
    
    public void addOwnedConnection(final Link ownedConnection)
    {
        this.ownedConnection.add(ownedConnection);
    }
    
    public void addOwnedItem(final Link ownedItem)
    {
        this.ownedItem.add(ownedItem);
    }
    
    public void addOwnedPart(final Link ownedPart)
    {
        this.ownedPart.add(ownedPart);
    }
    
    public void addOwnedInterface(final Link ownedInterface)
    {
        this.ownedInterface.add(ownedInterface);
    }
    
    public void addOwnedAttribute(final Link ownedAttribute)
    {
        this.ownedAttribute.add(ownedAttribute);
    }
    
    public void addOwnedView(final Link ownedView)
    {
        this.ownedView.add(ownedView);
    }
    
    public void addOwnedViewpoint(final Link ownedViewpoint)
    {
        this.ownedViewpoint.add(ownedViewpoint);
    }
    
    public void addOwnedRendering(final Link ownedRendering)
    {
        this.ownedRendering.add(ownedRendering);
    }
    
    public void addOwnedVerificationCase(final Link ownedVerificationCase)
    {
        this.ownedVerificationCase.add(ownedVerificationCase);
    }
    
    public void addOwnedEnumeration(final Link ownedEnumeration)
    {
        this.ownedEnumeration.add(ownedEnumeration);
    }
    
    public void addOwnedAllocation(final Link ownedAllocation)
    {
        this.ownedAllocation.add(ownedAllocation);
    }
    
    public void addOwnedConcern(final Link ownedConcern)
    {
        this.ownedConcern.add(ownedConcern);
    }
    
    public void addOwnedOccurrence(final Link ownedOccurrence)
    {
        this.ownedOccurrence.add(ownedOccurrence);
    }
    
    public void addOwnedUseCase(final Link ownedUseCase)
    {
        this.ownedUseCase.add(ownedUseCase);
    }
    
    public void addOwnedFlow(final Link ownedFlow)
    {
        this.ownedFlow.add(ownedFlow);
    }
    
    
    // Start of user code getterAnnotation:isVariation
    // End of user code
    @OslcName("isVariation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "isVariation")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isIsVariation()
    {
        // Start of user code getterInit:isVariation
        // End of user code
        return isVariation;
    }
    
    // Start of user code getterAnnotation:ownedUsage
    // End of user code
    @OslcName("ownedUsage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedUsage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedUsage()
    {
        // Start of user code getterInit:ownedUsage
        // End of user code
        return ownedUsage;
    }
    
    // Start of user code getterAnnotation:ownedPort
    // End of user code
    @OslcName("ownedPort")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedPort")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.PORTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedPort()
    {
        // Start of user code getterInit:ownedPort
        // End of user code
        return ownedPort;
    }
    
    // Start of user code getterAnnotation:directedUsage
    // End of user code
    @OslcName("directedUsage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "directedUsage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getDirectedUsage()
    {
        // Start of user code getterInit:directedUsage
        // End of user code
        return directedUsage;
    }
    
    // Start of user code getterAnnotation:usage
    // End of user code
    @OslcName("usage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "usage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getUsage()
    {
        // Start of user code getterInit:usage
        // End of user code
        return usage;
    }
    
    // Start of user code getterAnnotation:ownedState
    // End of user code
    @OslcName("ownedState")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedState")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.STATEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedState()
    {
        // Start of user code getterInit:ownedState
        // End of user code
        return ownedState;
    }
    
    // Start of user code getterAnnotation:ownedConstraint
    // End of user code
    @OslcName("ownedConstraint")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedConstraint")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONSTRAINTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedConstraint()
    {
        // Start of user code getterInit:ownedConstraint
        // End of user code
        return ownedConstraint;
    }
    
    // Start of user code getterAnnotation:ownedTransition
    // End of user code
    @OslcName("ownedTransition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedTransition")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.TRANSITIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedTransition()
    {
        // Start of user code getterInit:ownedTransition
        // End of user code
        return ownedTransition;
    }
    
    // Start of user code getterAnnotation:ownedRequirement
    // End of user code
    @OslcName("ownedRequirement")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedRequirement")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.REQUIREMENTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedRequirement()
    {
        // Start of user code getterInit:ownedRequirement
        // End of user code
        return ownedRequirement;
    }
    
    // Start of user code getterAnnotation:ownedCalculation
    // End of user code
    @OslcName("ownedCalculation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedCalculation")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CALCULATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedCalculation()
    {
        // Start of user code getterInit:ownedCalculation
        // End of user code
        return ownedCalculation;
    }
    
    // Start of user code getterAnnotation:variantMembership
    // End of user code
    @OslcName("variantMembership")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "variantMembership")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VARIANTMEMBERSHIP_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getVariantMembership()
    {
        // Start of user code getterInit:variantMembership
        // End of user code
        return variantMembership;
    }
    
    // Start of user code getterAnnotation:ownedAnalysisCase
    // End of user code
    @OslcName("ownedAnalysisCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedAnalysisCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ANALYSISCASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedAnalysisCase()
    {
        // Start of user code getterInit:ownedAnalysisCase
        // End of user code
        return ownedAnalysisCase;
    }
    
    // Start of user code getterAnnotation:variant
    // End of user code
    @OslcName("variant")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "variant")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getVariant()
    {
        // Start of user code getterInit:variant
        // End of user code
        return variant;
    }
    
    // Start of user code getterAnnotation:ownedCase
    // End of user code
    @OslcName("ownedCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedCase()
    {
        // Start of user code getterInit:ownedCase
        // End of user code
        return ownedCase;
    }
    
    // Start of user code getterAnnotation:ownedReference
    // End of user code
    @OslcName("ownedReference")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedReference")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.REFERENCEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedReference()
    {
        // Start of user code getterInit:ownedReference
        // End of user code
        return ownedReference;
    }
    
    // Start of user code getterAnnotation:ownedAction
    // End of user code
    @OslcName("ownedAction")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedAction")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedAction()
    {
        // Start of user code getterInit:ownedAction
        // End of user code
        return ownedAction;
    }
    
    // Start of user code getterAnnotation:ownedConnection
    // End of user code
    @OslcName("ownedConnection")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedConnection")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONNECTORASUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedConnection()
    {
        // Start of user code getterInit:ownedConnection
        // End of user code
        return ownedConnection;
    }
    
    // Start of user code getterAnnotation:ownedItem
    // End of user code
    @OslcName("ownedItem")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedItem")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ITEMUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedItem()
    {
        // Start of user code getterInit:ownedItem
        // End of user code
        return ownedItem;
    }
    
    // Start of user code getterAnnotation:ownedPart
    // End of user code
    @OslcName("ownedPart")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedPart")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.PARTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedPart()
    {
        // Start of user code getterInit:ownedPart
        // End of user code
        return ownedPart;
    }
    
    // Start of user code getterAnnotation:ownedInterface
    // End of user code
    @OslcName("ownedInterface")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedInterface")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.INTERFACEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedInterface()
    {
        // Start of user code getterInit:ownedInterface
        // End of user code
        return ownedInterface;
    }
    
    // Start of user code getterAnnotation:ownedAttribute
    // End of user code
    @OslcName("ownedAttribute")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedAttribute")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ATTRIBUTEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedAttribute()
    {
        // Start of user code getterInit:ownedAttribute
        // End of user code
        return ownedAttribute;
    }
    
    // Start of user code getterAnnotation:ownedView
    // End of user code
    @OslcName("ownedView")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedView")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedView()
    {
        // Start of user code getterInit:ownedView
        // End of user code
        return ownedView;
    }
    
    // Start of user code getterAnnotation:ownedViewpoint
    // End of user code
    @OslcName("ownedViewpoint")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedViewpoint")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWPOINTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedViewpoint()
    {
        // Start of user code getterInit:ownedViewpoint
        // End of user code
        return ownedViewpoint;
    }
    
    // Start of user code getterAnnotation:ownedRendering
    // End of user code
    @OslcName("ownedRendering")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedRendering")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.RENDERINGUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedRendering()
    {
        // Start of user code getterInit:ownedRendering
        // End of user code
        return ownedRendering;
    }
    
    // Start of user code getterAnnotation:ownedVerificationCase
    // End of user code
    @OslcName("ownedVerificationCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedVerificationCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VERIFICATIONCASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedVerificationCase()
    {
        // Start of user code getterInit:ownedVerificationCase
        // End of user code
        return ownedVerificationCase;
    }
    
    // Start of user code getterAnnotation:ownedEnumeration
    // End of user code
    @OslcName("ownedEnumeration")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedEnumeration")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ENUMERATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedEnumeration()
    {
        // Start of user code getterInit:ownedEnumeration
        // End of user code
        return ownedEnumeration;
    }
    
    // Start of user code getterAnnotation:ownedAllocation
    // End of user code
    @OslcName("ownedAllocation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedAllocation")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ALLOCATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedAllocation()
    {
        // Start of user code getterInit:ownedAllocation
        // End of user code
        return ownedAllocation;
    }
    
    // Start of user code getterAnnotation:ownedConcern
    // End of user code
    @OslcName("ownedConcern")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedConcern")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONCERNUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedConcern()
    {
        // Start of user code getterInit:ownedConcern
        // End of user code
        return ownedConcern;
    }
    
    // Start of user code getterAnnotation:ownedOccurrence
    // End of user code
    @OslcName("ownedOccurrence")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedOccurrence")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.OCCURRENCEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedOccurrence()
    {
        // Start of user code getterInit:ownedOccurrence
        // End of user code
        return ownedOccurrence;
    }
    
    // Start of user code getterAnnotation:ownedUseCase
    // End of user code
    @OslcName("ownedUseCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedUseCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USECASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedUseCase()
    {
        // Start of user code getterInit:ownedUseCase
        // End of user code
        return ownedUseCase;
    }
    
    // Start of user code getterAnnotation:ownedFlow
    // End of user code
    @OslcName("ownedFlow")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedFlow")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.FLOWCONNECTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedFlow()
    {
        // Start of user code getterInit:ownedFlow
        // End of user code
        return ownedFlow;
    }
    
    
    // Start of user code setterAnnotation:isVariation
    // End of user code
    public void setIsVariation(final Boolean isVariation )
    {
        // Start of user code setterInit:isVariation
        // End of user code
        this.isVariation = isVariation;
    
        // Start of user code setterFinalize:isVariation
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedUsage
    // End of user code
    public void setOwnedUsage(final Set<Link> ownedUsage )
    {
        // Start of user code setterInit:ownedUsage
        // End of user code
        this.ownedUsage.clear();
        if (ownedUsage != null)
        {
            this.ownedUsage.addAll(ownedUsage);
        }
    
        // Start of user code setterFinalize:ownedUsage
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedPort
    // End of user code
    public void setOwnedPort(final Set<Link> ownedPort )
    {
        // Start of user code setterInit:ownedPort
        // End of user code
        this.ownedPort.clear();
        if (ownedPort != null)
        {
            this.ownedPort.addAll(ownedPort);
        }
    
        // Start of user code setterFinalize:ownedPort
        // End of user code
    }
    
    // Start of user code setterAnnotation:directedUsage
    // End of user code
    public void setDirectedUsage(final Set<Link> directedUsage )
    {
        // Start of user code setterInit:directedUsage
        // End of user code
        this.directedUsage.clear();
        if (directedUsage != null)
        {
            this.directedUsage.addAll(directedUsage);
        }
    
        // Start of user code setterFinalize:directedUsage
        // End of user code
    }
    
    // Start of user code setterAnnotation:usage
    // End of user code
    public void setUsage(final Set<Link> usage )
    {
        // Start of user code setterInit:usage
        // End of user code
        this.usage.clear();
        if (usage != null)
        {
            this.usage.addAll(usage);
        }
    
        // Start of user code setterFinalize:usage
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedState
    // End of user code
    public void setOwnedState(final Set<Link> ownedState )
    {
        // Start of user code setterInit:ownedState
        // End of user code
        this.ownedState.clear();
        if (ownedState != null)
        {
            this.ownedState.addAll(ownedState);
        }
    
        // Start of user code setterFinalize:ownedState
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedConstraint
    // End of user code
    public void setOwnedConstraint(final Set<Link> ownedConstraint )
    {
        // Start of user code setterInit:ownedConstraint
        // End of user code
        this.ownedConstraint.clear();
        if (ownedConstraint != null)
        {
            this.ownedConstraint.addAll(ownedConstraint);
        }
    
        // Start of user code setterFinalize:ownedConstraint
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedTransition
    // End of user code
    public void setOwnedTransition(final Set<Link> ownedTransition )
    {
        // Start of user code setterInit:ownedTransition
        // End of user code
        this.ownedTransition.clear();
        if (ownedTransition != null)
        {
            this.ownedTransition.addAll(ownedTransition);
        }
    
        // Start of user code setterFinalize:ownedTransition
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedRequirement
    // End of user code
    public void setOwnedRequirement(final Set<Link> ownedRequirement )
    {
        // Start of user code setterInit:ownedRequirement
        // End of user code
        this.ownedRequirement.clear();
        if (ownedRequirement != null)
        {
            this.ownedRequirement.addAll(ownedRequirement);
        }
    
        // Start of user code setterFinalize:ownedRequirement
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedCalculation
    // End of user code
    public void setOwnedCalculation(final Set<Link> ownedCalculation )
    {
        // Start of user code setterInit:ownedCalculation
        // End of user code
        this.ownedCalculation.clear();
        if (ownedCalculation != null)
        {
            this.ownedCalculation.addAll(ownedCalculation);
        }
    
        // Start of user code setterFinalize:ownedCalculation
        // End of user code
    }
    
    // Start of user code setterAnnotation:variantMembership
    // End of user code
    public void setVariantMembership(final Set<Link> variantMembership )
    {
        // Start of user code setterInit:variantMembership
        // End of user code
        this.variantMembership.clear();
        if (variantMembership != null)
        {
            this.variantMembership.addAll(variantMembership);
        }
    
        // Start of user code setterFinalize:variantMembership
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedAnalysisCase
    // End of user code
    public void setOwnedAnalysisCase(final Set<Link> ownedAnalysisCase )
    {
        // Start of user code setterInit:ownedAnalysisCase
        // End of user code
        this.ownedAnalysisCase.clear();
        if (ownedAnalysisCase != null)
        {
            this.ownedAnalysisCase.addAll(ownedAnalysisCase);
        }
    
        // Start of user code setterFinalize:ownedAnalysisCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:variant
    // End of user code
    public void setVariant(final Set<Link> variant )
    {
        // Start of user code setterInit:variant
        // End of user code
        this.variant.clear();
        if (variant != null)
        {
            this.variant.addAll(variant);
        }
    
        // Start of user code setterFinalize:variant
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedCase
    // End of user code
    public void setOwnedCase(final Set<Link> ownedCase )
    {
        // Start of user code setterInit:ownedCase
        // End of user code
        this.ownedCase.clear();
        if (ownedCase != null)
        {
            this.ownedCase.addAll(ownedCase);
        }
    
        // Start of user code setterFinalize:ownedCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedReference
    // End of user code
    public void setOwnedReference(final Set<Link> ownedReference )
    {
        // Start of user code setterInit:ownedReference
        // End of user code
        this.ownedReference.clear();
        if (ownedReference != null)
        {
            this.ownedReference.addAll(ownedReference);
        }
    
        // Start of user code setterFinalize:ownedReference
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedAction
    // End of user code
    public void setOwnedAction(final Set<Link> ownedAction )
    {
        // Start of user code setterInit:ownedAction
        // End of user code
        this.ownedAction.clear();
        if (ownedAction != null)
        {
            this.ownedAction.addAll(ownedAction);
        }
    
        // Start of user code setterFinalize:ownedAction
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedConnection
    // End of user code
    public void setOwnedConnection(final Set<Link> ownedConnection )
    {
        // Start of user code setterInit:ownedConnection
        // End of user code
        this.ownedConnection.clear();
        if (ownedConnection != null)
        {
            this.ownedConnection.addAll(ownedConnection);
        }
    
        // Start of user code setterFinalize:ownedConnection
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedItem
    // End of user code
    public void setOwnedItem(final Set<Link> ownedItem )
    {
        // Start of user code setterInit:ownedItem
        // End of user code
        this.ownedItem.clear();
        if (ownedItem != null)
        {
            this.ownedItem.addAll(ownedItem);
        }
    
        // Start of user code setterFinalize:ownedItem
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedPart
    // End of user code
    public void setOwnedPart(final Set<Link> ownedPart )
    {
        // Start of user code setterInit:ownedPart
        // End of user code
        this.ownedPart.clear();
        if (ownedPart != null)
        {
            this.ownedPart.addAll(ownedPart);
        }
    
        // Start of user code setterFinalize:ownedPart
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedInterface
    // End of user code
    public void setOwnedInterface(final Set<Link> ownedInterface )
    {
        // Start of user code setterInit:ownedInterface
        // End of user code
        this.ownedInterface.clear();
        if (ownedInterface != null)
        {
            this.ownedInterface.addAll(ownedInterface);
        }
    
        // Start of user code setterFinalize:ownedInterface
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedAttribute
    // End of user code
    public void setOwnedAttribute(final Set<Link> ownedAttribute )
    {
        // Start of user code setterInit:ownedAttribute
        // End of user code
        this.ownedAttribute.clear();
        if (ownedAttribute != null)
        {
            this.ownedAttribute.addAll(ownedAttribute);
        }
    
        // Start of user code setterFinalize:ownedAttribute
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedView
    // End of user code
    public void setOwnedView(final Set<Link> ownedView )
    {
        // Start of user code setterInit:ownedView
        // End of user code
        this.ownedView.clear();
        if (ownedView != null)
        {
            this.ownedView.addAll(ownedView);
        }
    
        // Start of user code setterFinalize:ownedView
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedViewpoint
    // End of user code
    public void setOwnedViewpoint(final Set<Link> ownedViewpoint )
    {
        // Start of user code setterInit:ownedViewpoint
        // End of user code
        this.ownedViewpoint.clear();
        if (ownedViewpoint != null)
        {
            this.ownedViewpoint.addAll(ownedViewpoint);
        }
    
        // Start of user code setterFinalize:ownedViewpoint
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedRendering
    // End of user code
    public void setOwnedRendering(final Set<Link> ownedRendering )
    {
        // Start of user code setterInit:ownedRendering
        // End of user code
        this.ownedRendering.clear();
        if (ownedRendering != null)
        {
            this.ownedRendering.addAll(ownedRendering);
        }
    
        // Start of user code setterFinalize:ownedRendering
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedVerificationCase
    // End of user code
    public void setOwnedVerificationCase(final Set<Link> ownedVerificationCase )
    {
        // Start of user code setterInit:ownedVerificationCase
        // End of user code
        this.ownedVerificationCase.clear();
        if (ownedVerificationCase != null)
        {
            this.ownedVerificationCase.addAll(ownedVerificationCase);
        }
    
        // Start of user code setterFinalize:ownedVerificationCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedEnumeration
    // End of user code
    public void setOwnedEnumeration(final Set<Link> ownedEnumeration )
    {
        // Start of user code setterInit:ownedEnumeration
        // End of user code
        this.ownedEnumeration.clear();
        if (ownedEnumeration != null)
        {
            this.ownedEnumeration.addAll(ownedEnumeration);
        }
    
        // Start of user code setterFinalize:ownedEnumeration
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedAllocation
    // End of user code
    public void setOwnedAllocation(final Set<Link> ownedAllocation )
    {
        // Start of user code setterInit:ownedAllocation
        // End of user code
        this.ownedAllocation.clear();
        if (ownedAllocation != null)
        {
            this.ownedAllocation.addAll(ownedAllocation);
        }
    
        // Start of user code setterFinalize:ownedAllocation
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedConcern
    // End of user code
    public void setOwnedConcern(final Set<Link> ownedConcern )
    {
        // Start of user code setterInit:ownedConcern
        // End of user code
        this.ownedConcern.clear();
        if (ownedConcern != null)
        {
            this.ownedConcern.addAll(ownedConcern);
        }
    
        // Start of user code setterFinalize:ownedConcern
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedOccurrence
    // End of user code
    public void setOwnedOccurrence(final Set<Link> ownedOccurrence )
    {
        // Start of user code setterInit:ownedOccurrence
        // End of user code
        this.ownedOccurrence.clear();
        if (ownedOccurrence != null)
        {
            this.ownedOccurrence.addAll(ownedOccurrence);
        }
    
        // Start of user code setterFinalize:ownedOccurrence
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedUseCase
    // End of user code
    public void setOwnedUseCase(final Set<Link> ownedUseCase )
    {
        // Start of user code setterInit:ownedUseCase
        // End of user code
        this.ownedUseCase.clear();
        if (ownedUseCase != null)
        {
            this.ownedUseCase.addAll(ownedUseCase);
        }
    
        // Start of user code setterFinalize:ownedUseCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedFlow
    // End of user code
    public void setOwnedFlow(final Set<Link> ownedFlow )
    {
        // Start of user code setterInit:ownedFlow
        // End of user code
        this.ownedFlow.clear();
        if (ownedFlow != null)
        {
            this.ownedFlow.addAll(ownedFlow);
        }
    
        // Start of user code setterFinalize:ownedFlow
        // End of user code
    }
    
    
}
