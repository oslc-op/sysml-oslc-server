// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.ActionUsage;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.AcceptActionUsage;
import org.oasis.oslcop.sysml.ActionUsage;
import org.oasis.oslcop.sysml.AllocationUsage;
import org.oasis.oslcop.sysml.AnalysisCaseUsage;
import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.AttributeUsage;
import org.oasis.oslcop.sysml.Behavior;
import org.oasis.oslcop.sysml.CalculationUsage;
import org.oasis.oslcop.sysml.CaseUsage;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.ConnectionUsage;
import org.oasis.oslcop.sysml.ConstraintUsage;
import org.oasis.oslcop.sysml.Definition;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.EnumerationUsage;
import org.oasis.oslcop.sysml.Expression;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FeatureTyping;
import org.oasis.oslcop.sysml.Generalization;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.IndividualUsage;
import org.oasis.oslcop.sysml.InterfaceUsage;
import org.oasis.oslcop.sysml.ItemUsage;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.oasis.oslcop.sysml.PartUsage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.PortUsage;
import org.oasis.oslcop.sysml.Redefinition;
import org.oasis.oslcop.sysml.ReferenceUsage;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.RenderingUsage;
import org.oasis.oslcop.sysml.RequirementUsage;
import org.oasis.oslcop.sysml.StateUsage;
import org.oasis.oslcop.sysml.Subsetting;
import org.oasis.oslcop.sysml.Succession;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.TransitionUsage;
import org.oasis.oslcop.sysml.Type;
import org.oasis.oslcop.sysml.TypeFeaturing;
import org.oasis.oslcop.sysml.Usage;
import org.oasis.oslcop.sysml.VariantMembership;
import org.oasis.oslcop.sysml.VerificationCaseUsage;
import org.oasis.oslcop.sysml.ViewUsage;
import org.oasis.oslcop.sysml.ViewpointUsage;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.TRANSITIONUSAGE_NAMESPACE)
@OslcName(SysmlDomainConstants.TRANSITIONUSAGE_LOCALNAME)
@OslcResourceShape(title = "TransitionUsage Resource Shape", describes = SysmlDomainConstants.TRANSITIONUSAGE_TYPE)
public class TransitionUsage
    extends ActionUsage
    implements ITransitionUsage
{
    // Start of user code attributeAnnotation:sysmlSource
    // End of user code
    private Link sysmlSource;
    // Start of user code attributeAnnotation:target
    // End of user code
    private Link target;
    // Start of user code attributeAnnotation:triggerAction
    // End of user code
    private Set<Link> triggerAction = new HashSet<Link>();
    // Start of user code attributeAnnotation:guardExpression
    // End of user code
    private Set<Link> guardExpression = new HashSet<Link>();
    // Start of user code attributeAnnotation:effectAction
    // End of user code
    private Set<Link> effectAction = new HashSet<Link>();
    // Start of user code attributeAnnotation:succession
    // End of user code
    private Link succession;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public TransitionUsage()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public TransitionUsage(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.TRANSITIONUSAGE_PATH,
        TransitionUsage.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local TransitionUsage Resource} - update TransitionUsage.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addTriggerAction(final Link triggerAction)
    {
        this.triggerAction.add(triggerAction);
    }
    
    public void addGuardExpression(final Link guardExpression)
    {
        this.guardExpression.add(guardExpression);
    }
    
    public void addEffectAction(final Link effectAction)
    {
        this.effectAction.add(effectAction);
    }
    
    
    // Start of user code getterAnnotation:sysmlSource
    // End of user code
    @OslcName("source")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "source")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Link getSysmlSource()
    {
        // Start of user code getterInit:sysmlSource
        // End of user code
        return sysmlSource;
    }
    
    // Start of user code getterAnnotation:target
    // End of user code
    @OslcName("target")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "target")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Link getTarget()
    {
        // Start of user code getterInit:target
        // End of user code
        return target;
    }
    
    // Start of user code getterAnnotation:triggerAction
    // End of user code
    @OslcName("triggerAction")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "triggerAction")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACCEPTACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getTriggerAction()
    {
        // Start of user code getterInit:triggerAction
        // End of user code
        return triggerAction;
    }
    
    // Start of user code getterAnnotation:guardExpression
    // End of user code
    @OslcName("guardExpression")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "guardExpression")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.EXPRESSION_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getGuardExpression()
    {
        // Start of user code getterInit:guardExpression
        // End of user code
        return guardExpression;
    }
    
    // Start of user code getterAnnotation:effectAction
    // End of user code
    @OslcName("effectAction")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "effectAction")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getEffectAction()
    {
        // Start of user code getterInit:effectAction
        // End of user code
        return effectAction;
    }
    
    // Start of user code getterAnnotation:succession
    // End of user code
    @OslcName("succession")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "succession")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.SUCCESSION_TYPE})
    @OslcReadOnly(false)
    public Link getSuccession()
    {
        // Start of user code getterInit:succession
        // End of user code
        return succession;
    }
    
    
    // Start of user code setterAnnotation:sysmlSource
    // End of user code
    public void setSysmlSource(final Link source )
    {
        // Start of user code setterInit:sysmlSource
        // End of user code
        this.sysmlSource = source;
    
        // Start of user code setterFinalize:sysmlSource
        // End of user code
    }
    
    // Start of user code setterAnnotation:target
    // End of user code
    public void setTarget(final Link target )
    {
        // Start of user code setterInit:target
        // End of user code
        this.target = target;
    
        // Start of user code setterFinalize:target
        // End of user code
    }
    
    // Start of user code setterAnnotation:triggerAction
    // End of user code
    public void setTriggerAction(final Set<Link> triggerAction )
    {
        // Start of user code setterInit:triggerAction
        // End of user code
        this.triggerAction.clear();
        if (triggerAction != null)
        {
            this.triggerAction.addAll(triggerAction);
        }
    
        // Start of user code setterFinalize:triggerAction
        // End of user code
    }
    
    // Start of user code setterAnnotation:guardExpression
    // End of user code
    public void setGuardExpression(final Set<Link> guardExpression )
    {
        // Start of user code setterInit:guardExpression
        // End of user code
        this.guardExpression.clear();
        if (guardExpression != null)
        {
            this.guardExpression.addAll(guardExpression);
        }
    
        // Start of user code setterFinalize:guardExpression
        // End of user code
    }
    
    // Start of user code setterAnnotation:effectAction
    // End of user code
    public void setEffectAction(final Set<Link> effectAction )
    {
        // Start of user code setterInit:effectAction
        // End of user code
        this.effectAction.clear();
        if (effectAction != null)
        {
            this.effectAction.addAll(effectAction);
        }
    
        // Start of user code setterFinalize:effectAction
        // End of user code
    }
    
    // Start of user code setterAnnotation:succession
    // End of user code
    public void setSuccession(final Link succession )
    {
        // Start of user code setterInit:succession
        // End of user code
        this.succession = succession;
    
        // Start of user code setterFinalize:succession
        // End of user code
    }
    
    
}
