// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.SysmlImport;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.ImportCondition;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.SysmlPackage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.Predicate;
import org.oasis.oslcop.sysml.Relationship;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.CONDITIONALIMPORT_NAMESPACE)
@OslcName(SysmlDomainConstants.CONDITIONALIMPORT_LOCALNAME)
@OslcResourceShape(title = "ConditionalImport Resource Shape", describes = SysmlDomainConstants.CONDITIONALIMPORT_TYPE)
public class ConditionalImport
    extends SysmlImport
    implements IConditionalImport
{
    // Start of user code attributeAnnotation:selector
    // End of user code
    private Link selector;
    // Start of user code attributeAnnotation:condition_comp
    // End of user code
    private Link condition_comp;
    // Start of user code attributeAnnotation:condition
    // End of user code
    private Link condition;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public ConditionalImport()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public ConditionalImport(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.CONDITIONALIMPORT_PATH,
        ConditionalImport.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local ConditionalImport Resource} - update ConditionalImport.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:selector
    // End of user code
    @OslcName("selector")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "selector")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.PREDICATE_TYPE})
    @OslcReadOnly(false)
    public Link getSelector()
    {
        // Start of user code getterInit:selector
        // End of user code
        return selector;
    }
    
    // Start of user code getterAnnotation:condition_comp
    // End of user code
    @OslcName("condition_comp")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "condition_comp")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.IMPORTCONDITION_TYPE})
    @OslcReadOnly(false)
    public Link getCondition_comp()
    {
        // Start of user code getterInit:condition_comp
        // End of user code
        return condition_comp;
    }
    
    // Start of user code getterAnnotation:condition
    // End of user code
    @OslcName("condition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "condition")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.IMPORTCONDITION_TYPE})
    @OslcReadOnly(false)
    public Link getCondition()
    {
        // Start of user code getterInit:condition
        // End of user code
        return condition;
    }
    
    
    // Start of user code setterAnnotation:selector
    // End of user code
    public void setSelector(final Link selector )
    {
        // Start of user code setterInit:selector
        // End of user code
        this.selector = selector;
    
        // Start of user code setterFinalize:selector
        // End of user code
    }
    
    // Start of user code setterAnnotation:condition_comp
    // End of user code
    public void setCondition_comp(final Link condition_comp )
    {
        // Start of user code setterInit:condition_comp
        // End of user code
        this.condition_comp = condition_comp;
    
        // Start of user code setterFinalize:condition_comp
        // End of user code
    }
    
    // Start of user code setterAnnotation:condition
    // End of user code
    public void setCondition(final Link condition )
    {
        // Start of user code setterInit:condition
        // End of user code
        this.condition = condition;
    
        // Start of user code setterFinalize:condition
        // End of user code
    }
    
    
}
