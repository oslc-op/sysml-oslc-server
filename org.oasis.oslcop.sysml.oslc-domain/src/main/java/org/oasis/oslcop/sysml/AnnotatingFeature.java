// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.IAnnotatingElement;
import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.DataType;
import org.oasis.oslcop.sysml.Disjoining;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureChaining;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FeatureTyping;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.MetadataFeature;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.Redefinition;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.Specialization;
import org.oasis.oslcop.sysml.Subsetting;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.Type;
import org.oasis.oslcop.sysml.TypeFeaturing;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.ANNOTATINGFEATURE_NAMESPACE)
@OslcName(SysmlDomainConstants.ANNOTATINGFEATURE_LOCALNAME)
@OslcResourceShape(title = "AnnotatingFeature Shape", describes = SysmlDomainConstants.ANNOTATINGFEATURE_TYPE)
public class AnnotatingFeature
    extends Feature
    implements IAnnotatingFeature, IAnnotatingElement
{
    // Start of user code attributeAnnotation:metadataType
    // End of user code
    private Link metadataType;
    // Start of user code attributeAnnotation:ownedMetadata
    // End of user code
    private Set<Link> ownedMetadata = new HashSet<Link>();
    // Start of user code attributeAnnotation:annotatedElement
    // End of user code
    private Set<Link> annotatedElement = new HashSet<Link>();
    // Start of user code attributeAnnotation:annotation
    // End of user code
    private Set<Link> annotation = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public AnnotatingFeature()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public AnnotatingFeature(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.ANNOTATINGFEATURE_PATH,
        AnnotatingFeature.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local AnnotatingFeature Resource} - update AnnotatingFeature.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addOwnedMetadata(final Link ownedMetadata)
    {
        this.ownedMetadata.add(ownedMetadata);
    }
    
    public void addAnnotatedElement(final Link annotatedElement)
    {
        this.annotatedElement.add(annotatedElement);
    }
    
    public void addAnnotation(final Link annotation)
    {
        this.annotation.add(annotation);
    }
    
    
    // Start of user code getterAnnotation:metadataType
    // End of user code
    @OslcName("metadataType")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "metadataType")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.DATATYPE_TYPE})
    @OslcReadOnly(false)
    public Link getMetadataType()
    {
        // Start of user code getterInit:metadataType
        // End of user code
        return metadataType;
    }
    
    // Start of user code getterAnnotation:ownedMetadata
    // End of user code
    @OslcName("ownedMetadata")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "ownedMetadata")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.METADATAFEATURE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getOwnedMetadata()
    {
        // Start of user code getterInit:ownedMetadata
        // End of user code
        return ownedMetadata;
    }
    
    // Start of user code getterAnnotation:annotatedElement
    // End of user code
    @OslcName("annotatedElement")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "annotatedElement")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ELEMENT_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getAnnotatedElement()
    {
        // Start of user code getterInit:annotatedElement
        // End of user code
        return annotatedElement;
    }
    
    // Start of user code getterAnnotation:annotation
    // End of user code
    @OslcName("annotation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "annotation")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ANNOTATION_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getAnnotation()
    {
        // Start of user code getterInit:annotation
        // End of user code
        return annotation;
    }
    
    
    // Start of user code setterAnnotation:metadataType
    // End of user code
    public void setMetadataType(final Link metadataType )
    {
        // Start of user code setterInit:metadataType
        // End of user code
        this.metadataType = metadataType;
    
        // Start of user code setterFinalize:metadataType
        // End of user code
    }
    
    // Start of user code setterAnnotation:ownedMetadata
    // End of user code
    public void setOwnedMetadata(final Set<Link> ownedMetadata )
    {
        // Start of user code setterInit:ownedMetadata
        // End of user code
        this.ownedMetadata.clear();
        if (ownedMetadata != null)
        {
            this.ownedMetadata.addAll(ownedMetadata);
        }
    
        // Start of user code setterFinalize:ownedMetadata
        // End of user code
    }
    
    // Start of user code setterAnnotation:annotatedElement
    // End of user code
    public void setAnnotatedElement(final Set<Link> annotatedElement )
    {
        // Start of user code setterInit:annotatedElement
        // End of user code
        this.annotatedElement.clear();
        if (annotatedElement != null)
        {
            this.annotatedElement.addAll(annotatedElement);
        }
    
        // Start of user code setterFinalize:annotatedElement
        // End of user code
    }
    
    // Start of user code setterAnnotation:annotation
    // End of user code
    public void setAnnotation(final Set<Link> annotation )
    {
        // Start of user code setterInit:annotation
        // End of user code
        this.annotation.clear();
        if (annotation != null)
        {
            this.annotation.addAll(annotation);
        }
    
        // Start of user code setterFinalize:annotation
        // End of user code
    }
    
    
}
