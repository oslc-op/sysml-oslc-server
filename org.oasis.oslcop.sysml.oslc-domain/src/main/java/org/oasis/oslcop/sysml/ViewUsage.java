// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.PartUsage;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.ActionUsage;
import org.oasis.oslcop.sysml.AllocationUsage;
import org.oasis.oslcop.sysml.AnalysisCaseUsage;
import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.AttributeUsage;
import org.oasis.oslcop.sysml.CalculationUsage;
import org.oasis.oslcop.sysml.CaseUsage;
import org.oasis.oslcop.sysml.SysmlClass;
import org.oasis.oslcop.sysml.Classifier;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.ConcernUsage;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.ConnectorAsUsage;
import org.oasis.oslcop.sysml.ConstraintUsage;
import org.oasis.oslcop.sysml.Definition;
import org.oasis.oslcop.sysml.Disjoining;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.EnumerationUsage;
import org.oasis.oslcop.sysml.Expression;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureChaining;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FeatureTyping;
import org.oasis.oslcop.sysml.FlowConnectionUsage;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.InterfaceUsage;
import org.oasis.oslcop.sysml.ItemUsage;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.oasis.oslcop.sysml.OccurrenceDefinition;
import org.oasis.oslcop.sysml.OccurrenceUsage;
import org.oasis.oslcop.sysml.PartDefinition;
import org.oasis.oslcop.sysml.PartUsage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.PortUsage;
import org.oasis.oslcop.sysml.PortioningFeature;
import org.oasis.oslcop.sysml.Redefinition;
import org.oasis.oslcop.sysml.ReferenceUsage;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.RenderingUsage;
import org.oasis.oslcop.sysml.RequirementUsage;
import org.oasis.oslcop.sysml.Specialization;
import org.oasis.oslcop.sysml.StateUsage;
import org.oasis.oslcop.sysml.Structure;
import org.oasis.oslcop.sysml.Subsetting;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.TransitionUsage;
import org.oasis.oslcop.sysml.Type;
import org.oasis.oslcop.sysml.TypeFeaturing;
import org.oasis.oslcop.sysml.Usage;
import org.oasis.oslcop.sysml.UseCaseUsage;
import org.oasis.oslcop.sysml.VariantMembership;
import org.oasis.oslcop.sysml.VerificationCaseUsage;
import org.oasis.oslcop.sysml.ViewDefinition;
import org.oasis.oslcop.sysml.ViewUsage;
import org.oasis.oslcop.sysml.ViewpointUsage;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.VIEWUSAGE_NAMESPACE)
@OslcName(SysmlDomainConstants.VIEWUSAGE_LOCALNAME)
@OslcResourceShape(title = "ViewUsage Shape", describes = SysmlDomainConstants.VIEWUSAGE_TYPE)
public class ViewUsage
    extends PartUsage
    implements IViewUsage
{
    // Start of user code attributeAnnotation:viewDefinition
    // End of user code
    private Link viewDefinition;
    // Start of user code attributeAnnotation:satisfiedViewpoint
    // End of user code
    private Set<Link> satisfiedViewpoint = new HashSet<Link>();
    // Start of user code attributeAnnotation:exposedNamespace
    // End of user code
    private Set<Link> exposedNamespace = new HashSet<Link>();
    // Start of user code attributeAnnotation:viewRendering
    // End of user code
    private Link viewRendering;
    // Start of user code attributeAnnotation:viewCondition
    // End of user code
    private Set<Link> viewCondition = new HashSet<Link>();
    // Start of user code attributeAnnotation:viewedElement
    // End of user code
    private Set<Link> viewedElement = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public ViewUsage()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public ViewUsage(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.VIEWUSAGE_PATH,
        ViewUsage.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local ViewUsage Resource} - update ViewUsage.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addSatisfiedViewpoint(final Link satisfiedViewpoint)
    {
        this.satisfiedViewpoint.add(satisfiedViewpoint);
    }
    
    public void addExposedNamespace(final Link exposedNamespace)
    {
        this.exposedNamespace.add(exposedNamespace);
    }
    
    public void addViewCondition(final Link viewCondition)
    {
        this.viewCondition.add(viewCondition);
    }
    
    public void addViewedElement(final Link viewedElement)
    {
        this.viewedElement.add(viewedElement);
    }
    
    
    // Start of user code getterAnnotation:viewDefinition
    // End of user code
    @OslcName("viewDefinition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "viewDefinition")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWDEFINITION_TYPE})
    @OslcReadOnly(false)
    public Link getViewDefinition()
    {
        // Start of user code getterInit:viewDefinition
        // End of user code
        return viewDefinition;
    }
    
    // Start of user code getterAnnotation:satisfiedViewpoint
    // End of user code
    @OslcName("satisfiedViewpoint")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "satisfiedViewpoint")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWPOINTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getSatisfiedViewpoint()
    {
        // Start of user code getterInit:satisfiedViewpoint
        // End of user code
        return satisfiedViewpoint;
    }
    
    // Start of user code getterAnnotation:exposedNamespace
    // End of user code
    @OslcName("exposedNamespace")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "exposedNamespace")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.NAMESPACE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getExposedNamespace()
    {
        // Start of user code getterInit:exposedNamespace
        // End of user code
        return exposedNamespace;
    }
    
    // Start of user code getterAnnotation:viewRendering
    // End of user code
    @OslcName("viewRendering")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "viewRendering")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.RENDERINGUSAGE_TYPE})
    @OslcReadOnly(false)
    public Link getViewRendering()
    {
        // Start of user code getterInit:viewRendering
        // End of user code
        return viewRendering;
    }
    
    // Start of user code getterAnnotation:viewCondition
    // End of user code
    @OslcName("viewCondition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "viewCondition")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.EXPRESSION_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getViewCondition()
    {
        // Start of user code getterInit:viewCondition
        // End of user code
        return viewCondition;
    }
    
    // Start of user code getterAnnotation:viewedElement
    // End of user code
    @OslcName("viewedElement")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "viewedElement")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ELEMENT_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getViewedElement()
    {
        // Start of user code getterInit:viewedElement
        // End of user code
        return viewedElement;
    }
    
    
    // Start of user code setterAnnotation:viewDefinition
    // End of user code
    public void setViewDefinition(final Link viewDefinition )
    {
        // Start of user code setterInit:viewDefinition
        // End of user code
        this.viewDefinition = viewDefinition;
    
        // Start of user code setterFinalize:viewDefinition
        // End of user code
    }
    
    // Start of user code setterAnnotation:satisfiedViewpoint
    // End of user code
    public void setSatisfiedViewpoint(final Set<Link> satisfiedViewpoint )
    {
        // Start of user code setterInit:satisfiedViewpoint
        // End of user code
        this.satisfiedViewpoint.clear();
        if (satisfiedViewpoint != null)
        {
            this.satisfiedViewpoint.addAll(satisfiedViewpoint);
        }
    
        // Start of user code setterFinalize:satisfiedViewpoint
        // End of user code
    }
    
    // Start of user code setterAnnotation:exposedNamespace
    // End of user code
    public void setExposedNamespace(final Set<Link> exposedNamespace )
    {
        // Start of user code setterInit:exposedNamespace
        // End of user code
        this.exposedNamespace.clear();
        if (exposedNamespace != null)
        {
            this.exposedNamespace.addAll(exposedNamespace);
        }
    
        // Start of user code setterFinalize:exposedNamespace
        // End of user code
    }
    
    // Start of user code setterAnnotation:viewRendering
    // End of user code
    public void setViewRendering(final Link viewRendering )
    {
        // Start of user code setterInit:viewRendering
        // End of user code
        this.viewRendering = viewRendering;
    
        // Start of user code setterFinalize:viewRendering
        // End of user code
    }
    
    // Start of user code setterAnnotation:viewCondition
    // End of user code
    public void setViewCondition(final Set<Link> viewCondition )
    {
        // Start of user code setterInit:viewCondition
        // End of user code
        this.viewCondition.clear();
        if (viewCondition != null)
        {
            this.viewCondition.addAll(viewCondition);
        }
    
        // Start of user code setterFinalize:viewCondition
        // End of user code
    }
    
    // Start of user code setterAnnotation:viewedElement
    // End of user code
    public void setViewedElement(final Set<Link> viewedElement )
    {
        // Start of user code setterInit:viewedElement
        // End of user code
        this.viewedElement.clear();
        if (viewedElement != null)
        {
            this.viewedElement.addAll(viewedElement);
        }
    
        // Start of user code setterFinalize:viewedElement
        // End of user code
    }
    
    
}
