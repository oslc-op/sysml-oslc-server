// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.Feature;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.ActionUsage;
import org.oasis.oslcop.sysml.AllocationUsage;
import org.oasis.oslcop.sysml.AnalysisCaseUsage;
import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.AttributeUsage;
import org.oasis.oslcop.sysml.CalculationUsage;
import org.oasis.oslcop.sysml.CaseUsage;
import org.oasis.oslcop.sysml.Classifier;
import org.oasis.oslcop.sysml.Comment;
import org.oasis.oslcop.sysml.ConcernUsage;
import org.oasis.oslcop.sysml.Conjugation;
import org.oasis.oslcop.sysml.ConnectorAsUsage;
import org.oasis.oslcop.sysml.ConstraintUsage;
import org.oasis.oslcop.sysml.Definition;
import org.oasis.oslcop.sysml.Disjoining;
import org.oasis.oslcop.sysml.Documentation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.EnumerationUsage;
import org.oasis.oslcop.sysml.Feature;
import org.oasis.oslcop.sysml.FeatureChaining;
import org.oasis.oslcop.sysml.FeatureMembership;
import org.oasis.oslcop.sysml.FeatureTyping;
import org.oasis.oslcop.sysml.FlowConnectionUsage;
import org.oasis.oslcop.sysml.SysmlImport;
import org.oasis.oslcop.sysml.InterfaceUsage;
import org.oasis.oslcop.sysml.ItemUsage;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.Multiplicity;
import org.oasis.oslcop.sysml.Namespace;
import org.oasis.oslcop.sysml.OccurrenceUsage;
import org.oasis.oslcop.sysml.PartUsage;
import org.eclipse.lyo.oslc.domains.Person;
import org.oasis.oslcop.sysml.PortUsage;
import org.oasis.oslcop.sysml.Redefinition;
import org.oasis.oslcop.sysml.ReferenceUsage;
import org.oasis.oslcop.sysml.Relationship;
import org.oasis.oslcop.sysml.RenderingUsage;
import org.oasis.oslcop.sysml.RequirementUsage;
import org.oasis.oslcop.sysml.Specialization;
import org.oasis.oslcop.sysml.StateUsage;
import org.oasis.oslcop.sysml.Subsetting;
import org.oasis.oslcop.sysml.TextualRepresentation;
import org.oasis.oslcop.sysml.TransitionUsage;
import org.oasis.oslcop.sysml.Type;
import org.oasis.oslcop.sysml.TypeFeaturing;
import org.oasis.oslcop.sysml.Usage;
import org.oasis.oslcop.sysml.UseCaseUsage;
import org.oasis.oslcop.sysml.VariantMembership;
import org.oasis.oslcop.sysml.VerificationCaseUsage;
import org.oasis.oslcop.sysml.ViewUsage;
import org.oasis.oslcop.sysml.ViewpointUsage;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.USAGE_NAMESPACE)
@OslcName(SysmlDomainConstants.USAGE_LOCALNAME)
@OslcResourceShape(title = "Usage Shape", describes = SysmlDomainConstants.USAGE_TYPE)
public class Usage
    extends Feature
    implements IUsage
{
    // Start of user code attributeAnnotation:isVariation
    // End of user code
    private Boolean isVariation;
    // Start of user code attributeAnnotation:isReference
    // End of user code
    private Boolean isReference;
    // Start of user code attributeAnnotation:nestedUsage
    // End of user code
    private Set<Link> nestedUsage = new HashSet<Link>();
    // Start of user code attributeAnnotation:owningUsage
    // End of user code
    private Link owningUsage;
    // Start of user code attributeAnnotation:nestedPort
    // End of user code
    private Set<Link> nestedPort = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedAction
    // End of user code
    private Set<Link> nestedAction = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedState
    // End of user code
    private Set<Link> nestedState = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedConstraint
    // End of user code
    private Set<Link> nestedConstraint = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedTransition
    // End of user code
    private Set<Link> nestedTransition = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedRequirement
    // End of user code
    private Set<Link> nestedRequirement = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedCalculation
    // End of user code
    private Set<Link> nestedCalculation = new HashSet<Link>();
    // Start of user code attributeAnnotation:directedUsage
    // End of user code
    private Set<Link> directedUsage = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedCase
    // End of user code
    private Set<Link> nestedCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedAnalysisCase
    // End of user code
    private Set<Link> nestedAnalysisCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:variantMembership
    // End of user code
    private Set<Link> variantMembership = new HashSet<Link>();
    // Start of user code attributeAnnotation:usage
    // End of user code
    private Set<Link> usage = new HashSet<Link>();
    // Start of user code attributeAnnotation:variant
    // End of user code
    private Set<Link> variant = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedReference
    // End of user code
    private Set<Link> nestedReference = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedConnection
    // End of user code
    private Set<Link> nestedConnection = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedItem
    // End of user code
    private Set<Link> nestedItem = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedPart
    // End of user code
    private Set<Link> nestedPart = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedInterface
    // End of user code
    private Set<Link> nestedInterface = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedAttribute
    // End of user code
    private Set<Link> nestedAttribute = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedView
    // End of user code
    private Set<Link> nestedView = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedViewpoint
    // End of user code
    private Set<Link> nestedViewpoint = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedRendering
    // End of user code
    private Set<Link> nestedRendering = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedVerificationCase
    // End of user code
    private Set<Link> nestedVerificationCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedEnumeration
    // End of user code
    private Set<Link> nestedEnumeration = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedAllocation
    // End of user code
    private Set<Link> nestedAllocation = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedConcern
    // End of user code
    private Set<Link> nestedConcern = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedOccurrence
    // End of user code
    private Set<Link> nestedOccurrence = new HashSet<Link>();
    // Start of user code attributeAnnotation:definition
    // End of user code
    private Set<Link> definition = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedUseCase
    // End of user code
    private Set<Link> nestedUseCase = new HashSet<Link>();
    // Start of user code attributeAnnotation:nestedFlow
    // End of user code
    private Set<Link> nestedFlow = new HashSet<Link>();
    // Start of user code attributeAnnotation:owningDefinition
    // End of user code
    private Link owningDefinition;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Usage()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Usage(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.USAGE_PATH,
        Usage.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Usage Resource} - update Usage.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
 result = getShortTitle();
        // End of user code
    
        return result;
    }
    
    public void addNestedUsage(final Link nestedUsage)
    {
        this.nestedUsage.add(nestedUsage);
    }
    
    public void addNestedPort(final Link nestedPort)
    {
        this.nestedPort.add(nestedPort);
    }
    
    public void addNestedAction(final Link nestedAction)
    {
        this.nestedAction.add(nestedAction);
    }
    
    public void addNestedState(final Link nestedState)
    {
        this.nestedState.add(nestedState);
    }
    
    public void addNestedConstraint(final Link nestedConstraint)
    {
        this.nestedConstraint.add(nestedConstraint);
    }
    
    public void addNestedTransition(final Link nestedTransition)
    {
        this.nestedTransition.add(nestedTransition);
    }
    
    public void addNestedRequirement(final Link nestedRequirement)
    {
        this.nestedRequirement.add(nestedRequirement);
    }
    
    public void addNestedCalculation(final Link nestedCalculation)
    {
        this.nestedCalculation.add(nestedCalculation);
    }
    
    public void addDirectedUsage(final Link directedUsage)
    {
        this.directedUsage.add(directedUsage);
    }
    
    public void addNestedCase(final Link nestedCase)
    {
        this.nestedCase.add(nestedCase);
    }
    
    public void addNestedAnalysisCase(final Link nestedAnalysisCase)
    {
        this.nestedAnalysisCase.add(nestedAnalysisCase);
    }
    
    public void addVariantMembership(final Link variantMembership)
    {
        this.variantMembership.add(variantMembership);
    }
    
    public void addUsage(final Link usage)
    {
        this.usage.add(usage);
    }
    
    public void addVariant(final Link variant)
    {
        this.variant.add(variant);
    }
    
    public void addNestedReference(final Link nestedReference)
    {
        this.nestedReference.add(nestedReference);
    }
    
    public void addNestedConnection(final Link nestedConnection)
    {
        this.nestedConnection.add(nestedConnection);
    }
    
    public void addNestedItem(final Link nestedItem)
    {
        this.nestedItem.add(nestedItem);
    }
    
    public void addNestedPart(final Link nestedPart)
    {
        this.nestedPart.add(nestedPart);
    }
    
    public void addNestedInterface(final Link nestedInterface)
    {
        this.nestedInterface.add(nestedInterface);
    }
    
    public void addNestedAttribute(final Link nestedAttribute)
    {
        this.nestedAttribute.add(nestedAttribute);
    }
    
    public void addNestedView(final Link nestedView)
    {
        this.nestedView.add(nestedView);
    }
    
    public void addNestedViewpoint(final Link nestedViewpoint)
    {
        this.nestedViewpoint.add(nestedViewpoint);
    }
    
    public void addNestedRendering(final Link nestedRendering)
    {
        this.nestedRendering.add(nestedRendering);
    }
    
    public void addNestedVerificationCase(final Link nestedVerificationCase)
    {
        this.nestedVerificationCase.add(nestedVerificationCase);
    }
    
    public void addNestedEnumeration(final Link nestedEnumeration)
    {
        this.nestedEnumeration.add(nestedEnumeration);
    }
    
    public void addNestedAllocation(final Link nestedAllocation)
    {
        this.nestedAllocation.add(nestedAllocation);
    }
    
    public void addNestedConcern(final Link nestedConcern)
    {
        this.nestedConcern.add(nestedConcern);
    }
    
    public void addNestedOccurrence(final Link nestedOccurrence)
    {
        this.nestedOccurrence.add(nestedOccurrence);
    }
    
    public void addDefinition(final Link definition)
    {
        this.definition.add(definition);
    }
    
    public void addNestedUseCase(final Link nestedUseCase)
    {
        this.nestedUseCase.add(nestedUseCase);
    }
    
    public void addNestedFlow(final Link nestedFlow)
    {
        this.nestedFlow.add(nestedFlow);
    }
    
    
    // Start of user code getterAnnotation:isVariation
    // End of user code
    @OslcName("isVariation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "isVariation")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isIsVariation()
    {
        // Start of user code getterInit:isVariation
        // End of user code
        return isVariation;
    }
    
    // Start of user code getterAnnotation:isReference
    // End of user code
    @OslcName("isReference")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "isReference")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isIsReference()
    {
        // Start of user code getterInit:isReference
        // End of user code
        return isReference;
    }
    
    // Start of user code getterAnnotation:nestedUsage
    // End of user code
    @OslcName("nestedUsage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedUsage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedUsage()
    {
        // Start of user code getterInit:nestedUsage
        // End of user code
        return nestedUsage;
    }
    
    // Start of user code getterAnnotation:owningUsage
    // End of user code
    @OslcName("owningUsage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "owningUsage")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Link getOwningUsage()
    {
        // Start of user code getterInit:owningUsage
        // End of user code
        return owningUsage;
    }
    
    // Start of user code getterAnnotation:nestedPort
    // End of user code
    @OslcName("nestedPort")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedPort")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.PORTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedPort()
    {
        // Start of user code getterInit:nestedPort
        // End of user code
        return nestedPort;
    }
    
    // Start of user code getterAnnotation:nestedAction
    // End of user code
    @OslcName("nestedAction")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedAction")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ACTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedAction()
    {
        // Start of user code getterInit:nestedAction
        // End of user code
        return nestedAction;
    }
    
    // Start of user code getterAnnotation:nestedState
    // End of user code
    @OslcName("nestedState")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedState")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.STATEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedState()
    {
        // Start of user code getterInit:nestedState
        // End of user code
        return nestedState;
    }
    
    // Start of user code getterAnnotation:nestedConstraint
    // End of user code
    @OslcName("nestedConstraint")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedConstraint")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONSTRAINTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedConstraint()
    {
        // Start of user code getterInit:nestedConstraint
        // End of user code
        return nestedConstraint;
    }
    
    // Start of user code getterAnnotation:nestedTransition
    // End of user code
    @OslcName("nestedTransition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedTransition")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.TRANSITIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedTransition()
    {
        // Start of user code getterInit:nestedTransition
        // End of user code
        return nestedTransition;
    }
    
    // Start of user code getterAnnotation:nestedRequirement
    // End of user code
    @OslcName("nestedRequirement")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedRequirement")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.REQUIREMENTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedRequirement()
    {
        // Start of user code getterInit:nestedRequirement
        // End of user code
        return nestedRequirement;
    }
    
    // Start of user code getterAnnotation:nestedCalculation
    // End of user code
    @OslcName("nestedCalculation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedCalculation")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CALCULATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedCalculation()
    {
        // Start of user code getterInit:nestedCalculation
        // End of user code
        return nestedCalculation;
    }
    
    // Start of user code getterAnnotation:directedUsage
    // End of user code
    @OslcName("directedUsage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "directedUsage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getDirectedUsage()
    {
        // Start of user code getterInit:directedUsage
        // End of user code
        return directedUsage;
    }
    
    // Start of user code getterAnnotation:nestedCase
    // End of user code
    @OslcName("nestedCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedCase()
    {
        // Start of user code getterInit:nestedCase
        // End of user code
        return nestedCase;
    }
    
    // Start of user code getterAnnotation:nestedAnalysisCase
    // End of user code
    @OslcName("nestedAnalysisCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedAnalysisCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ANALYSISCASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedAnalysisCase()
    {
        // Start of user code getterInit:nestedAnalysisCase
        // End of user code
        return nestedAnalysisCase;
    }
    
    // Start of user code getterAnnotation:variantMembership
    // End of user code
    @OslcName("variantMembership")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "variantMembership")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VARIANTMEMBERSHIP_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getVariantMembership()
    {
        // Start of user code getterInit:variantMembership
        // End of user code
        return variantMembership;
    }
    
    // Start of user code getterAnnotation:usage
    // End of user code
    @OslcName("usage")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "usage")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getUsage()
    {
        // Start of user code getterInit:usage
        // End of user code
        return usage;
    }
    
    // Start of user code getterAnnotation:variant
    // End of user code
    @OslcName("variant")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "variant")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getVariant()
    {
        // Start of user code getterInit:variant
        // End of user code
        return variant;
    }
    
    // Start of user code getterAnnotation:nestedReference
    // End of user code
    @OslcName("nestedReference")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedReference")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.REFERENCEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedReference()
    {
        // Start of user code getterInit:nestedReference
        // End of user code
        return nestedReference;
    }
    
    // Start of user code getterAnnotation:nestedConnection
    // End of user code
    @OslcName("nestedConnection")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedConnection")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONNECTORASUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedConnection()
    {
        // Start of user code getterInit:nestedConnection
        // End of user code
        return nestedConnection;
    }
    
    // Start of user code getterAnnotation:nestedItem
    // End of user code
    @OslcName("nestedItem")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedItem")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ITEMUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedItem()
    {
        // Start of user code getterInit:nestedItem
        // End of user code
        return nestedItem;
    }
    
    // Start of user code getterAnnotation:nestedPart
    // End of user code
    @OslcName("nestedPart")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedPart")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.PARTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedPart()
    {
        // Start of user code getterInit:nestedPart
        // End of user code
        return nestedPart;
    }
    
    // Start of user code getterAnnotation:nestedInterface
    // End of user code
    @OslcName("nestedInterface")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedInterface")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.INTERFACEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedInterface()
    {
        // Start of user code getterInit:nestedInterface
        // End of user code
        return nestedInterface;
    }
    
    // Start of user code getterAnnotation:nestedAttribute
    // End of user code
    @OslcName("nestedAttribute")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedAttribute")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ATTRIBUTEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedAttribute()
    {
        // Start of user code getterInit:nestedAttribute
        // End of user code
        return nestedAttribute;
    }
    
    // Start of user code getterAnnotation:nestedView
    // End of user code
    @OslcName("nestedView")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedView")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedView()
    {
        // Start of user code getterInit:nestedView
        // End of user code
        return nestedView;
    }
    
    // Start of user code getterAnnotation:nestedViewpoint
    // End of user code
    @OslcName("nestedViewpoint")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedViewpoint")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VIEWPOINTUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedViewpoint()
    {
        // Start of user code getterInit:nestedViewpoint
        // End of user code
        return nestedViewpoint;
    }
    
    // Start of user code getterAnnotation:nestedRendering
    // End of user code
    @OslcName("nestedRendering")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedRendering")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.RENDERINGUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedRendering()
    {
        // Start of user code getterInit:nestedRendering
        // End of user code
        return nestedRendering;
    }
    
    // Start of user code getterAnnotation:nestedVerificationCase
    // End of user code
    @OslcName("nestedVerificationCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedVerificationCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.VERIFICATIONCASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedVerificationCase()
    {
        // Start of user code getterInit:nestedVerificationCase
        // End of user code
        return nestedVerificationCase;
    }
    
    // Start of user code getterAnnotation:nestedEnumeration
    // End of user code
    @OslcName("nestedEnumeration")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedEnumeration")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ENUMERATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedEnumeration()
    {
        // Start of user code getterInit:nestedEnumeration
        // End of user code
        return nestedEnumeration;
    }
    
    // Start of user code getterAnnotation:nestedAllocation
    // End of user code
    @OslcName("nestedAllocation")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedAllocation")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ALLOCATIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedAllocation()
    {
        // Start of user code getterInit:nestedAllocation
        // End of user code
        return nestedAllocation;
    }
    
    // Start of user code getterAnnotation:nestedConcern
    // End of user code
    @OslcName("nestedConcern")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedConcern")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CONCERNUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedConcern()
    {
        // Start of user code getterInit:nestedConcern
        // End of user code
        return nestedConcern;
    }
    
    // Start of user code getterAnnotation:nestedOccurrence
    // End of user code
    @OslcName("nestedOccurrence")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedOccurrence")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.OCCURRENCEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedOccurrence()
    {
        // Start of user code getterInit:nestedOccurrence
        // End of user code
        return nestedOccurrence;
    }
    
    // Start of user code getterAnnotation:definition
    // End of user code
    @OslcName("definition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "definition")
    @OslcOccurs(Occurs.OneOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.CLASSIFIER_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getDefinition()
    {
        // Start of user code getterInit:definition
        // End of user code
        return definition;
    }
    
    // Start of user code getterAnnotation:nestedUseCase
    // End of user code
    @OslcName("nestedUseCase")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedUseCase")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.USECASEUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedUseCase()
    {
        // Start of user code getterInit:nestedUseCase
        // End of user code
        return nestedUseCase;
    }
    
    // Start of user code getterAnnotation:nestedFlow
    // End of user code
    @OslcName("nestedFlow")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "nestedFlow")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.FLOWCONNECTIONUSAGE_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getNestedFlow()
    {
        // Start of user code getterInit:nestedFlow
        // End of user code
        return nestedFlow;
    }
    
    // Start of user code getterAnnotation:owningDefinition
    // End of user code
    @OslcName("owningDefinition")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "owningDefinition")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.DEFINITION_TYPE})
    @OslcReadOnly(false)
    public Link getOwningDefinition()
    {
        // Start of user code getterInit:owningDefinition
        // End of user code
        return owningDefinition;
    }
    
    
    // Start of user code setterAnnotation:isVariation
    // End of user code
    public void setIsVariation(final Boolean isVariation )
    {
        // Start of user code setterInit:isVariation
        // End of user code
        this.isVariation = isVariation;
    
        // Start of user code setterFinalize:isVariation
        // End of user code
    }
    
    // Start of user code setterAnnotation:isReference
    // End of user code
    public void setIsReference(final Boolean isReference )
    {
        // Start of user code setterInit:isReference
        // End of user code
        this.isReference = isReference;
    
        // Start of user code setterFinalize:isReference
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedUsage
    // End of user code
    public void setNestedUsage(final Set<Link> nestedUsage )
    {
        // Start of user code setterInit:nestedUsage
        // End of user code
        this.nestedUsage.clear();
        if (nestedUsage != null)
        {
            this.nestedUsage.addAll(nestedUsage);
        }
    
        // Start of user code setterFinalize:nestedUsage
        // End of user code
    }
    
    // Start of user code setterAnnotation:owningUsage
    // End of user code
    public void setOwningUsage(final Link owningUsage )
    {
        // Start of user code setterInit:owningUsage
        // End of user code
        this.owningUsage = owningUsage;
    
        // Start of user code setterFinalize:owningUsage
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedPort
    // End of user code
    public void setNestedPort(final Set<Link> nestedPort )
    {
        // Start of user code setterInit:nestedPort
        // End of user code
        this.nestedPort.clear();
        if (nestedPort != null)
        {
            this.nestedPort.addAll(nestedPort);
        }
    
        // Start of user code setterFinalize:nestedPort
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedAction
    // End of user code
    public void setNestedAction(final Set<Link> nestedAction )
    {
        // Start of user code setterInit:nestedAction
        // End of user code
        this.nestedAction.clear();
        if (nestedAction != null)
        {
            this.nestedAction.addAll(nestedAction);
        }
    
        // Start of user code setterFinalize:nestedAction
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedState
    // End of user code
    public void setNestedState(final Set<Link> nestedState )
    {
        // Start of user code setterInit:nestedState
        // End of user code
        this.nestedState.clear();
        if (nestedState != null)
        {
            this.nestedState.addAll(nestedState);
        }
    
        // Start of user code setterFinalize:nestedState
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedConstraint
    // End of user code
    public void setNestedConstraint(final Set<Link> nestedConstraint )
    {
        // Start of user code setterInit:nestedConstraint
        // End of user code
        this.nestedConstraint.clear();
        if (nestedConstraint != null)
        {
            this.nestedConstraint.addAll(nestedConstraint);
        }
    
        // Start of user code setterFinalize:nestedConstraint
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedTransition
    // End of user code
    public void setNestedTransition(final Set<Link> nestedTransition )
    {
        // Start of user code setterInit:nestedTransition
        // End of user code
        this.nestedTransition.clear();
        if (nestedTransition != null)
        {
            this.nestedTransition.addAll(nestedTransition);
        }
    
        // Start of user code setterFinalize:nestedTransition
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedRequirement
    // End of user code
    public void setNestedRequirement(final Set<Link> nestedRequirement )
    {
        // Start of user code setterInit:nestedRequirement
        // End of user code
        this.nestedRequirement.clear();
        if (nestedRequirement != null)
        {
            this.nestedRequirement.addAll(nestedRequirement);
        }
    
        // Start of user code setterFinalize:nestedRequirement
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedCalculation
    // End of user code
    public void setNestedCalculation(final Set<Link> nestedCalculation )
    {
        // Start of user code setterInit:nestedCalculation
        // End of user code
        this.nestedCalculation.clear();
        if (nestedCalculation != null)
        {
            this.nestedCalculation.addAll(nestedCalculation);
        }
    
        // Start of user code setterFinalize:nestedCalculation
        // End of user code
    }
    
    // Start of user code setterAnnotation:directedUsage
    // End of user code
    public void setDirectedUsage(final Set<Link> directedUsage )
    {
        // Start of user code setterInit:directedUsage
        // End of user code
        this.directedUsage.clear();
        if (directedUsage != null)
        {
            this.directedUsage.addAll(directedUsage);
        }
    
        // Start of user code setterFinalize:directedUsage
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedCase
    // End of user code
    public void setNestedCase(final Set<Link> nestedCase )
    {
        // Start of user code setterInit:nestedCase
        // End of user code
        this.nestedCase.clear();
        if (nestedCase != null)
        {
            this.nestedCase.addAll(nestedCase);
        }
    
        // Start of user code setterFinalize:nestedCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedAnalysisCase
    // End of user code
    public void setNestedAnalysisCase(final Set<Link> nestedAnalysisCase )
    {
        // Start of user code setterInit:nestedAnalysisCase
        // End of user code
        this.nestedAnalysisCase.clear();
        if (nestedAnalysisCase != null)
        {
            this.nestedAnalysisCase.addAll(nestedAnalysisCase);
        }
    
        // Start of user code setterFinalize:nestedAnalysisCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:variantMembership
    // End of user code
    public void setVariantMembership(final Set<Link> variantMembership )
    {
        // Start of user code setterInit:variantMembership
        // End of user code
        this.variantMembership.clear();
        if (variantMembership != null)
        {
            this.variantMembership.addAll(variantMembership);
        }
    
        // Start of user code setterFinalize:variantMembership
        // End of user code
    }
    
    // Start of user code setterAnnotation:usage
    // End of user code
    public void setUsage(final Set<Link> usage )
    {
        // Start of user code setterInit:usage
        // End of user code
        this.usage.clear();
        if (usage != null)
        {
            this.usage.addAll(usage);
        }
    
        // Start of user code setterFinalize:usage
        // End of user code
    }
    
    // Start of user code setterAnnotation:variant
    // End of user code
    public void setVariant(final Set<Link> variant )
    {
        // Start of user code setterInit:variant
        // End of user code
        this.variant.clear();
        if (variant != null)
        {
            this.variant.addAll(variant);
        }
    
        // Start of user code setterFinalize:variant
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedReference
    // End of user code
    public void setNestedReference(final Set<Link> nestedReference )
    {
        // Start of user code setterInit:nestedReference
        // End of user code
        this.nestedReference.clear();
        if (nestedReference != null)
        {
            this.nestedReference.addAll(nestedReference);
        }
    
        // Start of user code setterFinalize:nestedReference
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedConnection
    // End of user code
    public void setNestedConnection(final Set<Link> nestedConnection )
    {
        // Start of user code setterInit:nestedConnection
        // End of user code
        this.nestedConnection.clear();
        if (nestedConnection != null)
        {
            this.nestedConnection.addAll(nestedConnection);
        }
    
        // Start of user code setterFinalize:nestedConnection
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedItem
    // End of user code
    public void setNestedItem(final Set<Link> nestedItem )
    {
        // Start of user code setterInit:nestedItem
        // End of user code
        this.nestedItem.clear();
        if (nestedItem != null)
        {
            this.nestedItem.addAll(nestedItem);
        }
    
        // Start of user code setterFinalize:nestedItem
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedPart
    // End of user code
    public void setNestedPart(final Set<Link> nestedPart )
    {
        // Start of user code setterInit:nestedPart
        // End of user code
        this.nestedPart.clear();
        if (nestedPart != null)
        {
            this.nestedPart.addAll(nestedPart);
        }
    
        // Start of user code setterFinalize:nestedPart
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedInterface
    // End of user code
    public void setNestedInterface(final Set<Link> nestedInterface )
    {
        // Start of user code setterInit:nestedInterface
        // End of user code
        this.nestedInterface.clear();
        if (nestedInterface != null)
        {
            this.nestedInterface.addAll(nestedInterface);
        }
    
        // Start of user code setterFinalize:nestedInterface
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedAttribute
    // End of user code
    public void setNestedAttribute(final Set<Link> nestedAttribute )
    {
        // Start of user code setterInit:nestedAttribute
        // End of user code
        this.nestedAttribute.clear();
        if (nestedAttribute != null)
        {
            this.nestedAttribute.addAll(nestedAttribute);
        }
    
        // Start of user code setterFinalize:nestedAttribute
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedView
    // End of user code
    public void setNestedView(final Set<Link> nestedView )
    {
        // Start of user code setterInit:nestedView
        // End of user code
        this.nestedView.clear();
        if (nestedView != null)
        {
            this.nestedView.addAll(nestedView);
        }
    
        // Start of user code setterFinalize:nestedView
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedViewpoint
    // End of user code
    public void setNestedViewpoint(final Set<Link> nestedViewpoint )
    {
        // Start of user code setterInit:nestedViewpoint
        // End of user code
        this.nestedViewpoint.clear();
        if (nestedViewpoint != null)
        {
            this.nestedViewpoint.addAll(nestedViewpoint);
        }
    
        // Start of user code setterFinalize:nestedViewpoint
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedRendering
    // End of user code
    public void setNestedRendering(final Set<Link> nestedRendering )
    {
        // Start of user code setterInit:nestedRendering
        // End of user code
        this.nestedRendering.clear();
        if (nestedRendering != null)
        {
            this.nestedRendering.addAll(nestedRendering);
        }
    
        // Start of user code setterFinalize:nestedRendering
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedVerificationCase
    // End of user code
    public void setNestedVerificationCase(final Set<Link> nestedVerificationCase )
    {
        // Start of user code setterInit:nestedVerificationCase
        // End of user code
        this.nestedVerificationCase.clear();
        if (nestedVerificationCase != null)
        {
            this.nestedVerificationCase.addAll(nestedVerificationCase);
        }
    
        // Start of user code setterFinalize:nestedVerificationCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedEnumeration
    // End of user code
    public void setNestedEnumeration(final Set<Link> nestedEnumeration )
    {
        // Start of user code setterInit:nestedEnumeration
        // End of user code
        this.nestedEnumeration.clear();
        if (nestedEnumeration != null)
        {
            this.nestedEnumeration.addAll(nestedEnumeration);
        }
    
        // Start of user code setterFinalize:nestedEnumeration
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedAllocation
    // End of user code
    public void setNestedAllocation(final Set<Link> nestedAllocation )
    {
        // Start of user code setterInit:nestedAllocation
        // End of user code
        this.nestedAllocation.clear();
        if (nestedAllocation != null)
        {
            this.nestedAllocation.addAll(nestedAllocation);
        }
    
        // Start of user code setterFinalize:nestedAllocation
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedConcern
    // End of user code
    public void setNestedConcern(final Set<Link> nestedConcern )
    {
        // Start of user code setterInit:nestedConcern
        // End of user code
        this.nestedConcern.clear();
        if (nestedConcern != null)
        {
            this.nestedConcern.addAll(nestedConcern);
        }
    
        // Start of user code setterFinalize:nestedConcern
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedOccurrence
    // End of user code
    public void setNestedOccurrence(final Set<Link> nestedOccurrence )
    {
        // Start of user code setterInit:nestedOccurrence
        // End of user code
        this.nestedOccurrence.clear();
        if (nestedOccurrence != null)
        {
            this.nestedOccurrence.addAll(nestedOccurrence);
        }
    
        // Start of user code setterFinalize:nestedOccurrence
        // End of user code
    }
    
    // Start of user code setterAnnotation:definition
    // End of user code
    public void setDefinition(final Set<Link> definition )
    {
        // Start of user code setterInit:definition
        // End of user code
        this.definition.clear();
        if (definition != null)
        {
            this.definition.addAll(definition);
        }
    
        // Start of user code setterFinalize:definition
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedUseCase
    // End of user code
    public void setNestedUseCase(final Set<Link> nestedUseCase )
    {
        // Start of user code setterInit:nestedUseCase
        // End of user code
        this.nestedUseCase.clear();
        if (nestedUseCase != null)
        {
            this.nestedUseCase.addAll(nestedUseCase);
        }
    
        // Start of user code setterFinalize:nestedUseCase
        // End of user code
    }
    
    // Start of user code setterAnnotation:nestedFlow
    // End of user code
    public void setNestedFlow(final Set<Link> nestedFlow )
    {
        // Start of user code setterInit:nestedFlow
        // End of user code
        this.nestedFlow.clear();
        if (nestedFlow != null)
        {
            this.nestedFlow.addAll(nestedFlow);
        }
    
        // Start of user code setterFinalize:nestedFlow
        // End of user code
    }
    
    // Start of user code setterAnnotation:owningDefinition
    // End of user code
    public void setOwningDefinition(final Link owningDefinition )
    {
        // Start of user code setterInit:owningDefinition
        // End of user code
        this.owningDefinition = owningDefinition;
    
        // Start of user code setterFinalize:owningDefinition
        // End of user code
    }
    
    
}
