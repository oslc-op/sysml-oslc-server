<?xml version="1.0" encoding="ASCII"?>
<oscl4j_vocabulary:Vocabularies xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:oscl4j_vocabulary="http://org.eclipse.lyo/oslc4j/vocabulary">
  <vocabularies namespaceURI="http://purl.org/dc/terms/" label="Dublin Core" preferredNamespacePrefix="dcterms">
    <properties name="title"/>
    <properties name="identifier"/>
    <properties name="description"/>
  </vocabularies>
  <vocabularies namespaceURI="https://www.omg.org/spec/SysML/20230201/vocab#" label="SysML Vocabulary" preferredNamespacePrefix="sysml_vocab">
    <classes name="ExhibitStateUsage" label="ExhibitStateUsage" comment="&lt;p>An ExhibitStateUsage is a StateUsage that represents the exhibiting of a StateUsage. Unless it is the StateUsage itself, the StateUsage to be exhibited is related to the ExhibitStateUsage by a ReferenceSubsetting Relationship. An ExhibitStateUsage is also a PerformActionUsage, with its &lt;code>exhibitedState&lt;/code> as the &lt;code>performedAction&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the ExhibitStateUsage is owned by a PartDefinition or PartUsage, then it also subsets the StateUsage &lt;em>&lt;code>Part::exhibitedStates&lt;/code>&lt;/em> from the Systems model library.&lt;/p>&#xA;"/>
    <classes name="StateUsage" label="StateUsage" comment="&lt;p>A &lt;code>StateUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that is nominally the &lt;code>Usage&lt;/code> of a &lt;code>StateDefinition&lt;/code>. However, other kinds of kernel &lt;code>Behaviors&lt;/code> are also allowed as &lt;code>types&lt;/code>, to permit use of &lt;code>Behaviors&lt;/code from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>StateUsage&lt;/code> may be related to up to three of its &lt;code>ownedFeatures&lt;/code> by &lt;code>StateSubactionMembership&lt;/code> &lt;code>Relationships&lt;code>, all of different &lt;code>kinds&lt;/code>, corresponding to the entry, do and exit actions of the &lt;code>StateUsage&lt;/code>.&lt;/p>&#xA;&#xA;let general : Sequence(Type) = ownedGeneralization.general in&#xA;general->selectByKind(StateDefinition)->&#xA;    forAll(g | g.isParallel = isParallel) and&#xA;general->selectByKind(StateUsage)->&#xA;    forAll(g | g.parallel = isParallel)&#xA;entryAction &lt;> null implies&#xA;    entryAction.specializesFromLibrary('StateAction::entryAction')&#xA;doAction =&#xA;    let doMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::do) in&#xA;    if doMemberships->isEmpty() then null&#xA;    else doMemberships->at(1)&#xA;    endif&#xA;entryAction =&#xA;    let entryMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::entry) in&#xA;    if entryMemberships->isEmpty() then null&#xA;    else entryMemberships->at(1)&#xA;    endif&#xA;isParallel implies&#xA;    nestedAction.incomingTransition->isEmpty() and&#xA;    nestedAction.outgoingTransition->isEmpty()&#xA;isSubstateUsage(false) implies&#xA;    specializesFromLibrary('States::State::substates')&#xA;exitAction =&#xA;    let exitMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::exit) in&#xA;    if exitMemberships->isEmpty() then null&#xA;    else exitMemberships->at(1)&#xA;    endif&#xA;specializesFromLibrary('States::StateAction')&#xA;ownedMembership->&#xA;    selectByKind(StateSubactionMembership)->&#xA;    isUnique(kind)"/>
    <classes name="ActionUsage" label="ActionUsage" comment="&lt;p>An &lt;code>ActionUsage&lt;/code> is a &lt;code>Usage&lt;/code> that is also a &lt;code>Step&lt;/code>, and, so, is typed by a &lt;code>Behavior&lt;/code>. Nominally, if the type is an &lt;code>ActionDefinition&lt;/code>, an &lt;code>ActionUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>ActionDefinition&lt;/code> within a system. However, other kinds of kernel &lt;code>Behaviors&lt;/code> are also allowed, to permit use of &lt;code>Behavior&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::subactions')&#xA;specializesFromLibrary('Actions::actions')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PartDefinition) or&#xA; owningType.oclIsKindOf(PartUsage)) implies&#xA;    specializesFromLibrary('Parts::Part::ownedActions')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(StateSubactionMembership) implies&#xA;    let kind : StateSubactionKind = &#xA;        owningFeatureMembership.oclAsType(StateSubactionMembership).kind in&#xA;    if kind = StateSubactionKind::entry then&#xA;        redefinesFromLibrary('States::StateAction::entryAction')&#xA;    else if kind = StateSubactionKind::do then&#xA;        redefinesFromLibrary('States::StateAction::doAction')&#xA;    else&#xA;        redefinesFromLibrary('States::StateAction::exitAction')&#xA;    endif endif"/>
    <classes name="Step" label="Step" comment="&lt;p>A Step is a Feature that is typed by one or more Behaviors. Steps may be used by one Behavior to coordinate the performance of other Behaviors, supporting the steady refinement of behavioral descriptions. Steps can be ordered in time and can be connected using ItemFlows to specify things flowing between their parameters.&lt;/p>&#xA;&#xA;allSupertypes()->includes(resolveGlobal(&quot;Performances::performances&quot;))&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) implies&#xA;    specializesFromLibrary('Performances::Performance::enclosedPerformance')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.oclIsKindOf(Feature) and&#xA; owningType.oclAsType(Feature).type->&#xA;    exists(oclIsKindOf(Structure)) implies&#xA;    specializesFromLibrary('Objects::Object::ownedPerformance')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) and&#xA;    self.isComposite implies&#xA;    specializesFromLibrary('Performances::Performance::subperformance')"/>
    <classes name="Feature" label="Feature" comment="&lt;p>A Feature is a Type that classifies sequences of multiple things (in the universe). These must concatenate a sequence drawn from the intersection of the Feature&amp;#39;s &lt;code>featuringTypes&lt;/code> (&lt;em>domain&lt;/em>) with a sequence drawn from the intersection of its &lt;code>types&lt;/code> (&lt;em>co-domain&lt;/em>), treating (co)domains as sets of sequences. The domain of Features that do not have any &lt;code>featuringTypes&lt;/code> is the same as if it were the library Type Anything. A Feature&amp;#39;s &lt;code>types&lt;/code> include at least Anything, which can be narrowed to other Classifiers by Redefinition.&lt;/p>&#xA;&#xA;&lt;p>In the simplest cases, a Feature&amp;#39;s &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> are Classifiers, its sequences being pairs (length = 2), with the first element drawn from the Feature&amp;#39;s domain and the second element from its co-domain (the Feature &amp;quot;value&amp;quot;). Examples include cars paired with wheels, people paired with other people, and cars paired with numbers&amp;nbsp;representing the car length.&lt;/p>&#xA;&#xA;&lt;p>Since Features are Types, their &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> can be Features. When both are, Features classify sequences of at least four elements (length &amp;gt; 3), otherwise at least three (length &amp;gt; 2). The &lt;code>featuringTypes&lt;/code> of &lt;em>nested&lt;/em> Features are Features.&lt;/p>&#xA;&#xA;&lt;p>The values of a Feature with &lt;code>chainingFeatures&lt;/code> are the same as values of the last Feature in the chain, which can be found by starting with values of the first Feature, then from those values to values of the second feature, and so on, to values of the last feature.&lt;/p>&#xA;&#xA;ownedRedefinition = ownedSubsetting->selectByKind(Redefinition)&#xA;ownedTypeFeaturing = ownedRelationship->selectByKind(TypeFeaturing)->&#xA;    select(tf | tf.featureOfType = self)&#xA;ownedSubsetting = ownedGeneralization->selectByKind(Subsetting)&#xA;isComposite = owningFeatureMembership &lt;> null and owningFeatureMembership.isComposite&#xA;ownedTyping = ownedGeneralization->selectByKind(FeatureTyping)&#xA;type =&#xA;    if chainingFeature->notEmpty() then&#xA;        chainingFeature->last().type&#xA;    else&#xA;        ownedTyping.type->&#xA;            union(ownedSubsetting.subsettedFeature.type)->&#xA;            asOrderedSet()&#xA;    endif&#xA;isEnd = owningFeatureMembership &lt;> null and owningFeatureMembership.oclIsKindOf(EndFeatureMembership)&#xA;multiplicity &lt;> null implies multiplicity.featuringType = featuringType &#xA;specializesFromLibrary(&quot;Base::things&quot;)&#xA;chainingFeatures->excludes(self)&#xA;ownedFeatureChaining = ownedRelationship->selectByKind(FeatureChaining)&#xA;chainingFeature = ownedFeatureChaining.chainingFeature&#xA;chainingFeatures->size() &lt;> 1&#xA;isEnd and owningType &lt;> null implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(isEnd) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedEndFeatures : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(isEnd) in&#xA;            ownedEndFeatures->size() >= i implies&#xA;                redefines(ownedEndFeatures->at(i))&#xA;ownedMembership->&#xA;    selectByKind(FeatureValue)->&#xA;    forAll(fv | specializes(fv.value.result))&#xA;isEnd and owningType &lt;> null and&#xA;owningType.oclIsKindOf(Association) implies&#xA;    specializesFromLibrary(&quot;Links::Link::participants&quot;)&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Structure)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.type->includes(oclIsKindOf(Structure))) implies&#xA;    specializesFromLibrary(&quot;Occurrence::Occurrence::suboccurrences&quot;)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(LiteralExpression) or&#xA; owningType.oclIsKindOf(FeatureReferenceExpression)) implies&#xA;    if owningType.oclIsKindOf(LiteralString) then&#xA;        specializesFromLibrary(&quot;ScalarValues::String&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Boolean&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralInteger) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Rational&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Rational&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Real&quot;)&#xA;    else specializes(&#xA;        owningType.oclAsType(FeatureReferenceExpression).referent)&#xA;    endif endif endif endif endif&#xA;&#xA;ownedTyping.type->exists(selectByKind(Class)) implies&#xA;    specializesFromLibrary(&quot;Occurrences::occurrences&quot;)&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary(&quot;Occurrence::Occurrence::suboccurrences&quot;)&#xA;ownedTyping.type->exists(selectByKind(DataType)) implies&#xA;    specializesFromLibary(&quot;Base::dataValues&quot;)&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(ItemFlowEnd) and&#xA;owningType.ownedFeature->at(1) = self implies&#xA;    let flowType : Type = owningType.owningType in&#xA;    flowType &lt;> null implies&#xA;        let i : Integer = &#xA;            flowType.ownedFeature.indexOf(owningType) in&#xA;        (i = 1 implies &#xA;            redefinesFromLibrary(&quot;Transfers::Transfer::source::sourceOutput&quot;)) and&#xA;        (i = 2 implies&#xA;            redefinesFromLibrary(&quot;Transfers::Transfer::source::targetInput&quot;))&#xA;                 &#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Behavior) or&#xA; owningType.oclIsKindOf(Step)) implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(direction &lt;> null) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedParameters : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(direction &lt;> null) in&#xA;            ownedParameters->size() >= i implies&#xA;                redefines(ownedParameters->at(i))&#xA;ownedTyping.type->exists(selectByKind(Structure)) implies&#xA;    specializesFromLibary(&quot;Objects::objects&quot;)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Function) and&#xA;    self = owningType.oclAsType(Function).result or&#xA; owningType.oclIsKindOf(Expression) and&#xA;    self = owningType.oclAsType(Expression).result) implies&#xA;    owningType.ownedSpecialization.general->&#xA;        select(oclIsKindOf(Function) or oclIsKindOf(Expression))->&#xA;        forAll(supertype |&#xA;            redefines(&#xA;                if superType.oclIsKindOf(Function) then&#xA;                    superType.oclAsType(Function).result&#xA;                else&#xA;                    superType.oclAsType(Expression).result&#xA;                endif)&#xA;ownedRelationship->selectByKind(FeatureInverting)"/>
    <classes name="Type" label="Type" comment="&lt;p>A Type is a Namespace that is the most general kind of Element supporting the semantics of classification. A Type may be a Classifier or a Feature, defining conditions on what is classified by the Type (see also the description of &lt;code>isSufficient&lt;/code>).&lt;/p>&#xA;&#xA;ownedSpecialization = ownedRelationship->selectByKind(Specialization)->&#xA;    select(g | g.special = self)&#xA;    &#xA;multiplicity = &#xA;    let ownedMultiplicities: Sequence(Multiplicity) =&#xA;        ownedMember->selectByKind(Multiplicity) in&#xA;    if ownedMultiplicities->isEmpty() then null&#xA;    else ownedMultiplicities->first()&#xA;    endif&#xA;ownedFeatureMembership = ownedRelationship->selectByKind(FeatureMembership)&#xA;let ownedConjugators: Sequence(Conjugator) = &#xA;    ownedRelationship->selectByKind(Conjugation) in&#xA;    ownedConjugator = &#xA;        if ownedConjugators->isEmpty() then null &#xA;        else ownedConjugators->at(1) endif&#xA;output =&#xA;    if isConjugated then &#xA;        conjugator.originalType.input&#xA;    else &#xA;        feature->select(direction = out or direction = inout)&#xA;    endif&#xA;input = &#xA;    if isConjugated then &#xA;        conjugator.originalType.output&#xA;    else &#xA;        feature->select(direction = _'in' or direction = inout)&#xA;    endif&#xA;inheritedMembership = inheritedMemberships(Set{})&#xA;specializesFromLibrary('Base::Anything')&#xA;directedFeature = feature->select(direction &lt;> null)&#xA;feature = featureMembership.ownedMemberFeature&#xA;featureMembership = ownedMembership->union(&#xA;    inheritedMembership->selectByKind(FeatureMembership))&#xA;ownedFeature = ownedFeatureMembership.ownedMemberFeature&#xA;differencingType = ownedDifferencing.differencingType&#xA;intersectingType->excludes(self)&#xA;differencingType->excludes(self)&#xA;unioningType = ownedUnioning.unioningType&#xA;unioningType->excludes(self)&#xA;intersectingType = ownedIntersecting.intersectingType&#xA;ownedRelationship->selectByKind(Conjugator)->size() &lt;= 1&#xA;ownedMember->selectByKind(Multiplicity)->size() &lt;= 1&#xA;endFeature = feature->select(isEnd)&#xA;ownedRelationship->selectByKind(Disjoining)&#xA;ownedRelationship->selectByKind(Unioning)&#xA;ownedRelationship->selectByKind(Intersecting)&#xA;ownedRelationship->selectByKind(Differencing)"/>
    <classes name="Namespace" label="Namespace" comment="&lt;p>A &lt;code>Namespace&lt;/code> is an &lt;code>Element&lt;/code> that contains other &lt;code>Element&lt;/code>, known as its &lt;code>members&lt;/code>, via &lt;code>Membership&lt;/code> &lt;code>Relationships&lt;/code> with those &lt;code>Elements&lt;/code>. The &lt;code>members&lt;/code> of a &lt;code>Namespace&lt;/code> may be owned by the &lt;code>Namespace&lt;/code>, aliased in the &lt;code>Namespace&lt;/code>, or imported into the &lt;code>Namespace&lt;/code> via &lt;code>Import&lt;/code> &lt;code>Relationships&lt;/code> with other &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Namespace&lt;/code> can provide names for its &lt;code>members&lt;/code> via the &lt;code>memberNames&lt;/code> and &lt;code>memberShortNames&lt;/code> specified by the &lt;code>Memberships&lt;/code> in the &lt;code>Namespace&lt;/code>. If a &lt;code>Membership&lt;/code> specifies a &lt;code>memberName&lt;/code> and/or &lt;code>memberShortName&lt;/code>, then that those are names of the corresponding &lt;code>memberElement&lt;/code> relative to the &lt;code>Namespace&lt;/code>. For an &lt;code>OwningMembership&lt;/code>, the &lt;code>owningMemberName&lt;/code> and &lt;code>owningMemberShortName&lt;/code> are given by the &lt;code>Element&lt;/code> &lt;code>name&lt;/code> and &lt;code>shortName&lt;/code>. Note that the same &lt;code>Element&lt;/code> may be the &lt;code>memberElement&lt;/code> of multiple &lt;code>Memberships&lt;/code> in a &lt;code>Namespace&lt;/code> (though it may be owned at most once), each of which may define a separate alias for the &lt;code>Element&lt;/code> relative to the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;membership->forAll(m1 | &#xA;    membership->forAll(m2 | &#xA;        m1 &lt;> m2 implies m1.isDistinguishableFrom(m2)))&#xA;member = membership.memberElement&#xA;ownedMember = ownedMembership->selectByKind(OwningMembership).ownedMemberElement&#xA;importedMembership = importedMemberships(Set{})&#xA;ownedImport = ownedRelationship->selectByKind(Import)&#xA;ownedMembership = ownedRelationship->selectByKind(Membership)"/>
    <classes name="Element" label="Element" comment="&lt;p>An &lt;code>Element&lt;/code> is a constituent of a model that is uniquely identified relative to all other &lt;code>Elements&lt;/code>. It can have &lt;code>Relationships&lt;/code> with other &lt;code>Elements&lt;/code>. Some of these &lt;code>Relationships&lt;/code> might imply ownership of other &lt;code>Elements&lt;/code>, which means that if an &lt;code>Element&lt;/code> is deleted from a model, then so are all the &lt;code>Elements&lt;/code> that it owns.&lt;/p>&#xA;&#xA;ownedElement = ownedRelationship.ownedRelatedElement&#xA;owner = owningRelationship.owningRelatedElement&#xA;qualifiedName =&#xA;    if owningNamespace = null then null&#xA;    else if owningNamespace.owner = null then escapedName()&#xA;    else if owningNamespace.qualifiedName = null then null&#xA;    else owningNamespace.qualifiedName + '::' + escapedName()&#xA;    endif endif endif&#xA;documentation = ownedElement->selectByKind(Documentation)&#xA;ownedAnnotation = ownedRelationship->selectByKind(Annotation)->&#xA;    select(a | a.annotatedElement = self)&#xA;name = effectiveName()&#xA;ownedRelationship->exists(isImplied) implies isImpliedIncluded&#xA;isLibraryElement = libraryNamespace() &lt;>null&#xA;&#xA;shortName = effectiveShortName()"/>
    <classes name="OwningMembership" label="OwningMembership" comment="&lt;p>An OwningMembership is a Membership that owns its &lt;code>memberElement&lt;/code> as a &lt;code>ownedRelatedElement&lt;/code>. The &lt;code>ownedMemberElementM&lt;/code> becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>.&#xA;ownedMemberName = ownedMemberElement.name&#xA;ownedMemberShortName = ownedMemberElement.shortName"/>
    <classes name="Membership" label="Membership" comment="&lt;p>Membership is a Relationship between a Namespace and an Element that indicates the Element is a &lt;code>member&lt;/code> of (i.e., is contained in) the Namespace. Any &lt;code>memberNames&lt;/code> specify how the &lt;code>memberElement&lt;/code> is identified in the Namespace and the &lt;code>visibility&lt;/code> specifies whether or not the &lt;code>memberElement&lt;/code> is publicly visible from outside the Namespace.&lt;/p>&#xA;&#xA;&lt;p>If a Membership is an OwningMembership, then it owns its &lt;code>memberElement&lt;/code>, which becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>. Otherwise, the &lt;code>memberNames&lt;/code> of a Membership are effectively aliases within the &lt;code>membershipOwningNamespace&lt;/code> for an Element with a separate OwningMembership in the same or a different Namespace.&lt;p>&#xA;"/>
    <classes name="Relationship" label="Relationship" comment="&lt;p>A &lt;code>Relationship&lt;/code> is an &lt;code>Element&lt;/code> that relates other &lt;code>Element&lt;s/code>. Some of its &lt;code>relatedElements&lt;/code> may be owned, in which case those &lt;code>ownedRelatedElements&lt;/code> will be deleted from a model if their &lt;code>owningRelationship&lt;/code> is. A &lt;code>Relationship&lt;/code> may also be owned by another &lt;code>Element&lt;/code>, in which case the &lt;code>ownedRelatedElements&lt;/code> of the &lt;code>Relationship&lt;/code> are also considered to be transitively owned by the &lt;code>owningRelatedElement&lt;/code> of the Relationship.&lt;/p>&#xA;&#xA;&lt;p>The &lt;code>relatedElements&lt;/code> of a Relationship are divided into &lt;code>source&lt;/code> and &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. The &lt;code>Relationship&lt;/code> is considered to be directed from the &lt;code>source&lt;/code> to the &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. An undirected &lt;code>Relationship&lt;/code> may have either all &lt;code>source&lt;/code> or all &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &amp;quot;relationship &lt;code>Element&lt;/code>&amp;quot; in the abstract syntax is generically any &lt;code>Element&lt;/code> that is an instance of either &lt;code>Relationship&lt;/code> or a direct or indirect specialization of &lt;code>Relationship&lt;/code>. Any other kind of &lt;code>Element&lt;/code> is a &amp;quot;non-relationship &lt;code>Element&lt;/code>&amp;quot;. It is a convention of that non-relationship &lt;code>Elements&lt;/code> are &lt;em>only&lt;/em> related via reified relationship &lt;code>Elements&lt;/code>. Any meta-associations directly between non-relationship &lt;code>Elements&lt;/code> must be derived from underlying reified &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;relatedElement = source->union(target)"/>
    <classes name="Documentation" label="Documentation" comment="&lt;p>Documentation is a Comment that specifically documents a &lt;code>documentedElement&lt;/code>, which must be its &lt;code>owner&lt;/code>.&lt;/p>"/>
    <classes name="Comment" label="Comment" comment="&lt;p>A Comment is an AnnotatingElement whose &lt;code>body&lt;/code> in some way describes its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="AnnotatingElement" label="AnnotatingElement" comment="&lt;p>An AnnotatingElement is an Element that provides additional description of or metadata on some other Element. An AnnotatingElement is attached to its &lt;code>annotatedElement&lt;/code> by an Annotation Relationship.&lt;/p>&#xA;&#xA;annotatedElement = &#xA; if annotation->notEmpty() then annotation.annotatedElement&#xA; else owningNamespace endif"/>
    <classes name="Annotation" label="Annotation" comment="&lt;p>An Annotation is a Relationship between an AnnotatingElement and the Element that is annotated by that AnnotatingElement.&lt;/p>&#xA;"/>
    <classes name="TextualRepresentation" label="TextualRepresentation" comment="&lt;p>A TextualRepresentation is an AnnotatingElement whose &lt;code>body&lt;/code> represents the &lt;code>representedElement&lt;/code> in a given &lt;code>language&lt;/code>. The &lt;code>representedElement&lt;/code> must be the &lt;code>owner&lt;/code> of the TextualRepresentation. The named &lt;code>language&lt;/code> can be a natural language, in which case the &lt;code>body&lt;/code> is an informal representation, or an artifical language, in which case the &lt;code>body&lt;/code> is expected to be a formal, machine-parsable representation.&lt;/p>&#xA;&#xA;&lt;p>If the named &lt;code>language&lt;/code> of a TextualRepresentation is machine-parsable, then the &lt;code>body&lt;/code> text should be legal input text as defined for that &lt;code>language&lt;/code>. The interpretation of the named language string shall be case insensitive. The following &lt;code>language&lt;/code> names are defined to correspond to the given standard languages:&lt;/p>&#xA;&#xA;&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; width=&quot;498&quot;>&#xA;&#x9;&lt;thead>&#xA;&#x9;&lt;/thead>&#xA;&#x9;&lt;tbody>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>kerml&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Kernel Modeling Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>ocl&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Object Constraint Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>alf&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Action Language for fUML&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&lt;/tbody>&#xA;&lt;/table>&#xA;&#xA;&lt;p>Other specifications may define specific &lt;code>language&lt;/code> strings, other than those shown in&amp;nbsp;&lt;mms-view-link mms-doc-id=&quot;_19_0_4_12e503d9_1655498859928_646482_53332&quot; mms-element-id=&quot;MMS_1656305537944_6a3ca48e-424a-4a4d-8ce2-56df128ebabe&quot; mms-pe-id=&quot;_hidden_MMS_1656305558930_8d3925ff-003f-4024-a594-14317550f480_pei&quot;>[cf:Standard Language Names.vlink]&lt;/mms-view-link>, to be used to indicate the use of languages from those specifications in KerML TextualRepresentations.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>language&lt;/code> of a TextualRepresentation is &amp;quot;&lt;code>kerml&lt;/code>&amp;quot;, then the &lt;code>body&lt;/code> text shall be a legal representation of the &lt;code>representedElement&lt;/code> in the KerML textual concrete syntax. A conforming tool can use such a TextualRepresentation Annotation to record the original KerML concrete syntax text from which an Element was parsed. In this case, it is a tool responsibility to ensure that the &lt;code>body&lt;/code> of the TextualRepresentation remains correct (or the Annotation is removed) if the annotated Element changes other than by re-parsing the &lt;code>body&lt;/code> text.&lt;/p>&#xA;&#xA;&lt;p>An Element with a TextualRepresentation in a language other than KerML is essentially a semantically &amp;quot;opaque&amp;quot; Element specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.&lt;/p>&#xA;"/>
    <classes name="Import" label="Import" comment="&lt;p>An Import is an Relationship between its &lt;code>importOwningNamespace&lt;/code> and either a Membership (for a MembershipImport) or another Namespace (for a NamespaceImport), which determines a set of Memberships that become &lt;code>importedMemberships&lt;/code> of the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isImportAll = false&lt;/code> (the default), then only public Memberships are considered &amp;quot;visible&amp;quot;. If &lt;code>isImportAll = true&lt;/code>, then all Memberships are considered &amp;quot;visible&amp;quot;, regardless of their declared &lt;code>visibility&lt;/code>. If &lt;code>isRecursive = true&lt;/code>, then visible Memberships are also recursively imported from owned sub-Namespaces.&lt;/p>&#xA;&#xA;"/>
    <classes name="Specialization" label="Specialization" comment="&lt;p>Specialization is a Relationship between two Types that requires all instances of the &lt;code>specific&lt;/code> type to also be instances of the &lt;code>general&lt;/code> Type (i.e., the set of instances of the &lt;code>specific&lt;/code> Type is a &lt;em>subset&lt;/em> of those of the &lt;code>general&lt;/code> Type, which might be the same set).&lt;/p>&#xA;&#xA;not specific.isConjugated"/>
    <classes name="FeatureMembership" label="FeatureMembership" comment="&lt;p>FeatureMembership is an OwningMembership for a Feature in a Type that is also a Featuring Relationship between the Feature and the Type, in which the &lt;code>featuringType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featureOfType&lt;/code> is the &lt;code>target&lt;/code>. A FeatureMembership is always owned by its &lt;code>owningType&lt;/code>, which is the &lt;code>featuringType&lt;/code> for the FeatureMembership considered as a Featuring.&lt;/p>&#xA;"/>
    <classes name="Featuring" label="Featuring" comment="&lt;p>Featuring is a Relationship between a Type and a Feature that is featured by that Type. Every instance in the domain of the &lt;code>feature&lt;/code> must be classified by the &lt;code>type&lt;/code>. This means that sequences that are classified by the &lt;code>feature&lt;/code> must have a prefix subsequence that is classified by the &lt;code>type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Featuring is abstract and does not commit to which of &lt;code>feature&lt;/code> or &lt;code>type&lt;/code> are the source or target. This commitment is made in the subclasses of Featuring, TypeFeaturing and FeatureMembership, which are directed differently.&lt;/p>"/>
    <classes name="Conjugation" label="Conjugation" comment="&lt;p>Conjugation is a Relationship between two types in which the &lt;code>conjugatedType&lt;/code> inherits all the Features of the &lt;code>originalType&lt;/code>, but with all &lt;code>input&lt;/code> and &lt;code>output&lt;/code> Features reversed. That is, any Features with a FeatureMembership with &lt;code>direction&lt;/code> &lt;em>in&lt;/em> relative to the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>out&lt;/em> relative to the &lt;code>conjugatedType&lt;/code> and, similarly, Features with &lt;code>direction&lt;/code> &lt;em>out&lt;/em> in the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>in&lt;/em> in the &lt;code>originalType&lt;/code>. Features with &lt;code>direction&lt;/code> &lt;em>inout&lt;/em>, or with no &lt;code>direction&lt;/code>, in the &lt;code>originalType&lt;/code>, are inherited without change.&lt;/p>&#xA;&#xA;&lt;p>A Type may participate as a &lt;code>conjugatedType&lt;/code> in at most one Conjugation relationship, and such a Type may not also be the &lt;code>specific&lt;/code> Type in any Generalization relationship.&lt;/p>&#xA;"/>
    <classes name="Multiplicity" label="Multiplicity" comment="&lt;p>A &lt;code>Multiplicity&lt;/code> is a &lt;code>Feature>/code> whose co-domain is a set of natural numbers giving the allowed cardinalities of each &lt;code>typeWithMultiplicity&lt;/code>. The &lt;em>cardinality&lt;/em> of a &lt;code>Type&lt;/code> is defined as follows, depending on whether the &lt;code>Type&lt;/code> is a &lt;code>Classifier&lt;/code> or &lt;code>Feature&lt;/code>.&#xA;&lt;ul>&#xA;&lt;li>&lt;code>Classifier/code> &#x2013; The number of basic instances of the &lt;code>Classifier&lt;/code>, that is, those instances representing things, which are not instances of any subtypes of the &lt;code>Classifier&lt;/code> that are &lt;code>Features&lt;/code>.&#xA;&lt;li>&lt;code>Features&lt;/code> &#x2013; The number of instances with the same featuring instances. In the case of a &lt;code>Feature&lt;/code> with a &lt;code>Classifier&lt;/code> as its &lt;code>featuringType&lt;/code>, this is the number of values of &lt;code>Feature&lt;/code> for each basic instance of the &lt;code>Classifier&lt;/code>. Note that, for non-unique &lt;code>Features&lt;/code>, all duplicate values are included in this count.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>&lt;code>Multiplicity&lt;/code> co-domains (in models) can be specified by &lt;code>Expression&lt;/code> that might vary in their results. If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Classifier&lt;/code>, the domain of the &lt;code>Multiplicity&lt;/code> shall be &lt;em>&lt;code>Base::Anything&lt;/code>&lt;/em>.  If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Feature&lt;/code>,  the &lt;code>Multiplicity&lt;/code> shall have the same domain as the &lt;code>typeWithMultiplicity&lt;/code>.&lt;/p>&#xA;&#xA;if owningType &lt;> null and owningType.oclIsKindOf(Feature) then&#xA;    featuringType = &#xA;        owningType.oclAsType(Feature).featuringType&#xA;else&#xA;    featuringType->isEmpty()&#xA;endif&#xA;specializesFromLibrary(&quot;Base::naturals&quot;)"/>
    <classes name="Intersecting" label="Intersecting" comment="&lt;p>Intersecting is a Relationship that makes its &lt;code>intersectingType&lt;/code> one of the &lt;code>intersectingTypes&lt;/code> of its &lt;code>typeIntersected&lt;/code>.&lt;/p>"/>
    <classes name="Unioning" label="Unioning" comment="&lt;p>Unioning is a Relationship that makes its &lt;code>unioningType&lt;/code> one of the &lt;code>unioningTypes&lt;/code> of its &lt;code>typeUnioned&lt;/code>.&lt;/p>"/>
    <classes name="Disjoining" label="Disjoining" comment="&lt;p>A Disjoining is a Relationship between Types asserted to have interpretations that are not shared (disjoint) between them, identified as &lt;code>typeDisjoined&lt;/code> and &lt;code>disjoiningType&lt;/code>. For example, a Classifier for mammals is disjoint from a Classifier for minerals, and a Feature for people&amp;#39;s parents is disjoint from a Feature for their children. &lt;/code>&lt;/p>&#xA;"/>
    <classes name="Differencing" label="Differencing" comment="&lt;p>Differencing is a Relationship that makes its &lt;code>differencingType&lt;/code> one of the &lt;code>differencingTypes&lt;/code> of its &lt;code>typeDifferenced&lt;/code>.&lt;/p>"/>
    <classes name="Redefinition" label="Redefinition" comment="&lt;p>Redefinition specializes&amp;nbsp;Subsetting to require&amp;nbsp;the &lt;code>redefinedFeature&lt;/code> and the&amp;nbsp;&lt;code>redefiningFeature&lt;/code> to have the same values (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>). This means any restrictions on the &lt;code>redefiningFeature&lt;/code>, such as &lt;code>type&lt;/code> or &lt;code>multiplicity&lt;/code>, also apply to the &lt;code>redefinedFeature&lt;/code> (on each instance of the &lt;code>owningType&lt;/code> of the redefining Feature), and vice versa. The &lt;code>redefinedFeature&lt;/code> might have&amp;nbsp;values for instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefiningFeature&lt;/code>, but only as instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefinedFeature&lt;/code> that happen to also be instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefiningFeature&lt;/code>. This is supported by the constraints inherited from&amp;nbsp;Subsetting on the domains of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code>. However, these constraints are narrowed for Redefinition to require the &lt;code>owningTypes&lt;/code> of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code> to be different and the &lt;code>redefinedFeature&lt;/code> to&amp;nbsp;not be imported into the &lt;code>owningNamespace&lt;/code> of the &lt;code>redefiningFeature&lt;/code>.&amp;nbsp;This&amp;nbsp;enables&amp;nbsp;the &lt;code>redefiningFeature&lt;/code> to have the same name as the &lt;code>redefinedFeature&lt;/code> if desired.&lt;/p>&#xA;"/>
    <classes name="Subsetting" label="Subsetting" comment="&lt;p>Subsetting is Generalization in which the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> Types that are Features. This means all values of the &lt;code>subsettingFeature&lt;/code> (on instances of its domain, i.e., the intersection of its &lt;code>featuringTypes&lt;/code>) are values of the &lt;code>subsettedFeature&lt;/code> on instances of its domain.&amp;nbsp; To support this,&amp;nbsp;the domain&amp;nbsp;of the &lt;code>subsettingFeature&lt;/code> must be the same or specialize (at least indirectly) the&amp;nbsp;domain&amp;nbsp;of the &lt;code>subsettedFeature&lt;/code> (via Generalization), and the range (intersection of a Feature&amp;#39;s &lt;code>types&lt;/code>) of the &lt;code>subsettingFeature&lt;/code> must specialize the range of the &lt;code>subsettedFeature&lt;/code>.&amp;nbsp;The &lt;code>subsettedFeature&lt;/code> is imported into the &lt;code>owningNamespace&lt;/code> of the &lt;code>subsettingFeature&lt;/code> (if it is not already in that namespace), requiring the names of the &lt;code>subsettingFeature&lt;/code> and &lt;code>subsettedFeature&lt;/code> to be different.&lt;/p>&#xA;"/>
    <classes name="FeatureTyping" label="FeatureTyping" comment="&lt;p>FeatureTyping is Specialization in which the &lt;code>specific&lt;/code> Type is a Feature. This means the set of instances of the (specific) &lt;code>typedFeature&lt;/code> is a subset of the set of instances of the (general) &lt;code>type&lt;/code>. In the simplest case, the &lt;code>type&lt;/code> is a Classifier, whereupon the &lt;code>typedFeature&lt;/code> subset has instances interpreted as sequences ending in things (in the modeled universe) that are instances of the Classifier.&lt;/p>&#xA;"/>
    <classes name="TypeFeaturing" label="TypeFeaturing" comment="&lt;p>A TypeFeaturing is a Featuring Relationship in which the &lt;code>featureOfType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featuringType&lt;/code> is the target. A TypeFeaturing may be owned by its &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <classes name="FeatureInverting" label="FeatureInverting" comment="&lt;p>A FeatureInverting is a Relationship between Features asserting that their interpretations (sequences) are the reverse of each other, identified as &lt;code>featureInverted&lt;/code> and &lt;code>invertingFeature&lt;/code>. For example, a Feature identifying each person's parents is the inverse of a Feature identifying each person's children.  A person identified as a parent of another will identify that other as one of their children.&lt;/p>&#xA;if owningRelatedElement.oclIsKindOf(Feature) then&#xA;    owningRelatedElement.oclAsType(Feature)&#xA;else &#xA;    null&#xA;endif"/>
    <classes name="FeatureChaining" label="FeatureChaining" comment="&lt;p>FeatureChaining is a Relationship that makes its target Feature one of the &lt;code>chainingFeatures&lt;/code> of its owning Feature.&lt;/p>"/>
    <classes name="ReferenceSubsetting" label="ReferenceSubsetting" comment="&lt;p>ReferenceSubsetting is a kind of Subsetting in which the &lt;code>referencedFeature&lt;/code> is syntactically distinguished from other Features subsetted by the &lt;code>referencingFeature&lt;/code>. ReferenceSubsetting has the same semantics as Subsetting, but the &lt;code>referenceFeature&lt;/code> may have a special purpose relative to the &lt;code>referencingFeature&lt;/code>. For instance, ReferenceSubsetting is used to identify the &lt;code>relatedFeatures&lt;/code> of a Connector.&lt;/p>&#xA;&#xA;&lt;p>ReferenceSubsetting is always an &lt;code>ownedRelationship&lt;/code> of its &lt;code>referencingFeature&lt;/code>. A Feature can have at most one &lt;code>ownedReferenceSubsetting&lt;/code>.&lt;p>&#xA;"/>
    <classes name="Behavior" label="Behavior" comment="&lt;p>A Behavior coordinates occurrences of other Behaviors, as well as&amp;nbsp;changes in objects. Behaviors can be decomposed into Steps and be characterized by &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::Performance&quot;)"/>
    <classes name="Class" label="Class" comment="&lt;p>A Class is a Classifier of things (in the universe) that can be distinguished without regard to how they are related to other things (via Features). This means multiple things classified by the same Class can be distinguished, even&amp;nbsp;when they are related&amp;nbsp;other things in exactly the same way.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurrences::Occurrence')&#xA;ownedGeneralization.general->&#xA;    forAll(not oclIsKindOf(DataType) and &#xA;           not oclIsKindOf(Association))"/>
    <classes name="Classifier" label="Classifier" comment="&lt;p>A Classifier is a Type for model elements that classify:&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Things&amp;nbsp;(in the universe) regardless of how Features relate them.&amp;nbsp; These are&amp;nbsp;sequences of exactly one&amp;nbsp;thing (sequence of length 1).&lt;/li>&#xA;&#x9;&lt;li>How the above&amp;nbsp;things are related by Features. These are sequences of multiple things (length &amp;gt; 1).&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>Classifiers that classify relationships (sequence length &amp;gt; 1) must also classify the things at the end of those&amp;nbsp;sequences (sequence length =1).&amp;nbsp; Because of this, Classifiers specializing Features cannot classify anything (any sequences).&lt;/p>&#xA;&#xA;ownedSubclassification = &#xA;    ownedSpecialization->selectByKind(Superclassification)&#xA;multiplicity &lt;> null implies multiplicity.featuringType->isEmpty()"/>
    <classes name="Subclassification" label="Subclassification" comment="&lt;p>Subclassification is Specialization in which both the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> Types are Classifiers. This means all instances of the specific Classifier are also instances of the general Classifier.&lt;/p>&#xA;"/>
    <classes name="OccurrenceUsage" label="OccurrenceUsage" comment="&lt;p>An &lt;code>OccurrenceUsage&lt;/code> is a &lt;code>Usage&lt;/code> whose &lt;code>types&lt;/code> are all &lt;code>Classes&lt;/code>. Nominally, if a &lt;code>type&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code>, an &lt;code>OccurrenceUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>OccurrenceDefinition&lt;/code> within a system. However, other types of Kernel &lt;code>Classes&lt;/code> are also allowed, to permit use of &lt;code>Classes&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>OccurrenceUsage&lt;/code> must subset, directly or indirectly, the base &lt;code>Feature&lt;/code> &lt;em>&lt;code>occurrences&lt;/code>&lt;/em> from the Kernel Semantic Library.&lt;/p>&#xA;&#xA;let individualDefinitions : Sequence(OccurrenceDefinition) = &#xA;    occurrenceDefinition->&#xA;        selectByKind(OccurrenceDefinition)->&#xA;        select(isIndividual) in&#xA;if individualDefinitions->isEmpty() then null&#xA;else individualDefinitions->at(1) endif&#xA;isIndividual implies individualDefinition &lt;> null&#xA;specializesFromLibrary(&quot;Occurrences::occurrences&quot;)&#xA;isComposite and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(OccurrenceUsage) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKind(Class))) implies&#xA;    specializesFromLibrary(&quot;Occurrences::Occurrence::suboccurrences&quot;)&#xA;occurrenceDefinition->select(isIndividual).size() &lt;= 1&#xA;portionKind &lt;> null implies&#xA;    occurrenceDefinition->forAll(occ | &#xA;        featuringType->exists(specializes(occ)))"/>
    <classes name="Usage" label="Usage" comment="&lt;p>A Usage is a usage of a Definition. A Usage may only be an &lt;code>ownedFeature&lt;/code> of a Definition or another Usage.&lt;/p>&#xA;&#xA;&lt;p>A Usage may have &lt;code>nestedUsages&lt;/code> that model &lt;code>features&lt;/code> that apply in the context of the &lt;code>owningUsage&lt;/code>. A Usage may also have Definitions nested in it, but this has no semantic significance, other than the nested scoping resulting from the Usage being considered as a Namespace for any nested Definitions.&lt;/p>&#xA;&#xA;&lt;p>However, if a Usage has &lt;code>isVariation&lt;/code> = true, then it represents a &lt;em>variation point&lt;/em> Usage. In this case, all of its &lt;code>members&lt;/code> must be &lt;code>variant&lt;/code> Usages, related to the Usage by VariantMembership Relationships. Rather than being &lt;code>features&lt;/code> of the Usage, &lt;code>variant&lt;/code> Usages model different concrete alternatives that can be chosen to fill in for the variation point Usage.&lt;/p>&#xA;variant = variantMembership.ownedVariantUsage&#xA;variantMembership = ownedMembership->selectByKind(VariantMembership)&#xA;not isVariation implies variantMembership->isEmpty()&#xA;isVariation implies variantMembership = ownedMembership&#xA;isReference = not isComposite&#xA;owningVariationUsage &lt;> null implies&#xA;    specializes(owningVariationUsage)&#xA;isVariation implies&#xA;    not ownedSpecialization.specific->exists(isVariation)&#xA;owningVariationDefinition &lt;> null implies&#xA;    specializes(owningVariationDefinition)"/>
    <classes name="Definition" label="Definition" comment="&lt;p>A Definition is a Classifier of Usages. The actual kinds of Definitions that may appear in a model are given by the subclasses of Definition (possibly as extended with user-defined &lt;em>&lt;code>SemanticMetadata&lt;/code>&lt;/em>).&lt;/p>&#xA;&#xA;&lt;p>Normally, a Definition has owned Usages that model &lt;code>features&lt;/code> of the thing being defined. A Definition may also have other Definitions nested in it, but this has no semantic significance, other than the nested scoping resulting from the Definition being considered as a Namespace for any nested Definitions.&lt;/p>&#xA;&#xA;&lt;p>However, if a Definition has &lt;code>isVariation&lt;/code> = &lt;code>true&lt;/code>, then it represents a &lt;em>variation point&lt;/em> Definition. In this case, all of its &lt;code>members&lt;/code> must be &lt;code>variant&lt;/code> Usages, related to the Definition by VariantMembership Relationships. Rather than being &lt;code>features&lt;/code> of the Definition, &lt;code>variant&lt;/code> Usages model different concrete alternatives that can be chosen to fill in for an abstract Usage of the variation point Definition.&lt;/p>&#xA;&#xA;isVariation implies variantMembership = ownedMembership&#xA;variant = variantMembership.ownedVariantUsage&#xA;variantMembership = ownedMembership->selectByKind(VariantMembership)&#xA;not isVariation implies variantMembership->isEmpty()&#xA;isVariation implies&#xA;    not ownedSpecialization.specific->exists(isVariation)"/>
    <classes name="PortUsage" label="PortUsage" comment="&lt;p>A &lt;code>PortUsage&lt;/code> is a usage of a &lt;code>PortDefinition&lt;/code>. A &lt;code>PortUsage&lt;code> itself as well as all its &lt;code>nestedUsages&lt;/code> must be referential (non-composite).&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>PortUsage&lt;/code> must specialize, directly or indirectly, the &lt;code>PortUsage&lt;/code> &lt;code>&lt;em>Ports::ports&lt;/em>&lt;/code> from the Systems Model Library.&lt;/p>&#xA;nestedUsage->&#xA;    select(not oclIsKindOf(PortUsage))->&#xA;    forAll(not isComposite)&#xA;specializesFromLibrary('Ports::ports')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PortDefinition) or&#xA; owningType.oclIsKindOf(PortUsage)) implies&#xA;    specializesFromLibrary('Ports::Port::subport')&#xA;owningType = null or&#xA;not owningType.oclIsKindOf(PortDefinition) and&#xA;not owningType.oclIsKindOf(PortUsage) implies&#xA;    isReference"/>
    <classes name="PortDefinition" label="PortDefinition" comment="&lt;p>A PortDefinition defines a point at which external entities can connect to and interact with a system or part of a system. Any &lt;code>ownedUsages&lt;/code> of a PortDefinition, other than PortUsages, must not be composite.&lt;/p>&#xA;&#xA;&lt;p>A PortDefinition must subclass, directly or indirectly, the base Class &lt;em>Port&lt;/em> from the Systems model library.&lt;/p>&#xA;&#xA;conjugatedPortDefinition = &#xA;let conjugatedPortDefinitions : Sequence(ConjugatedPortDefinition) =&#xA;    ownedMember->selectByKind(ConjugatedPortDefinition) in&#xA;if conjugatedPortDefinitions->isEmpty() then null&#xA;else conjugatedPortDefinitions->first()&#xA;endif&#xA;ownedUsage->&#xA;    select(not oclIsKindOf(PortUsage))->&#xA;    forAll(not isComposite)&#xA;ownedFeature->&#xA;    selectByKind(ConjugatedPortDefinition)->&#xA;    size() &lt;= 1&#xA;specializeFromLibrary('Ports::Port')"/>
    <classes name="OccurrenceDefinition" label="OccurrenceDefinition" comment="&lt;p>An &lt;code>OccurrenceDefinition&lt;/code> is a &lt;code>Definition&lt;/code> of a &lt;code>Class&lt;/code> of individuals that have an independent life over time and potentially an extent over space. This includes both structural things and behaviors that act on such structures.&lt;/p>&#xA;&#xA;&lt;p>If &lt;code>isIndividual&lt;/code> is true, then the &lt;code>OccurrenceDefinition&lt;/code> is constrained to represent an individual thing. The instances of such an &lt;code>OccurrenceDefinition&lt;/code> include all spatial and temporal portions of the individual being represented, but only one of these can be the complete &lt;code>Life&lt;/code> of the individual. All other instances must be portions of the &amp;quot;maximal portion&amp;quot; that is single &lt;code>Life&lt;/code> instance, capturing the conception that all of the instances represent one individual with a single &amp;quot;identity&amp;quot;.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>OccurrenceDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>Class&lt;/code> &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;&#xA;(lifeClass &lt;> null) = isIndividual&#xA;lifeClass =&#xA;    let lifeClasses: Sequence(LifeClass) = &#xA;        ownedMember->selectByKind(LifeClass) in&#xA;    if lifeClasses->isEmpty() then null&#xA;    else lifeClasses->at(1)&#xA;    endif"/>
    <classes name="LifeClass" label="LifeClass" comment="&lt;p>A LifeClass is a Class that specializes both the &lt;em>Base::Life Class&lt;/em> from the Kernel Library and a single OccurrenceDefinition, and has a multiplicity of 0..1. This constrains the OccurrenceDefinition to have at most one instance that is a complete Life.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Occurrences::Life&quot;)&#xA;multiplicity &lt;> null and&#xA;multiplicity.specializesFromLibrary(&quot;Base::zeroOrOne&quot;)&#xA;specializes(individualDefinition)&#xA;isSufficient"/>
    <classes name="Structure" label="Structure" comment="&lt;p>A Structure is a Class of objects in the modeled universe that are primarily structural in nature. While an Object is not itself behavioral, it may be involved in and acted on by Behaviors, and it may be the performer of some of them.&lt;/p>&#xA;&#xA;specializesFromLibrary('Objects::Object')"/>
    <classes name="ConjugatedPortDefinition" label="ConjugatedPortDefinition" comment="&lt;p>A ConjugatedPortDefinition is a PortDefinition that is a PortConjugation of its original PortDefinition. That is, a ConjugatedPortDefinition inherits all the &lt;code>features&lt;/code> of the original PortDefinition, but input &lt;code>flows&lt;/code> of the original PortDefinition become outputs on the ConjugatedPortDefinition and output &lt;code>flows&lt;/code> of the original PortDefinition become inputs on the ConjugatedPortDefinition. Every PortDefinition (that is not itself a ConjugatedPortDefinition) has exactly one corresponding ConjugatedPortDefinition, whose effective name is the name of the &lt;code>originalPortDefinition&lt;/code>, with the character &lt;code>~&lt;/code> prepended.&lt;/p>&#xA;originalPortDefinition = ownedPortConjugator.originalPortDefinition&#xA;conjugatedPortDefinition = null"/>
    <classes name="PortConjugation" label="PortConjugation" comment="&lt;p>A PortConjugation is a Conjugation Relationship between a PortDefinition and its corresponding ConjugatedPortDefinition. As a result of this Relationship, the ConjugatedPortDefinition inherits all the &lt;code>features&lt;/code> of the original PortDefinition, but input &lt;code>flows&lt;/code> of the original PortDefinition become outputs on the ConjugatedPortDefinition and output &lt;code>flows&lt;/code> of the original PortDefinition become inputs on the ConjugatedPortDefinition.&lt;/code>&lt;/p>&#xA;"/>
    <classes name="ConstraintUsage" label="ConstraintUsage" comment="&lt;p>A &lt;code>ConstraintUsage&lt;/code> is an &lt;code>OccurrenceUsage&lt;/code> that is also a &lt;code>BooleanExpression&lt;code>, and, so, is typed by a &lt;code>Predicate&lt;/code>. Nominally, if the type is a &lt;code>ConstraintDefinition&lt;code>, a &lt;code>ConstraintUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>ConstraintDefinition&lt;code>. However, other kinds of kernel &lt;code>Predicates&lt;/code> are also allowed, to permit use of &lt;code>Predicates&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(RequirementConstraintMembership) implies&#xA;    if owningFeatureMembership.oclAsType(RequirementConstraintMembership).kind = &#xA;        RequirementConstraintKind::assumption then&#xA;        specializesFromLibrary('Requirements::RequirementCheck::assumptions')&#xA;    else&#xA;        specializesFromLibrary('Requirements::RequirementCheck::constraints')&#xA;    endif&#xA;specializesFromLibrary('Constraints::constraintChecks')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary('Items::Item::checkedConstraints')"/>
    <classes name="BooleanExpression" label="BooleanExpression" comment="&lt;p>A BooleanExpression is a Boolean-valued Expression whose type is a Predicate. It represents a logical condition resulting from the evaluation of the Predicate.&lt;/p>&#xA;&#xA;&lt;p>A BooleanExpression must subset, directly or indirectly, the Expression &lt;em>booleanEvaluations&lt;/em> from the Base model library, which is typed by the base Predicate &lt;em>BooleanEvaluation&lt;/em>. As a result, a BooleanExpression must always be typed by BooleanEvaluation or a subclass of BooleanEvaluation.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::booleanEvaluations&quot;)"/>
    <classes name="Expression" label="Expression" comment="&lt;p>An Expression is a Step that is typed by a Function. An Expression that also has a Function as its &lt;code>featuringType&lt;/code> is a computational step within that Function. An Expression always has a single &lt;code>result&lt;/code> parameter, which redefines the &lt;code>result&lt;/code> parameter of its defining &lt;code>function&lt;/code>. This allows Expressions to be interconnected in tree structures, in which inputs to each Expression in the tree are determined as the results of other Expressions in the tree.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})&#xA;specializesFromLibrary(&quot;Performances::evaluations&quot;)&#xA;owningMembership &lt;> null and &#xA;owningMembership.oclIsKindOf(FeatureValue) implies&#xA;    let featureWithValue : Feature = &#xA;        owningMembership.oclAsType(FeatureValue).featureWithValue in&#xA;    featuringType = featureWithValue.featuringType&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))"/>
    <classes name="Function" label="Function" comment="&lt;p>A Function is a Behavior that has a single &lt;code>out&lt;/code> &lt;code>parameter&lt;/code> that is identified as its &lt;code>result&lt;/code>. Any other &lt;code>parameters&lt;/code> of a Function than the &lt;code>result&lt;/code> must have direction &lt;code>in&lt;/code>. A Function represents the performance of a calculation that produces the values of its &lt;code>result&lt;/code> parameter. This calculation may be decomposed into Expressions that are &lt;code>steps&lt;/code> of the Function.&lt;/p>&#xA;&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;specializesFromLibrary(&quot;Performances::Evaluation&quot;)"/>
    <classes name="Predicate" label="Predicate" comment="&lt;p>A Predicate is a Function whose &lt;code>result&lt;/code> Parameter has type &lt;em>Boolean&lt;/em> and multiplicity 1..1.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::BooleanEvaluation&quot;)"/>
    <classes name="TransitionUsage" label="TransitionUsage" comment="&lt;p>A &lt;code>TransitionUsage&lt;/code> is an &lt;code>ActionUsage&lt;code> representing a triggered transition between &lt;code>ActionUsages&lt;/code> or &lt;code>StateUsages&lt;/code>. When triggered by a &lt;code>triggerAction&lt;/code>, when its &lt;code>guardExpression&lt;/code> is true, the &lt;code>TransitionUsage&lt;/code> asserts that its &lt;code>source&lt;/code> is exited, then its &lt;code>effectAction&lt;/code> (if any) is performed, and then its &lt;code>target&lt;/code> is entered.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>TransitionUsage&lt;code> can be related to some of its &lt;code>ownedFeatures&lt;/code> using &lt;code>TransitionFeatureMembership&lt;/code> &lt;code>Relationships&lt;/code>, corresponding to the &lt;code>triggerAction&lt;/code>, &lt;code>guardExpression&lt;/code> and &lt;code>effectAction&lt;/code> of the &lt;code>TransitionUsage&lt;/code>.&lt;/p>&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ActionDefinition) or &#xA; owningType.oclIsKindOf(ActionUsage)) and&#xA;not (owningType.oclIsKindOf(StateDefinition) or&#xA;     owningType.oclIsKindOf(StateUsage)) implies&#xA;    specializesFromLibrary(&quot;Actions::Action::decisionTransitionActions&quot;)&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(StateDefinition) or&#xA; owningType.oclIsKindOf(StateUsage)) implies&#xA;    specializesFromLibrary(&quot;States::State::stateTransitions&quot;)&#xA;specializesFromLibrary(&quot;Actions::actions::transitionActions&quot;)&#xA;source =&#xA;    if ownedMembership->isEmpty() then null&#xA;    else&#xA;        let member : Element = &#xA;            ownedMembership->at(1).memberElement in &#xA;        if not member.oclIsKindOf(ActionUsage) then null&#xA;        else member.oclAsKindOf(ActionUsage)&#xA;        endif&#xA;    endif&#xA;target =&#xA;    if succession.targetFeature->isEmpty() then null&#xA;    else&#xA;        let targetFeature : Feature = &#xA;            succession.targetFeature->at(1) in&#xA;        if not targetFeature.oclIsKindOf(ActionUsage) then null&#xA;        else targetFeature.oclAsType(ActionUsage)&#xA;        endif&#xA;    endif&#xA;triggerAction = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeature->&#xA;    selectByKind(AcceptActionUsage)&#xA;let successions : Sequence(Successions) = &#xA;    ownedMember->selectByKind(Succession) in&#xA;successions->notEmpty() and&#xA;successions->at(1).targetFeature->&#xA;    forAll(oclIsKindOf(ActionUsage))&#xA;guardExpression = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeature->&#xA;    selectByKind(Expression)&#xA;triggerAction->forAll(specializesFromLibrary('Actions::TransitionAction::accepter') and&#xA;guardExpression->forAll(specializesFromLibrary('Actions::TransitionAction::guard') and&#xA;effectAction->forAll(specializesFromLibrary('Actions::TransitionAction::effect'))&#xA;triggerAction = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeatures->&#xA;    selectByKind(AcceptActionUsage)&#xA;succession.sourceFeature = source&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(source) and&#xA;    b.relatedFeatures->includes(inputParameter(2)))&#xA;triggerAction->notEmpty() implies&#xA;    let payloadParameter : Feature = inputParameter(2) in&#xA;    payloadParameter &lt;> null and&#xA;    payloadParameter.subsetsChain(triggerAction->at(1), triggerPayloadParameter())&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(succession) and&#xA;    b.relatedFeatures->includes(resolveGlobal(&#xA;        'TransitionPerformances::TransitionPerformance::transitionLink')))&#xA;if triggerAction->isEmpty() then&#xA;    inputParameters()->size() >= 1&#xA;else&#xA;    inputParameters()->size() >= 2&#xA;endif&#xA;    &#xA;succession = ownedMember->selectByKind(Succession)->at(1)"/>
    <classes name="AcceptActionUsage" label="AcceptActionUsage" comment="&lt;p>An &lt;code>AcceptActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies the acceptance of an &lt;em>&lt;code>incomingTransfer&lt;/code>&lt;/em> from the &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> given by the result of its &lt;code>receiverArgument&lt;/code> Expression. (If no &lt;code>receiverArgument&lt;/code> is provided, the default is the &lt;em>&lt;code>this&lt;/code>&lt;/em> context of the AcceptActionUsage.) The payload of the accepted &lt;em>&lt;code>Transfer&lt;/em>&lt;/code> is output on its &lt;code>payloadParameter&lt;/code>. Which &lt;em>&lt;code>Transfers&lt;/em>&lt;/code> may be accepted is determined by conformance to the typing and (potentially) binding of the &lt;code>payloadParameter&lt;/code>.&lt;/p>&#xA;&#xA;inputParameters()->size() >= 2&#xA;receiverArgument = argument(2)&#xA;payloadArgument = argument(1)&#xA;payloadParameter = &#xA; if parameter->isEmpty() then null&#xA; else parameter->at(1) endif&#xA;not isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::acceptActions')&#xA;isSubactionUsage() and not isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::Action::acceptSubactions')&#xA;isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::TransitionAction::accepter')&#xA;payloadArgument &lt;> null and&#xA;payloadArgument.oclIsKindOf(TriggerInvocationExpression) implies&#xA;    let invocation : Expression =&#xA;        payloadArgument.oclAsType(Expression) in&#xA;    parameter->size() >= 2 and&#xA;    invocation.parameter->size() >= 2 and        &#xA;    ownedFeature->selectByKind(BindingConnector)->exists(b |&#xA;        b.relatedFeatures->includes(parameter->at(2)) and&#xA;        b.relatedFeatures->includes(invocation.parameter->at(2)))"/>
    <classes name="ReferenceUsage" label="ReferenceUsage" comment="&lt;p>A ReferenceUsage is a Usage that specifies a non-compositional (&lt;code>isComposite&lt;/code> = &lt;code>false&lt;/code>) reference to something. The type of a ReferenceUsage can be any kind of Classifier, with the default being the top-level Classifier Anything from the Kernel library. This allows the specification of a generic reference without distinguishing if the thing referenced is an attribute value, item, action, etc. All &lt;code>features&lt;/code> of a ReferenceUsage must also have &lt;code>isComposite&lt;/code> = &lt;code>false&lt;/code>.&lt;/p>&#xA;isReference"/>
    <classes name="Succession" label="Succession" comment="&lt;p>A Succession is a binary&amp;nbsp;Connector that requires its &lt;code>relatedFeatures&lt;/code> to happen separately in time. A Succession must be typed by the Association &lt;em>HappensBefore&lt;/em> from the Kernel Model Library (or a specialization of it).&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Occurences::happensBeforeLinks&quot;)"/>
    <classes name="Connector" label="Connector" comment="&lt;p>A Connector is a usage of Associations, with links restricted according to instances of the Type in which they are used (domain of the Connector). Associations restrict what kinds of things might be linked. The Connector further restricts these links to between values of two Features on instances of its domain.&lt;/p>&#xA;&#xA;relatedFeature = connectorEnd.ownedReferenceSubsetting.subsettedFeature&#xA;relatedFeature->forAll(f | &#xA;    if featuringType->isEmpty() then f.isFeaturedWithin(null)&#xA;    else featuringType->exists(t | f.isFeaturedWithin(t))&#xA;    endif)&#xA;sourceFeature = &#xA;    if relatedFeature->size() = 2 then relatedFeature->at(1) &#xA;    else null &#xA;    endif&#xA;targetFeature =&#xA;    if sourceFeature = null then relatedFeature&#xA;    else relatedFeature->excluding(sourceFeature)&#xA;    endif&#xA;connectorEnd = feature->select(isEnd)&#xA;not isAbstract implies relatedFeature->size() >= 2&#xA;specializesFromLibrary(&quot;Links::links&quot;)&#xA;association->exists(oclIsKindOf(AssociationStructure)) implies&#xA;    specializesFromLibrary(&quot;Objects::linkObjects&quot;)&#xA;connectorEnds->size() = 2 and&#xA;association->exists(oclIsKindOf(AssocationStructure)) implies&#xA;    specializesFromLibrary(&quot;Objects::binaryLinkObjects&quot;)&#xA;connectorEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::binaryLinks')&#xA;connectorEnds->size() > 2 implies&#xA;    not specializesFromLibrary(&quot;Links::BinaryLink&quot;)"/>
    <classes name="Association" label="Association" comment="&lt;p>An Association is a Relationship and a Classifier to enable classification of links between things (in the universe). The co-domains (&lt;code>types&lt;/code>) of the &lt;code>associationEnd&lt;/code> Features are the &lt;code>relatedTypes&lt;/code>, as co-domain and participants (linked things) of an Association identify each other.&lt;/p>&#xA;&#xA;relatedTypes = associationEnd.type&#xA;specializesFromLibrary(&quot;Links::Link&quot;)&#xA;oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Links::BinaryLink)&#xA;not isAbstract implies relatedType->size() >= 2&#xA;associationEnds->size() > 2 implies&#xA;    not specializesFromLibrary(&quot;Links::BinaryLink&quot;)"/>
    <classes name="RequirementUsage" label="RequirementUsage" comment="&lt;p>A RequirementUsage is a Usage of a RequirementDefinition.&lt;/p>&#xA;&#xA;&lt;p>A RequirementUsage must subset, directly or indirectly, the base RequirementUsage &lt;em>&lt;code>requirementChecks&lt;/code>&lt;/em> from the Systems model library.&lt;/p>"/>
    <classes name="RequirementDefinition" label="RequirementDefinition" comment="&lt;p>A RequirementDefinition is a ConstraintDefinition that defines a requirement as a constraint that is used in the context of a specification of a that a valid solution must satisfy. The specification is relative to a specified subject, possibly in collaboration with one or more external actors.&lt;/p>&#xA;&#xA;&lt;p>A RequirementDefinition must subclass, directly or indirectly, the base RequirementDefinition &lt;em>&lt;code>RequirementCheck&lt;/code>&lt;/em> from the Systems model library.&lt;/p>"/>
    <classes name="ConstraintDefinition" label="ConstraintDefinition" comment="&lt;p>A &lt;code>ConstraintDefinition&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code> that is also a &lt;code>Predicate&lt;/code> that defines a constraint that may be asserted to hold on a system or part of a system.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary('Constraints::ConstraintCheck')"/>
    <classes name="ConcernUsage" label="ConcernUsage" comment="&lt;p>A ConcernUsage is a Usage of a ConcernDefinition.&lt;/p>&#xA;&#xA;&lt;p>A ConcernUsage must subset, directly or indirectly, the base ConcernUsage &lt;em>&lt;code>concernChecks&lt;/code>&lt;/em> from the Systems model library. The &lt;code>ownedStakeholder&lt;/code> features of the ConcernUsage shall all subset the &lt;em>&lt;code>ConcernCheck::concernedStakeholders&lt;/code> &lt;/em>feature. If the ConcernUsage is an &lt;code>ownedFeature&lt;/code> of a StakeholderDefinition or StakeholderUsage, then the ConcernUsage shall have an &lt;code>ownedStakeholder&lt;/code> feature that is bound to the &lt;em>&lt;code>self&lt;/code>&lt;/em> feature of its owner.&lt;/p>&#xA;"/>
    <classes name="ConcernDefinition" label="ConcernDefinition" comment="&lt;p>A ConcernDefinition is a RequirementDefinition that one or more stakeholders may be interested in having addressed. These stakeholders are identified by the &lt;code>ownedStakeholders&lt;/code>of the ConcernDefinition.&lt;/p>&#xA;&#xA;&lt;p>A ConcernDefinition must subclass, directly or indirectly, the base ConcernDefinition &lt;em>ConcernCheck&lt;/em> from the Systems model library. The &lt;code>ownedStakeholder&lt;/code> features of a ConcernDefinition shall all subset the &lt;em>&lt;code>ConcernCheck::concernedStakeholders&lt;/code>&lt;/em> feature.&lt;/p>&#xA;"/>
    <classes name="PartUsage" label="PartUsage" comment="&lt;p>A &lt;code>PartUsage&lt;/code> is a usage of a &lt;code>PartDefinition&lt;/code> to represent a system or a part of a system. At least one of the &lt;code>itemDefinitions&lt;/code> of the &lt;code>PartUsage&lt;/code> must be a &lt;code>PartDefinition&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>PartUsage&lt;/code> must subset, directly or indirectly, the base &lt;code>PartUsage&lt;/code> &lt;em>&lt;code>parts&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>&#xA;itemDefinition->selectByKind(PartDefinition)&#xA;partDefinition->notEmpty()&#xA;specializesFromLibrary(&quot;Parts::parts&quot;)&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary(&quot;Items::Item::subparts&quot;)"/>
    <classes name="ItemUsage" label="ItemUsage" comment="&lt;p>An &lt;code>ItemUsage&lt;/code> is a &lt;code>ItemUsage&lt;/code> whose &lt;code>definition&lt;/code> is a &lt;code>Structure&lt;/code>. Nominally, if the &lt;code>definition&lt;/code> is an &lt;code>ItemDefinition&lt;/code>, an &lt;code>ItemUsage&lt;/code> is a &lt;code>ItemUsage&lt;/code> of that &lt;code>ItemDefinition&lt;/code> within a system. However, other kinds of Kernel &lt;code>Structures&lt;/code> are also allowed, to permit use of &lt;code>Structures&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>ItemUsage&lt;/code> must specialize, directly or indirectly, the base &lt;code>ItemUsage&lt;/code> &lt;em>&lt;code>items&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>&#xA;itemDefinition = occurrenceDefinition->selectByKind(ItemDefinition)&#xA;specializesFromLibrary(&quot;Items::items&quot;)&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary(&quot;Items::Item::subitem&quot;)"/>
    <classes name="PartDefinition" label="PartDefinition" comment="&lt;p>A &lt;code>PartDefinition&lt;/code> is an &lt;code>ItemDefinition&lt;/code> of a &lt;code>Class&lt;/code> of systems or parts of systems. Note that all parts may be considered items for certain purposes, but not all items are parts that can perform actions within a system.&lt;/p>&#xA;&#xA;&lt;/p>A &lt;code>PartDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>PartDefinition&lt;code> &lt;em>&lt;code>Part&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Parts::Part&quot;)"/>
    <classes name="ItemDefinition" label="ItemDefinition" comment="&lt;p>An &lt;code>ItemDefinition&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code> of the &lt;code>Structure&lt;/code> of things that may themselves be systems or parts of systems, but may also be things that are acted on by a system or parts of a system, but which do not necessarily perform actions themselves. This includes items that can be exchanged between parts of a system, such as water or electrical signals.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>ItemDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>ItemDefinition&lt;/code> &lt;em>&lt;code>Items::Item&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Items::Item&quot;)"/>
    <classes name="CalculationUsage" label="CalculationUsage" comment="&lt;p>A &lt;code>CalculationUsage&lt;/code> is an &lt;code>ActionUsage&lt;code> that is also an &lt;code>Expression&lt;/code>, and, so, is typed by a &lt;code>Function&lt;/code>. Nominally, if the &lt;code>type&lt;/code> is a &lt;code>CalculationDefinition&lt;/code>, a &lt;code>CalculationUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>CalculationDefinition&lt;/code> within a system. However, other kinds of kernel &lt;code>Functions&lt;/code> are also allowed, to permit use of &lt;code>Functions&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;specializesFromLibrary('Calculations::calculations')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(CalculationDefinition) or&#xA; owningType.oclIsKindOf(CalculationUsage)) implies&#xA;    specializesFromLibrary('Calculations::Calculation::subcalculations')"/>
    <classes name="VariantMembership" label="VariantMembership" comment="&lt;p>A VariantMembership is a Membership between a variation point Definition or Usage and a Usage that represents a variant in the context of that variation. The &lt;code>membershipOwningNamespace&lt;/code> for the VariantMembership must be either a Definition or a Usage with &lt;code>isVariation&lt;/code> = &lt;code>true&lt;/code>.&lt;/p>"/>
    <classes name="AnalysisCaseUsage" label="AnalysisCaseUsage" comment="&lt;p>An AnalysisCaseUsage is a Usage of an AnalysisCaseDefinition.&lt;/p>&#xA;&#xA;&lt;p>An AnalysisCaseUsage must subset, directly or indirectly, either the base AnalysisCaseUsage &lt;code>analysisCases&lt;/code> from the Systems model library, if it is not owned by an AnalysisCaseDefinition or AnalysisCaseUsage, or the AnalysisCaseUsage &lt;code>subAnalysisCases&lt;/code> inherited from its owner, otherwise.&lt;/p>"/>
    <classes name="CaseUsage" label="CaseUsage" comment="&lt;p>A CaseUsage is a Usage of a CaseDefinition.&lt;/p>&#xA;&#xA;&lt;p>A CaseUsage must subset, directly or indirectly, the base CaseUsage &lt;em>&lt;code>cases&lt;/code>&lt;/em> from the Systems model library. If it is owned by a CaseDefinition or CaseUsage, it must subset the CaseUsage &lt;em>&lt;code>Cases::subcases&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="CaseDefinition" label="CaseDefinition" comment="&lt;p>A CaseDefinition is a CalculationDefinition for a process, often involving collecting evidence or data, relative to a subject, possibly involving the collaboration of one or more other actors, producing a result that meets an objective.&lt;/p>&#xA;&#xA;&lt;p>A CaseDefinition must subclass, directly or indirectly, the base CaseDefinition &lt;em>Case&lt;/em> from the Systems model library.&lt;/p>"/>
    <classes name="CalculationDefinition" label="CalculationDefinition" comment="&lt;p>A &lt;code>CalculationDefinition&lt;/code> is an &lt;coed>ActionDefinition&lt;/code> that also defines a &lt;code>Function&lt;/code> producing a &lt;code>result&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Calculations::Calculation')&#xA;calculation = action->selectByKind(CalculationUsage)"/>
    <classes name="ActionDefinition" label="ActionDefinition" comment="&lt;p>An &lt;code>ActionDefinition&lt;/code> is a &lt;code>Definition&lt;/code> that is also a &lt;code>Behavior&lt;/code> that defines an &lt;em>&lt;code>Action&lt;/code>&lt;/em> performed by a system or part of a system.&lt;/p>&#xA;specializesFromLibrary('Actions::Action')&#xA;action = usage->selectByKind(ActionUsage)"/>
    <classes name="AnalysisCaseDefinition" label="AnalysisCaseDefinition" comment="&lt;p>An AnalysisCaseDefinition is a CaseDefinition for the case of carrying out an analysis.&lt;/p>&#xA;&#xA;&lt;p>An AnalysisCaseDefinition must subclass, directly or indirectly, the base AnalysisCaseDefinition AnalysisCase from the Systems model library.&lt;/p>"/>
    <classes name="ConnectorAsUsage" label="ConnectorAsUsage" comment="&lt;p>A ConnectorAsUsage is both a Connector and a Usage. ConnectorAsUsage cannot itself be instantiated in a SysML model, but it is the base class for the concrete classes BindingConnectorAsUsage, SuccessionAsUsage and ConnectionUsage.&lt;/p>"/>
    <classes name="InterfaceUsage" label="InterfaceUsage" comment="&lt;p>An InterfaceUsage is a Usage of an InterfaceDefinition to represent an interface connecting parts of a system through specific ports.&lt;/p>&#xA;&#xA;&lt;p>An InterfaceUsage must subset, directly or indirectly, the base InterfaceUsage &lt;code>interfaces&lt;/code> from the Systems model libary.&lt;/p>&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Interfaces::binaryInterfaces&quot;)&#xA;specializesFromLibrary(&quot;Interfaces::interfaces&quot;)"/>
    <classes name="ConnectionUsage" label="ConnectionUsage" comment="&lt;p>A ConnectionUsage is a ConnectorAsUsage that is also a PartUsage. Nominally, if its type is a ConnectionDefinition, then a ConnectionUsage is a Usage of that ConnectionDefinition, representing a connection between parts of a system. However, other kinds of kernel AssociationStructures are also allowed, to permit use of AssociationStructures from the Kernel Library (such as the default BinaryLinkObject).&lt;/p>&#xA;specializesFromLibrary(&quot;Connections::connections&quot;)&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Connections::binaryConnections&quot;)"/>
    <classes name="AssociationStructure" label="AssociationStructure" comment="specializesFromLibrary(&quot;Objects::ObjectLink&quot;)&#xA;endFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Objects::BinaryLinkObject&quot;)"/>
    <classes name="InterfaceDefinition" label="InterfaceDefinition" comment="&lt;p>An InterfaceDefinition is a ConnectionDefinition all of whose ends are PortUsages, defining an interface between elements that interact through such ports.&lt;/p>&#xA;&#xA;&lt;p>An InterfaceDefinition must subclass, directly or indirectly, the base InterfaceDefinition Interface from the Systems model library.&lt;/p>&#xA;specializesFromLibrary(&quot;Interfaces::Interface&quot;)&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Interfaces::BinaryInterface&quot;)"/>
    <classes name="ConnectionDefinition" label="ConnectionDefinition" comment="&lt;p>A ConnectionDefinition is a PartDefinition that is also an AssociationStructure, with two or more end features. The &lt;code>associationEnds&lt;/code> of a ConnectionDefinition must be Usages.&lt;/p>&#xA;specializesFromLibrary(&quot;Connections::Connection&quot;)&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Connections::BinaryConnections&quot;)"/>
    <classes name="AttributeUsage" label="AttributeUsage" comment="&lt;p>An &lt;code>AttributeUsage&lt;code> is a &lt;code>Usage&lt;/code> whose type is a &lt;code>DataType&lt;/code>. Nominally, if the type is an &lt;code>AttributeDefinition&lt;/code>, an &lt;code>AttributeUsage&lt;code> is a usage of a &lt;code>AttributeDefinition&lt;/code> to represent the value of some system quality or characteristic. However, other kinds of kernel &lt;code>DataTypes&lt;/code> are also allowed, to permit use of &lt;code>DataTypes&lt;/code> from the Kernel Model Libraries. An &lt;code>AttributeUsage&lt;code> itself as well as all its nested &lt;code>features&lt;/code> must be referential (non-composite).&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>AttributeUsage&lt;code> must specialize, directly or indirectly, the base &lt;code>Feature&lt;code> &lt;code>&lt;em>Base::dataValues&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;isReference&#xA;feature->forAll(not isComposite)&#xA;specializesFromLibrary(&quot;Base::dataValues&quot;)"/>
    <classes name="DataType" label="DataType" comment="&lt;p>A DataType is a Classifier of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same DataType&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.&lt;/li>&#xA;&#x9;&lt;li>Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;specializesFromLibrary('Base::DataValue')&#xA;ownedGeneralization.general->&#xA;    forAll(not oclIsKindOf(Class))"/>
    <classes name="ViewUsage" label="ViewUsage" comment="&lt;p>A ViewUsage is a usage of a ViewDefinition to specify the generation of a view of the &lt;code>members&lt;/code> of a collection of &lt;code>exposedNamespaces&lt;/code>. The ViewDefinition can satisfy more &lt;code>viewpoints&lt;/code> than its definition, and it can specialize the &lt;code>rendering&lt;/code> specified by its definition.&lt;p>&#xA;&#xA;&lt;p>A ViewUsage must subset, directly or indirectly, the base ViewUsage &lt;code>views&lt;/code> from the Systems model library.&lt;/p>&#xA;exposedElement = ownedImport->selectByKind(Expose).&#xA;    importedMemberships(Set{}).memberElement->&#xA;    select(elm | includeAsExposed(elm))->&#xA;    asOrderedSet()"/>
    <classes name="ViewDefinition" label="ViewDefinition" comment="&lt;p>A ViewDefinition is a PartDefinition that specifies how a view artifact is constructed to satisfy a &lt;code>viewpoint&lt;/code>. It specifies a &lt;code>viewConditions&lt;/code> to define the model content to be presented and a &lt;code>rendering&lt;/code> to define how the model content is presented.&lt;/p>&#xA;&#xA;&lt;/p>A ViewDefinition must subclass, directly or indirectly, the base ViewDefinition View from the Systems model library.&lt;/p>"/>
    <classes name="ViewpointUsage" label="ViewpointUsage" comment="&lt;p>A ViewpointUsage is a usage of a ViewpointDefinition.&lt;/p>&#xA;&#xA;&lt;p>A ViewpointUsage must subset, directly or indirectly, the base ViewpointUsage &lt;code>viewpoints&lt;/code> from the Systems model library.&lt;/p>"/>
    <classes name="ViewpointDefinition" label="ViewpointDefinition" comment="&lt;p>A ViewpointDefinition is a RequirementDefinition that specifies one or more stakeholder concerns that to be satisfied by created a view of a model.&lt;/p>&#xA;&#xA;&lt;p>A ViewpointDefinition must subclass, directly or indirectly, the base ViewpointDefinition Viewpoint from the Systems model library.&lt;/p>"/>
    <classes name="RenderingUsage" label="RenderingUsage" comment="&lt;p>A RenderingUsage is the usage of a RenderingDefinition to specify the rendering of a specific model view to produce a physical view artifact.&lt;/p>&#xA;&#xA;&lt;p>A RenderingUsage must subset, directly or indirectly, the base RenderingUsage &lt;code>renderings&lt;/code> from the Systems model library.&lt;/p>"/>
    <classes name="RenderingDefinition" label="RenderingDefinition" comment="&lt;p>A RenderingDefinition is a PartDefinition that defines a specific rendering of the content of a model view (e.g., symbols, style, layout, etc.).&lt;/p>&#xA;&#xA;&lt;p>A RenderingDefinition must subclass, directly or indirectly, the base RenderingDefinition Rendering from the Systems model library.&lt;/p>"/>
    <classes name="VerificationCaseUsage" label="VerificationCaseUsage" comment="&lt;p>A VerificationCaseUsage is a Usage of a VerificationCaseDefinition.&lt;/p>&#xA;&#xA;&lt;p>A VerificationCaseUsage must subset, directly or indirectly, either the base VerificationCaseUsage &lt;code>verificationCases&lt;/code> from the Systems model library, if it is not owned by a VerificationCaseDefinition or VerificationCaseUsage, or the VerificationCaseUsage &lt;code>subVerificationCases&lt;/code> inherited from its owner, otherwise.&lt;/p>"/>
    <classes name="VerificationCaseDefinition" label="VerificationCaseDefinition" comment="&lt;p>A VerificationCaseDefinition is a CaseDefinition for the purpose of verification of the subect of the case against its requirements.&lt;/p>&#xA;&#xA;&lt;p>A VerificationCaseDefinition must subclass, directly or indirectly, the base VerificationCaseDefinition VerificationCase from the Systems model library.&lt;/p>"/>
    <classes name="EnumerationUsage" label="EnumerationUsage" comment="&lt;p>An EnumerationUsage is an AttributeUsage whose &lt;code>attributeDefinition&lt;/code> is an EnumerationDefinition.&lt;/p>&#xA;&#xA;&lt;p>An EnumerationUsage must subset, directly or indirectly, the base EnumerationUsage &lt;code>enumerationValues&lt;/code> from the Systems model library.&lt;/p>"/>
    <classes name="EnumerationDefinition" label="EnumerationDefinition" comment="&lt;p>An &lt;code>EnumerationDefinition&lt;/code> is an &lt;code>AttributeDefinition&lt;/code> all of whose instances are given by an explicit list of &lt;code>enumeratedValues&lt;/code>. This is realized by requiring that the &lt;code>EnumerationDefinition&lt;/code> have &lt;code>isVariation = true&lt;/code>, with the &lt;code>enumeratedValues&lt;/code> being its variants.&lt;/p> &#xA;isVariation"/>
    <classes name="AttributeDefinition" label="AttributeDefinition" comment="&lt;p>An &lt;code>AttributeDefinition&lt;/code> is a &lt;code>Definition&lt;/code> and a &lt;code>DataType&lt;/code> of information about a quality or characteristic of a system or part of a system that has no independent identity other than its value. All &lt;code>features&lt;/code> of an &lt;code>AttributeDefinition&lt;/code>AttributeDefinition must be referential (non-composite).&lt;/p>&#xA;&#xA;&lt;p>As a &lt;code>DataType&lt;/code>, an &lt;code>AttributeDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>DataType&lt;/code> &lt;code>&lt;em>Base::DataValue&lt;/em>&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;feature->forAll(not isComposite)"/>
    <classes name="AllocationUsage" label="AllocationUsage" comment="&lt;p>An AllocationUsage is a usage of an AllocationDefinition asserting the allocation of the &lt;code>source&lt;/code> feature to the &lt;code>target&lt;/code> feature.&lt;/p>&#xA;&#xA;&lt;p>An AllocationUsage must subset, directly or indirectly, the base AllocatopnUsage &lt;code>allocations&lt;/code> from the Systems model library.&lt;/p>&#xA;specializesFromLibrary(&quot;Allocations::allocations&quot;)"/>
    <classes name="AllocationDefinition" label="AllocationDefinition" comment="&lt;p>An AllocationDefinition is a ConnectionDefinition that specifies that some or all of the responsibility to realize the intent of the &lt;code>source&lt;/code> is allocated to the &lt;code>target&lt;/code> instances. Such allocations define mappings across the various structures and hierarchies of a system model, perhaps as a precursor to more rigorous specifications and implementations. An AllocationDefinition can itself be refined using nested &lt;code>allocations&lt;/code> that give a finer-grained decomposition of the containing allocation mapping.&lt;/p>&#xA;&#xA;&lt;p>An AllocationDefinition must subclass, directly or indirectly, the base AllocationDefinition Allocation from the Systems model library.&lt;/p>&#xA;allocation = usage->selectAsKind(AllocationUsage)&#xA;specializesFromLibrary(&quot;Allocations::Allocation&quot;)"/>
    <classes name="UseCaseUsage" label="UseCaseUsage" comment="&lt;p>A UseCaseUsage is a Usage of a UseCaseDefinition.&lt;/p>&#xA;&#xA;&lt;p>A UseCaseUsage must subset, directly or indirectly, either the base UseCaseUsage &lt;em>&lt;code>useCases&lt;/code>&lt;/em> from the Systems model library. If it is owned by a UseCaseDefinition or UseCaseUsage then it must subset the UseCaseUsage &lt;em>&lt;code>UseCase::subUseCases&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="UseCaseDefinition" label="UseCaseDefinition" comment="&lt;p>A UseCaseDefinition is a CaseDefinition that specifies a set of actions performed by its subject, in interaction with one or more actors external to the subject. The objective is to yield an observable result that is of value for one or more of the actors.&lt;/p>&#xA;&#xA;&lt;p>A UseCaseDefinition must subclass, directly or indirectly, the base UseCaseDefinition &lt;em>UseCase&lt;/em> from the Systems model library.&lt;/p>&#xA;"/>
    <classes name="FlowConnectionUsage" label="FlowConnectionUsage" comment="&lt;p>A FlowConnectionUsage is a ConnectionUsage that is also an ItemFlow.&lt;/p>&#xA;if itemFlowEnds->isEmpty() then&#xA;    specializesFromLibrary(&quot;Connections::messageConnections&quot;)&#xA;else&#xA;    specializesFromLibrary(&quot;Connections::flowConnections&quot;&#xA;endif"/>
    <classes name="ItemFlow" label="ItemFlow" comment="&lt;p>An ItemFlow is a Step that represents the transfer of objects or values from one Feature to another. ItemFlows can take non-zero time to complete.&lt;/p>&#xA;&#xA;&lt;p>An ItemFlow must be typed by the Interaction &lt;em>&lt;code>Transfer&lt;/code>&lt;/em> from the Kernel Semantic Library, or a specialization of it.&lt;/p>&#xA;&#xA;if itemFlowEnds->isEmpty() then&#xA;    specializesFromLibrary(&quot;Transfers::transfers&quot;)&#xA;else&#xA;    specializesFromLibrary(&quot;Transfers::flowTransfers&quot;)&#xA;endif"/>
    <classes name="ItemFlowEnd" label="ItemFlowEnd" comment="&lt;p>An ItemFlowEnd is a Feature that is one of the &lt;code>endFeatures&lt;/code> giving the &lt;code>&lt;em>source&lt;/em>&lt;/code> or &lt;code>&lt;em>target&lt;/em>&lt;/code> of an ItemFlow. For ItemFlows typed by FlowTransfer or its specializations, ItemFlowEnds must have exactly one &lt;code>ownedFeature&lt;/code>, which redefines &lt;code>&lt;em>Transfer::source::sourceOutput&lt;/em>&lt;/code> or &lt;code>&lt;em>Transfer::target::targetInput&lt;/em>&lt;/code> and redefines the corresponding feature of the &lt;code>relatedElement&lt;/code> for its end.&lt;/p>"/>
    <classes name="ItemFeature" label="ItemFeature" comment="&lt;p>An ItemFeature is the &lt;code>ownedFeature&lt;/code> of an ItemFlow that identifies the things carried by the kinds of transfers that are instances of the ItemFlow. It must redefine &lt;code>&lt;em>Transfer::item&lt;/em>&lt;/code>.&lt;/p>&#xA;ownedRedefinition.redefinedFeature->&#xA;    redefinesFromLibrary(&quot;Transfers::Transfer::item&quot;)"/>
    <classes name="Interaction" label="Interaction" comment="&lt;p>An Interaction is a Behavior that is also an Association, providing a context for multiple objects that have behaviors that impact one another.&lt;/p>&#xA;"/>
    <classes name="MetadataUsage" label="MetadataUsage" comment="&lt;p>An MetadataUsage is a Usage and a MetadataFeature, used to annotate other Elements in a system model with metadata. As a MetadataFeature, its type must be a Metaclass, which will nominally be a MetadataDefinition. However, any Kernel Metaclass is also allowed, to permit use of Metaclasses from the Kernel Library.&lt;/p>&#xA;&#xA;&lt;p>A MetadataUsage must subset, directly or indirectly, the base MetadataUsage &lt;code>metadataItems&lt;/code> from the Systems model library.&lt;/p>"/>
    <classes name="MetadataFeature" label="MetadataFeature" comment="&lt;p>A MetadataFeature is a Feature that is an AnnotatingElement used to annotate another Element with metadata. It is typed by a Metaclass. All its &lt;code>ownedFeatures&lt;/code> must redefine &lt;code>features&lt;/code> of its &lt;code>metaclass&lt;/code> and any feature bindings must be model-level evaluable.&lt;/p>&#xA;&#xA;&lt;p>A MetadataFeature must subset, directly or indirectly, the base MetadataFeature &lt;em>&lt;code>metadata&lt;/code>&lt;/em> from the Kernel Library.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary(&quot;Metaobjects::metaobjects&quot;)&#xA;isSemantic() implies&#xA;    let annotatedTypes : Sequence(Type) = &#xA;        annotatedElement->selectAsKind(Type) in&#xA;    let baseTypes : Sequence(MetadataFeature) = &#xA;        evaluateFeature(resolveGlobal(&#xA;            'Metaobjects::SemanticMetadata::baseType').&#xA;            oclAsType(Feature))->&#xA;        selectAsKind(MetadataFeature) in&#xA;    annotatedTypes->notEmpty() and &#xA;    baseTypes()->notEmpty() and &#xA;    baseTypes()->first().isSyntactic() implies&#xA;        let annotatedType : Type = annotatedTypes->first() in&#xA;        let baseType : Element = baseTypes->first().syntaxElement() in&#xA;        if annotatedType.oclIsKindOf(Classifier) and &#xA;            baseType.oclIsKindOf(Feature) then&#xA;            baseType.oclAsType(Feature).type->&#xA;                forAll(t | annotatedType.specializes(t))&#xA;        else if baseType.oclIsKindOf(Type) then&#xA;            annotatedType.specializes(baseType.oclAsType(Type))&#xA;        else&#xA;            true&#xA;        endif"/>
    <classes name="Metaclass" label="Metaclass" comment="&lt;p>A Metaclass is a Structure used to type MetadataFeatures. It must subclassify, directly or indirectly, the base type &lt;em>&lt;code>Metadata&lt;/code>&lt;/em> from the Kernel Library.&lt;/p>&#xA;specializesFromLibrary(&quot;Metaobjects::Metaobject&quot;)"/>
    <classes name="PerformActionUsage" label="PerformActionUsage" comment="&lt;p>A &lt;code>PerformActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that represents the performance of an &lt;code>ActionUsage&lt;/code>. Unless it is the &lt;code>PerformActionUsage&lt;/code> itself, the &lt;code>ActionUsage&lt;/code> to be performed is related to the &lt;code>PerformActionUsage&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> relationship. A &lt;code>PerformActionUsage&lt;/code> is also an &lt;code>EventOccurrenceUsage&lt;/code>, with its &lt;code>performedAction&lt;/code> as the &lt;code>eventOccurrence&lt;/code>.&lt;/p>&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(ActionUsage)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PartDefinition) or&#xA; owningType.oclIsKindOf(PartUsage)) implies&#xA;    specializesFromLibrary('Parts::Part::performedActions')"/>
    <classes name="EventOccurrenceUsage" label="EventOccurrenceUsage" comment="&lt;p>An &lt;code>EventOccurrenceUsage&lt;/code> is an &lt;code>OccurrenceUsage&lt;/code> that represents another &lt;code>OccurrenceUsage&lt;code> occurring as a &lt;code>&lt;em>suboccurrence&lt;em>&lt;/code> of the containing occurrence of the &lt;code>EventOccurrenceUsage&lt;/code>. Unless it is the &lt;code>EventOccurrenceUsage&lt;/code> itself, the referenced &lt;code>OccurrenceUsage&lt;/code> is related to the &lt;code>EventOccurrenceUsage&lt;code> by a &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>EventOccurrenceUsage&lt;/code> is owned by an &lt;code>OccurrenceDefinition&lt;/code> or &lt;code>OccurrenceUsage&lt;/code>, then it also subsets the &lt;em>&lt;code>timeEnclosedOccurrences&lt;/code>&lt;/em> property of the &lt;code>Class&lt;/code> &lt;em>&lt;code>Occurrence&lt;/code>&lt;/em> from the Kernel Semantic Library model &lt;em>&lt;code>Occurrences&lt;/code>&lt;/em>.&lt;/p>&#xA;eventOccurrence =&#xA;    if ownedReferenceSubsetting = null then self&#xA;    else if ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage) then &#xA;        ownedReferenceSubsetting.referencedFeature.oclAsType(OccurrenceUsage)&#xA;    else null&#xA;    endif endif&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(OccurrenceDefinition) or&#xA; owningType.oclIsKindOf(OccurrenceUsage)) implies&#xA;    specializesFromLibrary(&quot;Occurrences::Occurrence::timeEnclosedOccurrences&quot;)&#xA;isReference"/>
    <classes name="StateDefinition" label="StateDefinition" comment="&lt;p>A &lt;code>StateDefinition&lt;/code> is the &lt;code>Definition&lt;/code> of the &lt;/code>Behavior&lt;/code> of a system or part of a system in a certain state condition.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>StateDefinition&lt;/code> may be related to up to three of its &lt;code>ownedFeatures&lt;/code> by &lt;code>StateBehaviorMembership&lt;/cod> &lt;code>Relationships&lt;/code>, all of different &lt;code>kinds&lt;/code>, corresponding to the entry, do and exit actions of the &lt;code>StateDefinition&lt;/code>.&lt;/p>&#xA;ownedGeneralization.general->selectByKind(StateDefinition)->&#xA;    forAll(g | g.isParallel = isParallel)&#xA;specializesFromLibrary('States::StateAction')&#xA;ownedMembership->&#xA;    selectByKind(StateSubactionMembership)->&#xA;    isUnique(kind)&#xA;state = action->selectByKind(StateUsage)&#xA;doAction =&#xA;    let doMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::do) in&#xA;    if doMemberships->isEmpty() then null&#xA;    else doMemberships->at(1)&#xA;    endif&#xA;entryAction =&#xA;    let entryMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::entry) in&#xA;    if entryMemberships->isEmpty() then null&#xA;    else entryMemberships->at(1)&#xA;    endif&#xA;isParallel implies&#xA;    ownedAction.incomingTransition->isEmpty() and&#xA;    ownedAction.outgoingTransition->isEmpty()&#xA;exitAction = &#xA;    let exitMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::exit) in&#xA;    if exitMemberships->isEmpty() then null&#xA;    else exitMemberships->at(1)&#xA;    endif"/>
    <classes name="TransitionFeatureMembership" label="TransitionFeatureMembership" comment="&lt;p>A &lt;code>TransitionFeatureMembership&lt;/code> is a &lt;code>FeatureMembership&lt;code> for a trigger, guard or effect of a &lt;code>TransitionUsage&lt;/code>, whose &lt;code>transitionFeature&lt;/code> is a &lt;code>AcceptActionUsage&lt;/code>, &lt;em>&lt;code>Boolean&lt;/code>&lt;/em>-valued &lt;code>Expression&lt;/code> or &lt;code>ActionUsage&lt;/code>, depending on its &lt;code>kind&lt;/code>. &lt;/p>&#xA;kind = TransitionFeatureKind::trigger implies&#xA;    transitionFeature.oclIsKindOf(AcceptActionUsage)&#xA;owningType.oclIsKindOf(TransitionUsage)&#xA;kind = TransitionFeatureKind::guard implies&#xA;    transitionFeature.oclIsKindOf(Expression) and&#xA;    let guard : Expression = transitionFeature.oclIsKindOf(Expression) in&#xA;    guard.result.specializesFromLibrary('ScalarValues::Boolean') and&#xA;    guard.result.multiplicity &lt;> null and&#xA;    guard.result.multiplicity.hasBounds(1,1)&#xA;kind = TransitionFeatureKind::effect implies&#xA;    transitionFeature.oclIsKindOf(ActionUsage)"/>
    <classes name="StateSubactionMembership" label="StateSubactionMembership" comment="&lt;p>A &lt;code>StateSubactionMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> for an entry, do or exit &lt;code>ActionUsage&lt;code> of a &lt;code>StateDefinition&lt;/code> or &lt;code>StateUsage&lt;/code>.&lt;/p>&#xA;owningType.oclIsKindOf(StateDefinition) or&#xA;owningType.oclIsKindOf(StateUsage)"/>
    <classes name="ConjugatedPortTyping" label="ConjugatedPortTyping" comment="&lt;p>A ConjugatedPortTyping is a FeatureTyping whose &lt;code>type&lt;/code> is a ConjugatedPortDefinition. (This relationship is intended to be an abstract syntax marker for a special surface notation for conjugated typing of ports.)&lt;/p>&#xA;conjugatedPortDefinition = portDefinition.conjugatedPortDefinition"/>
    <classes name="AssertConstraintUsage" label="AssertConstraintUsage" comment="&lt;p>An AssertConstraintUsage is a ConstraintUsage that is also an Invariant and, so, is asserted to be true (by default). Unless it is the AssertConstraintUsage itself, the asserted ConstraintUsage is related to the AssertConstraintUsage by a ReferenceSubsetting relationship.&lt;/p>&#xA;&#xA;&lt;p>If the AssertConstraintUsage is owned by a PartDefinition or PartUsage, then it also subsets the &lt;em>&lt;code>assertedConstraints&lt;/code>&lt;/em> feature of the PartDefinition &lt;em>&lt;code>Part&lt;/code>&lt;/em> from the System Library model &lt;em>&lt;code>Parts&lt;/code>&lt;/em>.&lt;/p>&#xA;assertedConstraint =&#xA;    if ownedReferenceSubsetting = null then self&#xA;    else ownedReferenceSubsetting.referencedFeature.oclAsType(ConstraintUsage)&#xA;    endif"/>
    <classes name="Invariant" label="Invariant" comment="&lt;p>An Invariant is a BooleanExpression that is asserted to have a specific Boolean result value. If &lt;code>isNegated = false&lt;/code>, then the Invariant must subset, directly or indirectly, the BooleanExpression &lt;em>trueEvaluations&lt;/em> from the Kernel library, meaning that the result is asserted to be true. If &lt;code>isNegated = true&lt;/code>, then the Invariant must subset, directly or indirectly, the BooleanExpression &lt;em>falseEvaluations&lt;/em> from the Kernel library, meaning that the result is asserted to be false.&lt;/p>&#xA;&#xA;if isNegated then&#xA;    specializesFromLibrary(&quot;Performances::falseEvaluations&quot;)&#xA;else&#xA;    specializesFromLibrary(&quot;Performances::trueEvaluations&quot;)&#xA;endif"/>
    <classes name="Expose" label="Expose" comment="&lt;p>An Expose is an Import of Memberships into a ViewUsage that provide the Elements to be included in a view. Visibility is always ignored for an Expose (i.e., &lt;code>isImportAll = true&lt;/code>).&lt;/p>&#xA;isImportAll"/>
    <classes name="NamespaceExpose" label="NamespaceExpose" comment="&lt;p>A NamespaceExpose is an Expose relationship that exposes a;; the Memberships of a specific &lt;code>importedNamespace&lt;/code> and, if &lt;code>isRecursive = true&lt;/code>, additional Memberships recursively.&lt;/p>"/>
    <classes name="NamespaceImport" label="NamespaceImport" comment="&lt;p>A NamespaceImport is an Import that imports Memberships from its &lt;code>importedNamespace&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code> isRecursive = false&lt;/code>, then only the visible Memberships of the &lt;code>importOwningNamespace&lt;/code> are imported. If &lt;code> isRecursive = true&lt;/code>, then, in addition, Memberships are recursively imported from any &lt;code>ownedMembers&lt;/code> of the &lt;code>importedNamespace&lt;/code> that are Namespaces.&lt;/p>&#xA;importedElement = importedNamespace"/>
    <classes name="MembershipExpose" label="MembershipExpose" comment="&lt;p>A MembershipExpose is an Expose relationship that exposes a specific &lt;code>importedMembership&lt;/code> and, if &lt;code>isRecursive = true&lt;/code>, additional Memberships recursively.&lt;/p>"/>
    <classes name="MembershipImport" label="MembershipImport" comment="&lt;p>A MembershipImport is an Import that imports its &lt;code>importedMembership&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isRecursive = true&lt;/code> and the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code> is a Namespace, then the equivalent of a recursive NamespaceImport is also performed on that Namespace.&lt;/p>&#xA;importedElement = importedMembership.memberElement"/>
    <classes name="ViewRenderingMembership" label="ViewRenderingMembership" comment="&lt;p>A ViewRenderingMembership is a FeatureMembership that identifies the &lt;code>viewRendering&lt;/code> of a View. The &lt;code>ownedMemberFeature&lt;/code> of a RequirementConstraintMembership must be a RenderingUsage.&lt;/p>"/>
    <classes name="ObjectiveMembership" label="ObjectiveMembership" comment="&lt;p>An ObjectiveMembership is a FeatureMembership that indicates that its &lt;code>ownedObjectiveRequirement&lt;/code> is the objective RequirementUsage for its &lt;code>owningType&lt;/code>. The &lt;code>owningType&lt;/code> of an ObjectiveMembership must be a CaseDefinition or CaseUsage.&lt;/p>"/>
    <classes name="RequirementVerificationMembership" label="RequirementVerificationMembership" comment="&lt;p>A RequirementVerificationMembership is a RequirementConstraintMembership used in the objective of a VerificationCase to identify a Requirement that is verified by the VerificationCase.&lt;/p>"/>
    <classes name="RequirementConstraintMembership" label="RequirementConstraintMembership" comment="&lt;p>A RequirementConstraintMembership is a FeatureMembership for an assumed or required ConstraintUsage of a RequirementDefinition or RequirementUsage. The &lt;code>ownedMemberFeature&lt;/code> of a RequirementConstraintMembership must be a ConstraintUsage.&lt;/p>"/>
    <classes name="SendActionUsage" label="SendActionUsage" comment="&lt;p>A &lt;code>SendActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies the sending of a payload given by the result of its &lt;code>payloadArgument&lt;/code> &lt;code>Expression&lt;/code> via a &lt;em>&lt;code>MessageTransfer&lt;/code>&lt;/em> whose &lt;em>&lt;code>source&lt;/code>&lt;/em> is given by the result of the &lt;code>senderArgument&lt;/code> &lt;code>Expression&lt;/code> and whose &lt;code>target&lt;/code> is given by the result of the &lt;code>receiverArgument&lt;/code> &lt;code>Expression&lt;/code>. If no &lt;code>senderArgument&lt;/code> is provided, the default is the &lt;em>&lt;code>this&lt;/code>&lt;/em> context for the action. If no &lt;code>receiverArgument&lt;/code> is given, then the receiver is to be determined by, e.g., outgoing &lt;em>&lt;code>Connections&lt;/code>&lt;/em> from the sender.&lt;/p> &#xA;&#xA;senderArgument = argument(2)&#xA;payloadArgument = argument(1)&#xA;inputParameters()->size() >= 3&#xA;receiverArgument = argument(3)&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::acceptSubactions')&#xA;specializesFromLibrary(&quot;Actions::sendActions&quot;)"/>
    <classes name="ControlNode" label="ControlNode" comment="&lt;p>A &lt;code>ControlNode&lt;/code> is an &lt;code>ActionUsage&lt;/code> that does not have any inherent behavior but provides constraints on incoming and outgoing &lt;code>Successions&lt;/code> that are used to control other &lt;code>Actions&lt;/code>. A &lt;code>ControlNode&lt;/code> must be a composite owned &lt;code>usage&lt;/code> of an &lt;code>ActionDefinition&lt;/code> or &lt;code>ActionUsage&lt;/code>.&lt;/p>&#xA;&#xA;sourceConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(1).multiplicity)->&#xA;    forAll(sourceMult | &#xA;        multiplicityHasBounds(sourceMult, 1, 1))&#xA;owningType &lt;> null and &#xA;(owningType.oclIsKindOf(ActionDefinition) or&#xA; owningType.oclIsKindOf(ActionUsage))&#xA;targetConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(2).multiplicity)->&#xA;    forAll(targetMult | &#xA;        multiplicityHasBounds(targetMult, 1, 1))&#xA;specializesFromLibrary('Action::Action::controls')"/>
    <classes name="TriggerInvocationExpression" label="TriggerInvocationExpression" comment="&lt;p>A &lt;code>TriggerInvocationExpression&lt;code> is an &lt;code>InvocationExpression&lt;/code> that invokes one of the trigger &lt;code>Functions&lt;/code> from the Kernel Semantic Library &lt;code>&lt;em>Triggers&lt;em>&lt;/code> package, as indicated by its &lt;code>kind&lt;/code>.&lt;/p>&#xA;specializesFromLibrary(&#xA;    if kind = TriggerKind::when then&#xA;        'Triggers::TriggerWhen'&#xA;    else if kind = TriggerKind::at then&#xA;        'Triggers::TriggerAt'&#xA;    else &#xA;        'Triggers::TriggerAfter'&#xA;    endif endif&#xA;)"/>
    <classes name="InvocationExpression" label="InvocationExpression" comment="&lt;p>An InvocationExpression is an Expression each of whose input &lt;code>parameters&lt;/code> are bound to the &lt;code>result&lt;/code> of an owned &lt;code>argument&lt;/code> Expression. Each input &lt;code>parameter&lt;/code> may be bound to the &lt;code>result&lt;/code> of at most one &lt;code>argument&lt;/code>.&lt;/p>&#xA;&#xA;not ownedTyping->exists(oclIsKindOf(Behavior)) and&#xA;not ownedSubsetting.subsettedFeature.type->exists(oclIsKindOf(Behavior)) implies&#xA;    ownedFeature.selectByKind(BindingConnector)->exists(&#xA;        relatedFeature->includes(self) and&#xA;        relatedFeature->includes(result))&#xA;            &#xA;TBD"/>
    <classes name="ForLoopActionUsage" label="ForLoopActionUsage" comment="&lt;p>A &lt;code>ForLoopActionUsage&lt;/code> is a &lt;code>LoopActionUsage&lt;/code> that specifies that its &lt;code>bodyClause&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed once for each value, in order, from the sequence of values obtained as the result of the &lt;code>seqArgument&lt;/code> &lt;code>Expression&lt;/code>, with the &lt;code>loopVariable&lt;/code> set to the value for each iteration.&lt;/p>&#xA;seqArgument =&#xA;    let parameter : Feature = inputParameter(1) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::forLoops')&#xA;loopVariable &lt;> null and&#xA;loopVariable.redefinesFromLibrary('Actions::ForLoopAction::var')&#xA;specializesFromLibrary('Actions::forLoopActions')&#xA;loopVariable =&#xA;    if ownedFeature->isEmpty() or &#xA;        not ownedFeature->first().oclIsKindOf(ReferenceUsage) then &#xA;        null&#xA;    else &#xA;        ownedFeature->first().oclAsType(ReferenceUsage)&#xA;    endif"/>
    <classes name="LoopActionUsage" label="LoopActionUsage" comment="&lt;p>A &lt;code>LoopActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies that its &lt;code>bodyAction&lt;/code> should be performed repeatedly. Its subclasses &lt;code>WhileLoopActionUsage&lt;/code> and &lt;code>ForLoopActionUsage&lt;/code> provide different ways to determine how many times the &lt;code>bodyAction&lt;/code> should be performed.&lt;/p>&#xA;bodyAction =&#xA;    let parameter : Feature = inputParameter(2) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Action) then&#xA;        parameter.oclAsType(Action)&#xA;    else&#xA;        null&#xA;    endif&#xA;"/>
    <classes name="AssignmentActionUsage" label="AssignmentActionUsage" comment="&lt;p>An &lt;code>AssignmentActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that is defined, directly or indirectly, by the &lt;code>ActionDefinition&lt;/code> &lt;em>&lt;code>AssignmentAction&lt;/code>&lt;/em> from the Systems Model Library. It specifies that the value of the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>, relative to the target given by the result of the &lt;code>targetArgument&lt;/code> &lt;code>Expression&lt;/code>, should be set to the result of the &lt;code>valueExpression&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Actions::assignmentActions')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter.ownedFeature->first().&#xA;    redefines('AssignmentAction::target::startingAt')&#xA;valueExpression = argument(2)&#xA;targetArgument = argument(1)&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::assignments')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->first().&#xA;    redefines('AssigmentAction::target::startingAt::accessedFeature')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->first().redefines(referent)&#xA;referent =&#xA;    let unownedFeatures : Sequence(Feature) = ownedMembership->&#xA;        reject(oclIsKindOf(OwningMembership)).memberElement->&#xA;        selectByKind(Feature) in&#xA;    if unownedFeatures->isEmpty() then null&#xA;    else unownedFeatures->first().oclAsType(Feature)&#xA;    endif"/>
    <classes name="MergeNode" label="MergeNode" comment="&lt;p>A &lt;code>MergeNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that asserts the merging of its incoming &lt;code>Successions&lt;/code>. A &lt;code>MergeNode&lt;/code> may have at most one outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;sourceConnector->selectAsKind(Succession)->size() &lt;= 1&#xA;targetConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(1))->&#xA;    forAll(sourceMult |&#xA;        multiplicityHasBounds(sourceMult, 0, 1))&#xA;targetConnector->selectByKind(Succession)->&#xA;    forAll(subsetsChain(this, &#xA;        resolveGlobal(&quot;ControlPerformances::MergePerformance::incomingHBLink&quot;)))&#xA;specializesFromLibrary(&quot;Actions::Action::merges&quot;)"/>
    <classes name="JoinNode" label="JoinNode" comment="&lt;p>A &lt;code>JoinNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that waits for the completion of all the predecessor &lt;code>Actions&lt;/code> given by incoming &lt;code>Successions&lt;/code>.&lt;/p>&#xA;sourceConnector->selectByKind(Succession)->size() &lt;= 1&#xA;specializesFromLibrary(&quot;Actions::Action::join&quot;)"/>
    <classes name="ForkNode" label="ForkNode" comment="&lt;p>A &lt;code>ForkNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that must be followed by successor &lt;code>Actions&lt;/code> as given by all its outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;targetConnector->selectByKind(Succession)->size() &lt;= 1&#xA;specializesFromLibrary(&quot;Actions::Action::forks&quot;)"/>
    <classes name="WhileLoopActionUsage" label="WhileLoopActionUsage" comment="&lt;p>A &lt;code>WhileLoopActionUsage&lt;/code> is a &lt;code>LoopActionUsage&lt;/code> that specifies that the &lt;code>bodyClause&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed repeatedly while the result of the &lt;code>whileArgument&lt;/code> &lt;code>Expression&lt;/code> is true or until the result of the &lt;code>untilArgument&lt;/code> &lt;code>Expression&lt;/code> (if provided) is true. The &lt;code>whileArgument&lt;/code> &lt;code>Expression&lt;/code> is evaluated before each (possible) performance of the &lt;code>bodyClause&lt;/code>, and the &lt;code>untilArgument&lt;/code> &lt;code>Expression&lt;/code> is evaluated after each performance of the &lt;code>bodyClause&lt;/code>.&lt;/p>&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::whileLoops')&#xA;untilArgument =&#xA;    let parameter : Feature = inputParameter(3) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;&#xA;specializesFromLibrary('Actions::whileLoopActions')&#xA;whileArgument =&#xA;    let parameter : Feature = inputParameter(1) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;"/>
    <classes name="DecisionNode" label="DecisionNode" comment="&lt;p>A &lt;code>DecisionNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that makes a selection from its outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;targetConnector->selectByKind(Succession)->size() &lt;= 1&#xA;sourceConnector->selectAsKind(Succession)->&#xA;    collect(connectorEnd->at(2))->&#xA;    forAll(targetMult |&#xA;        multiplicityHasBounds(targetMult, 0, 1))&#xA;specializesFromLibrary(&quot;Actions::Action::decisions&quot;)&#xA;sourceConnector->selectByKind(Succession)->&#xA;    forAll(subsetsChain(this, &#xA;        resolveGlobal(&quot;ControlPerformances::MergePerformance::outgoingHBLink&quot;)))"/>
    <classes name="IfActionUsage" label="IfActionUsage" comment="&lt;p>An &lt;code>IfActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies that the &lt;code>thenAction&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed if the result of the &lt;code>ifArgument&lt;/code> &lt;code>Expression&lt;/code> is true. It may also optionally specify an &lt;code>elseAction&lt;/code> &lt;code>ActionUsage&lt;/code> that is performed if the result of the &lt;code>ifArgument&lt;/code> is false.&lt;/p>&#xA;thenAction = &#xA;    let parameter : Feature = inputParameter(2) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(ActionUsage) then&#xA;        parameter.oclAsType(ActionUsage)&#xA;    else&#xA;        null&#xA;    endif&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::ifSubactions')&#xA;if elseAction = null then&#xA;    specifiesFromLibrary('Actions::ifThenActions')&#xA;else&#xA;    specifiesFromLibrary('Actions::ifThenElseActions')&#xA;endif&#xA;ifArgument = &#xA;    let parameter : Feature = inputParameter(1) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;elseAction = &#xA;    let parameter : Feature = inputParameter(3) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(ActionUsage) then&#xA;        parameter.oclAsType(ActionUsage)&#xA;    else&#xA;        null&#xA;    endif"/>
    <classes name="SubjectMembership" label="SubjectMembership" comment="&lt;p>A SubjectMembership is a ParameterMembership that indicates that its &lt;code>ownedSubjectParameter&lt;/code> is the subject Parameter for its &lt;code>owningType&lt;/code>. The &lt;code>owningType&lt;/code> of a SubjectMembership must be a CaseDefinition, CaseUsage, RequirementDefinition or RequirementUsage.&lt;/p>"/>
    <classes name="ParameterMembership" label="ParameterMembership" comment="&lt;p>A ParameterMembership is a FeatureMembership that identifies its &lt;code>memberFeature&lt;/code> as a parameter, which is always owned, and must have a &lt;code>direction&lt;/code>. A ParameterMembership must be owned by a Behavior or a Step.&lt;/p>"/>
    <classes name="StakeholderMembership" label="StakeholderMembership" comment="&lt;p>A StakeholderMembership is a ParameterMembership that identifies a PartUsage as a stakeholder parameter, which specifies a role played by an entity with Concerns framed by the parametered requirement.&lt;/p>"/>
    <classes name="SatisfyRequirementUsage" label="SatisfyRequirementUsage" comment="&lt;p>A SatisfyRequirementUsage is an AssertConstraintUsage that asserts, by default, that a satisfied RequirementUsage is true for a specific &lt;code>satisfyingSubject&lt;/code>, or, if &lt;code>isNegated = true&lt;/code>, that the RequirementUsage is false. The satisfied RequirementUsage is related to the SatisfyRequirementUsage by a Subsetting relationship.&lt;/p>"/>
    <classes name="FramedConcernMembership" label="FramedConcernMembership" comment="&lt;p>A FramedConcernMembership is a RequirementConstraintMembership for a framed ConcernUsage of a RequirementDefinition or RequirementUsage. The &lt;code>ownedConstraint&lt;/code> of a FramedConcernMembership must be a ConcernUsage.&lt;/p>"/>
    <classes name="ActorMembership" label="ActorMembership" comment="&lt;p>An ActorMembership is a ParameterMembership that identifies a PartUsage as an actor parameter, which specifies a role played by an entity external in interaction with the parametered element.&lt;/p>"/>
    <classes name="MetadataDefinition" label="MetadataDefinition" comment="&lt;p>A MetadataDefinition is an ItemDefinition that is also a Metaclass.&lt;/p>&#xA;&#xA;&lt;p>A MetadataDefinition must subclassofy, directly or indirectly, the base MetadataDefinition MetadataItem from the Systems model library.&lt;/p>"/>
    <classes name="FlowConnectionDefinition" label="FlowConnectionDefinition" comment="&lt;p>A FlowConnectionDefinition is a ConnectionDefinition and ActionDefinition that is also an Interaction representing flows between Usages.&lt;/p>&#xA;specializesFromLibrary(&quot;Connections::MessageConnection&quot;)"/>
    <classes name="BindingConnectorAsUsage" label="BindingConnectorAsUsage" comment="&lt;p>A BindingConnectorAsUsage is both a BindingConnector and a ConnectorAsUsage.&lt;/p>"/>
    <classes name="BindingConnector" label="BindingConnector" comment="&lt;p>A Binding Connector is a binary Connector that requires its &lt;code>relatedFeatures&lt;/code> to identify the same things (have the same values). &#xA;&#xA;&lt;p> A BindingConnector must be directly or indirectly typed by the &lt;em>&lt;code>SelfLink&lt;/code>&lt;/em> Association from the &lt;em>&lt;code>Links&lt;/code&lt;/em> library model. Both end multiplicities must be 1..1 when the &lt;code>relatedFeatures&lt;/code> have unique values.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Links::selfLinks&quot;)"/>
    <classes name="SuccessionFlowConnectionUsage" label="SuccessionFlowConnectionUsage" comment="&lt;p>A SuccessionFlowConnectionUsage is a FlowConnectionUsage that is also a SuccessionItemFlow.&lt;/p>&#xA;specializesFromLibrary(&quot;Connections::successionFlowConnections&quot;)"/>
    <classes name="SuccessionItemFlow" label="SuccessionItemFlow" comment="&lt;p>A SuccessionItemFlow is an ItemFlow that also provides temporal ordering. It classifies &lt;em>Transfers&lt;/em> that cannot start until the source &lt;em>Occurrence&lt;/em> has completed and that must complete before the target &lt;em>Occurrence&lt;/em> can start.&lt;/p>&#xA;&#xA;&lt;p>A SuccessionItemFlow must be typed by the Interaction &lt;em>TransferBefore&lt;/em> from the Kernel Library, or a specialization of it.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Transfers::flowTransfersBefore&quot;)"/>
    <classes name="SuccessionAsUsage" label="SuccessionAsUsage" comment="&lt;p>A SuccessionAsUsage is both a ConnectorAsUsage and a Succession.&lt;p>"/>
    <classes name="IncludeUseCaseUsage" label="IncludeUseCaseUsage" comment="&lt;p>An IncludeUseCaseUsage is a UseCaseUsage that represents the inclusion of a UseCaseUsage by a UseCaseDefinition or UseCaseUsage. Unless it is the IncludeUseCaseUsage itself, the UseCaseUsage to be included is related to the &lt;code>includedUseCase&lt;/code> by a ReferenceSubsetting Relationship. An IncludeUseCaseUsage is also a PerformActionUsage, with its &lt;code>includedUseCase&lt;/code> as the &lt;code>performedAction&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the IncludeUseCaseUsage is owned by a UseCaseDefinition or UseCaseUsage, then it also subsets the UseCaseUsage &lt;em>&lt;code>UseCase::includedUseCases&lt;/code>&lt;/em> from the Systems model library.&lt;/p>&#xA;"/>
    <classes name="FeatureValue" label="FeatureValue" comment="&lt;p>A FeatureValue is a Membership that identifies a particular member Expression that provides the value of the Feature that owns the FeatureValue. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A Feature can have at most one FeatureValue.&lt;/p>&#xA;&#xA;&lt;p>The result of the &lt;code>value&lt;/code> expression is bound to the &lt;code>featureWithValue&lt;/code> using a BindingConnector. If &lt;code>isInitial = false&lt;/code>, then the &lt;code>featuringType&lt;/code> of the BindingConnector is the same as the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>. If &lt;code>isInitial = true&lt;/code>, then the &lt;code>featuringType&lt;/code> of the BindingConnector is restricted to its &lt;code>startShot&lt;/code>.&#xA;&#xA;&lt;p>If &lt;code>isDefault = false&lt;/code>, then the above semantics of the FeatureValue are realized for the given &lt;code>featureWithValue&lt;/code>. Otherwise, the semantics are realized for any individual of the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>, unless another value is explicitly given for the &lt;code>featureWithValue&lt;/code> for that individual.&lt;/p>&#xA;&#xA;not isDefault implies&#xA;    featureWithValue.ownedMember->&#xA;        selectByKind(BindingConnector)->exists(b |&#xA;            b.relatedFeature->includes(featureWithValue) and&#xA;            b.relatedFeature->includes(value.result) and&#xA;            if not isInitial then &#xA;                b.featuringType = featureWithValue.featuringType&#xA;            else &#xA;                b.featuringType->exists(t |&#xA;                    t.oclIsKindOf(Feature) and&#xA;                    t.oclAsType(Feature).chainingFeature =&#xA;                        Sequence{&#xA;                            resolveGlobal(&quot;Base::things::that&quot;),&#xA;                            resolveGlobal(&quot;Occurrences::Occurrence::startShot&quot;)&#xA;                        }&#xA;                )&#xA;            endif)"/>
    <classes name="MultiplicityRange" label="MultiplicityRange" comment="&lt;p>A MultiplicityRange is a Multiplicity whose value is defined to be the (inclusive) range of natural numbers given by the result of a &lt;code>lowerBound&lt;/code> Expression and the result of an &lt;code>upperBound&lt;/code> Expression. The result of the &lt;code>lowerBound&lt;/code> Expression shall be of type &lt;em>Natural&lt;/em>, while the result of the &lt;code>upperBound&lt;/code> Expression shall be of type &lt;em>UnlimitedNatural&lt;/em>. If the result of the &lt;code>upperBound&lt;/code> Expression is the unbounded value &lt;code>*&lt;/code>, then the specified range includes all natural numbers greater than or equal to the &lt;code>lowerBound&lt;/code> value.&lt;/p>&#xA;&#xA;bound->forAll(b | b.featuringType = self.featuringType)"/>
    <classes name="ReturnParameterMembership" label="ReturnParameterMembership" comment="&lt;p>A ReturnParameterMembership is a ParameterMembership that indicates that the &lt;code>memberParameter&lt;/code> is the &lt;code>result&lt;/code> parameter of a Function or Expression. The &lt;code>direction&lt;/code> of the &lt;code>memberParameter&lt;/code> must be &lt;code>out&lt;/code>.&lt;/p>"/>
    <classes name="ResultExpressionMembership" label="ResultExpressionMembership" comment="&lt;p>A ResultExpressionMembership is a FeatureMembership that indicates that the &lt;code>ownedResultExpression&lt;/code> provides the result values for the Function or Expression that owns it. The owning Function or Expression must contain a BindingConnector between the &lt;code>result&lt;/code> parameter of the &lt;code>ownedResultExpression&lt;/code> and the &lt;code>result&lt;/code> parameter of the Function or Expression.&lt;/p>&#xA;"/>
    <classes name="LiteralRational" label="LiteralRational" comment="&lt;p>A LiteralRational is a LiteralExpression that provides a &lt;code>&lt;em>Rational&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>Rational&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralExpression" label="LiteralExpression" comment="&lt;p>A LiteralExpression is an Expression that provides a basic value as a result. It must directly or indirectly specialize the Function &lt;code>&lt;em>LiteralEvaluation&lt;/em>&lt;/code> from the &lt;code>&lt;em>Base&lt;/em>&lt;/code> model library, which has no parameters other than its result, which is a single &lt;code>&lt;em>DataValue&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = true&#xA;specializesFromLibrary(&quot;Performances::literalEvaluations&quot;)"/>
    <classes name="FeatureReferenceExpression" label="FeatureReferenceExpression" comment="&lt;p>A FeatureReferenceExpression is an Expression whose &lt;code>result&lt;/code> is bound a &lt;code>referent&lt;/code> Feature. The only &lt;code>members&lt;/code> allowed for a FeatureReferenceExpression are the &lt;code>referent&lt;/code>, the &lt;code>result&lt;/code> and the BindingConnector between them.&lt;/p>"/>
    <classes name="OperatorExpression" label="OperatorExpression" comment="&lt;p>An OperatorExpression is an InvocationExpression whose &lt;code>function&lt;/code> is determined by resolving its &lt;code>operator&lt;/code> in the context of one of the standard Function packages from the Kernel Model Library.&lt;/p>&#xA;let libFunctions : Sequence(Element) = &#xA;    Sequence{&quot;BaseFunctions&quot;, &quot;DataFunctions&quot;, &quot;ControlFunctions&quot;}->&#xA;    collect(ns | resolveGlobal(ns + &quot;::'&quot; + operator + &quot;'&quot;)) in&#xA;libFunctions->includes(function)&#xA;    &#xA;"/>
    <classes name="NullExpression" label="NullExpression" comment="&lt;p>A NullExpression is an Expression that results in a null value. It must be typed by a &lt;code>&lt;em>NullEvaluation&lt;/em>&lt;/code> that results in an empty value.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::nullEvaluations&quot;)"/>
    <classes name="MetadataAccessExpression" label="MetadataAccessExpression" comment="&lt;p>A MetadataAccessExpression is an Expression whose &lt;code>result&lt;/code> is a sequence of instances of Metaclasses representing all the MetadataFeature annotations of the &lt;code>referencedElement&lt;/code>. In addition, the sequence includes an instance of the reflective Metaclass corresponding to the MOF class of the &lt;code>referencedElement&lt;/code>, with values for all the abstract syntax properties of the Element.&lt;/p>&#xA;specializesFromLibrary(&quot;Performances::metadataAccessEvaluations&quot;)"/>
    <classes name="LiteralBoolean" label="LiteralBoolean" comment="&lt;p>LiteralBoolean is a LiteralExpression that provides a &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralInfinity" label="LiteralInfinity" comment="&lt;p>A LiteralInfinity is a LiteralExpression that provides the positive infinity value (&lt;code>*&lt;/code>). It's &lt;code>result&lt;/code> must have the type &lt;code>&lt;em>Positive&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="FeatureChainExpression" label="FeatureChainExpression" comment="&lt;p>A FeatureChainExpression is an OperatorExpression whose operator is &lt;code>&quot;.&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em>. It evaluates to the result of chaining the &lt;code>result&lt;/code> Feature of its single &lt;code>argument&lt;/code> Expression with its &lt;code>targetFeature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The first two &lt;code>members&lt;/code> of a FeatureChainExpression must be its single &lt;code>argument&lt;/code> Expression and its &lt;code>targetFeature&lt;/code>. Its only other &lt;code>members&lt;/code> shall be those necessary to complete it as an InvocationExpression.&lt;/p>"/>
    <classes name="LiteralInteger" label="LiteralInteger" comment="&lt;p>A LiteralInteger is a LiteralExpression that provides an &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>Integer&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralString" label="LiteralString" comment="&lt;p>A LiteralString is a LiteralExpression that provides a &lt;code>&lt;em>String&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>String&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="SelectExpression" label="SelectExpression" comment="&lt;p>A SelectExpression is an OperatorExpression whose operator is &lt;code>&quot;select&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::select&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="CollectExpression" label="CollectExpression" comment="&lt;p>A CollectExpression is an OperatorExpression whose operator is &lt;code>&quot;collect&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::collect&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="LibraryPackage" label="LibraryPackage" comment="&lt;p>A LibraryPackage is a Package that is the container for a model library. A LibraryPackage is itself a library Element as are all Elements that are directly or indirectly contained in it.&lt;/p>"/>
    <classes name="Package" label="Package" comment="&lt;p>A Package is a Namespace used to group Elements, without any instance-level semantics. It may have one or more model-level evaluable &lt;code>filterCondition&lt;/code> Expressions used to filter its &lt;code>importedMemberships&lt;/code>. Any imported &lt;code>member&lt;/code> must meet all of the &lt;code>filterConditions&lt;/code>.&lt;/p>"/>
    <classes name="ElementFilterMembership" label="ElementFilterMembership" comment="&lt;p>ElementFilterMembership is a Mambership between a Namespace and a model-level evaluable Boolean Expression, asserting that imported &lt;code>members&lt;/code> of the Namespace should be filtered using the &lt;code>condition&lt;/code> Expression. A general Namespace does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of Namespaces.&lt;/p>&#xA;condition.isModelLevelEvaluable&#xA;condition.result.specializesFromLibrary('ScalarValues::Boolean')"/>
    <classes name="EndFeatureMembership" label="EndFeatureMembership" comment="&lt;p>EndFeatureMembership is a FeatureMembership that requires its &lt;code>memberFeature&lt;/code> be owned and have &lt;code>isEnd = true&lt;/code>.&lt;/p>&#xA;ownedMemberFeature.isEnd"/>
    <classes name="Dependency" label="Dependency" comment="&lt;p>A &lt;code>Dependency&lt;/code> is a &lt;code>Relationship&lt;/code> that indicates that one or more &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> require one more &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> for their complete specification. In general, this means that a change to one of the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> may necessitate a change to, or re-specification of, the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Note that a &lt;code>Dependency&lt;/code> is entirely a model-level &lt;code>Relationship&lt;/code>, without instance-level semantics.&lt;/p>"/>
    <properties name="classifierOwnedSubclassification" label="classifierOwnedSubclassification" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this Classifier that are Subclassifications, for which this Classifier is the &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageIsVariation" label="usageIsVariation" comment="&lt;p>Whether this Usage is for a variation point or not. If true, then all the &lt;code>memberships&lt;/code> of the Usage must be VariantMemberships.&lt;/p>"/>
    <properties name="usageIsReference" label="usageIsReference" comment="&lt;p>Whether this Usage is a reference Usage, derived as the negation of &lt;code>isComposite&lt;/code>.&lt;p>"/>
    <properties name="usageNestedUsage" label="usageNestedUsage" comment="&lt;p>The Usages that are &lt;code>ownedFeatures&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageOwningUsage" label="usageOwningUsage" comment="&lt;p>The Usage in which this Usage is nested (if any).&lt;/p>"/>
    <properties name="usageOwningDefinition" label="usageOwningDefinition" comment="&lt;p>The Definition that owns this Usage (if any).&lt;/p>"/>
    <properties name="usageNestedPort" label="usageNestedPort" comment="&lt;p>The PortUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedAction" label="usageNestedAction" comment="&lt;p>The ActionUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedState" label="usageNestedState" comment="&lt;p>The StateUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedConstraint" label="usageNestedConstraint" comment="&lt;p>The ConstraintUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedTransition" label="usageNestedTransition" comment="&lt;p>The TransitionUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedRequirement" label="usageNestedRequirement" comment="&lt;p>The RequirementUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedCalculation" label="usageNestedCalculation" comment="&lt;p>The CalculationUsage that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageDirectedUsage" label="usageDirectedUsage" comment="&lt;p>The &lt;code>usages&lt;/code> of this Usage that are &lt;code>directedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedCase" label="usageNestedCase" comment="&lt;p>The CaseUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedAnalysisCase" label="usageNestedAnalysisCase" comment="&lt;p>The AnalysisCaseUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageVariantMembership" label="usageVariantMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this Usage that are VariantMemberships. If &lt;code>isVariation&lt;/code> = true, then this must be all &lt;code>memberships&lt;/code> of the Usages. If &lt;code>isVariation&lt;/code> = false, then &lt;code>variantMembership&lt;/code>must be empty.&lt;/p>"/>
    <properties name="usageUsage" label="usageUsage" comment="&lt;p>The Usages that are &lt;code>features&lt;/code> of this Usage (not necessarily owned).&lt;/p>"/>
    <properties name="usageVariant" label="usageVariant" comment="&lt;p>The Usages which represent the variants of this Usage as a variation point Usage, if &lt;code>isVariation&lt;/code> = true. If &lt;code>isVariation&lt;/code> = false, the there must be no &lt;code>variants&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedReference" label="usageNestedReference" comment="&lt;p>The ReferenceUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p> &#xA;"/>
    <properties name="usageNestedConnection" label="usageNestedConnection" comment="&lt;p>The ConnectorAsUsages that are &lt;code>nestedUsages&lt;/code> of this Usage. Note that this list includes BindingConnectorAsUsages and SuccessionAsUsages, even though these are ConnectorAsUsages but not ConnectionUsages.&lt;/p>"/>
    <properties name="usageNestedItem" label="usageNestedItem" comment="&lt;p>The ItemUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedPart" label="usageNestedPart" comment="&lt;p>The PartUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedInterface" label="usageNestedInterface" comment="&lt;p>The InterfaceUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedAttribute" label="usageNestedAttribute" comment="&lt;p>The AttributeUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedView" label="usageNestedView" comment="&lt;p>The ViewUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p> &#xA;"/>
    <properties name="usageNestedViewpoint" label="usageNestedViewpoint" comment="&lt;p>The ViewpointUsages of this Usage that are &lt;code>nestedUsages&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedRendering" label="usageNestedRendering" comment="&lt;p>The RenderingUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p> &#xA;"/>
    <properties name="usageNestedVerificationCase" label="usageNestedVerificationCase" comment="&lt;p>The VerificationCaseUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p> &#xA;"/>
    <properties name="usageNestedEnumeration" label="usageNestedEnumeration" comment="&lt;p>The EnumerationUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;p>"/>
    <properties name="usageNestedAllocation" label="usageNestedAllocation" comment="&lt;p>The AllocationUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedConcern" label="usageNestedConcern" comment="&lt;p>The ConcernUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedOccurrence" label="usageNestedOccurrence" comment="&lt;p>The OccurrenceUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageDefinition" label="usageDefinition" comment="&lt;p>The Classifiers that are the types of this Usage. Nominally, these are Definitions, but other kinds of Kernel Classifiers are also allowed, to permit use of Classifiers from the Kernel Library.&lt;/p>"/>
    <properties name="usageNestedUseCase" label="usageNestedUseCase" comment="&lt;p>The UseCaseUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>&#xA;"/>
    <properties name="usageNestedFlow" label="usageNestedFlow" comment="&lt;p>The FlowConnectionUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="usageNestedMetadata" label="usageNestedMetadata" comment="&lt;p>The MetadataUsages that are &lt;code>nestedUsages&lt;/code> of this Usage.&lt;/p>"/>
    <properties name="stateSubactionMembershipKind" label="stateSubactionMembershipKind" comment="&lt;p>Whether this &lt;code>StateSubactionMembership&lt;/code> is for an &lt;code>entry&lt;code>, &lt;code>do&lt;/code> or &lt;code>exit&lt;/code> &lt;code>ActionUsage&lt;/code>.&lt;/p>"/>
    <properties name="stateSubactionMembershipAction" label="stateSubactionMembershipAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is the &lt;code>ownedMemberFeature&lt;/code> of this &lt;code>StateSubactionMembership&lt;/code>.&lt;/p>"/>
    <properties name="analysisCaseDefinitionAnalysisAction" label="analysisCaseDefinitionAnalysisAction" comment="&lt;p>The &lt;code>actions&lt;/code> of the AnalysisCaseDefinitions that are typed as AnalysisActions. Each &lt;code>analysisAction&lt;/code> ActionUsage must subset the &lt;code&lt;>analysisSteps&lt;/code> ActionUsage of the base AnalysisCaseDefinition AnalysisCase from the Systems model library.&lt;/p>"/>
    <properties name="analysisCaseDefinitionResultExpression" label="analysisCaseDefinitionResultExpression" comment="&lt;p>The Expression used to compute the &lt;code>result&lt;/code> of the AnalysisCaseDefinition, derived as the Expression own via a ResultExpressionMembership. The &lt;code>resultExpression&lt;/code> must redefine directly or indirectly, the &lt;code>resultEvaluation&lt;/code> Expression of the base AnalysisCaseDefinition AnalysisCase from the Systems model library.&lt;/p>&#xA;"/>
    <properties name="occurrenceUsageIsIndividual" label="occurrenceUsageIsIndividual" comment="&lt;p>Whether this &lt;code>OccurrenceUsage&lt;/code> represents the usage of the specific individual (or portion of it) represented by its &lt;code>individualDefinition&lt;/code>.&lt;/p>"/>
    <properties name="occurrenceUsagePortionKind" label="occurrenceUsagePortionKind" comment="&lt;p>The kind of (temporal) portion of the life of the &lt;code>occurrenceDefinition&lt;/code> represented by this &lt;code>OccurrenceUsage&lt;/code>, if it is so restricted.&lt;/p>"/>
    <properties name="occurrenceUsageOccurrenceDefinition" label="occurrenceUsageOccurrenceDefinition" comment="&lt;p>The &lt;code>Classes&lt;/code> that are the types of this &lt;code>OccurrenceUsage&lt;/code>. Nominally, these are &lt;code>OccurrenceDefinitions&lt;/code>, but other kinds of kernel &lt;code>Classes&lt;/code> are also allowed, to permit use of &lt;code>Classes&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="occurrenceUsageIndividualDefinition" label="occurrenceUsageIndividualDefinition" comment="&lt;p>The at most one &lt;code>occurrenceDefinition&lt;/code> that has &lt;code>isIndividual = true&lt;/code>.&lt;/p>"/>
    <properties name="enumerationUsageEnumerationDefinition" label="enumerationUsageEnumerationDefinition" comment="&lt;p>The single EnumerationDefinition that is the type of this EnumerationUsage.&lt;/p>"/>
    <properties name="subsettingSubsettedFeature" label="subsettingSubsettedFeature" comment="&lt;p>The Feature that is subsetted by the &lt;code>subsettingFeature&lt;/code> of this Subsetting.&lt;/p>&#xA;"/>
    <properties name="subsettingSubsettingFeature" label="subsettingSubsettingFeature" comment="&lt;p>The Feature that is a subset of the &lt;code>subsettedFeature&lt;/code> of this Subsetting.&lt;/p>&#xA;"/>
    <properties name="subsettingOwningFeature" label="subsettingOwningFeature" comment="&lt;p>The Feature that owns this Subsetting relationship, which must also be its &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="viewpointUsageViewpointDefinition" label="viewpointUsageViewpointDefinition" comment="&lt;p>The ViewpointDefinition that defines this ViewUsage.&lt;/p>"/>
    <properties name="viewpointUsageViewpointStakeholder" label="viewpointUsageViewpointStakeholder" comment="&lt;p>The features that identify the stakeholders with concerns addressed by this ViewpointUsage, derived as the owned and inherited &lt;code>stakeholderParameters&lt;/code> of the &lt;code>framedConcerns&lt;/code> of this ViewpointUsage.&lt;/p>"/>
    <properties name="stepBehavior" label="stepBehavior" comment="&lt;p>The Behaviors that type this Step.&lt;/p>&#xA;"/>
    <properties name="stepParameter" label="stepParameter" comment="&lt;p>The parameters of this Expression, which are all its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the Behavior.&lt;/p>&#xA;"/>
    <properties name="useCaseUsageUseCaseDefinition" label="useCaseUsageUseCaseDefinition" comment="&lt;p>The UseCaseDefinition that is the type of this UseCaseUsage.&lt;/p>"/>
    <properties name="useCaseUsageIncludedUseCase" label="useCaseUsageIncludedUseCase" comment="&lt;p>The UseCaseUsages that are included by this UseCaseUsage. Derived as the &lt;code>includedUseCase&lt;/code> of the IncludeUseCaseUsages owned by this UseCaseUsage.&lt;/p>"/>
    <properties name="stateUsageIsParallel" label="stateUsageIsParallel" comment="&lt;p>Whether the &lt;code>nestedStates&lt;/code> of this &lt;code>StateUsage&lt;/code> are to all be performed in parallel. If true, none of the &lt;code>nestedActions&lt;/code> (which include &lt;code>nestedStates&lt;/code>) may have any incoming or outgoing &lt;code>Transitions&lt;/code>. If false, only one &lt;code>nestedState&lt;/code> may be performed at a time.&lt;/p>&#xA;"/>
    <properties name="stateUsageStateDefinition" label="stateUsageStateDefinition" comment="&lt;p>The &lt;code>Behaviors&lt;code> that are the &lt;code>types&lt;/code> of this &lt;code>StateUsage&lt;code>. Nominally, these would be &lt;code>StateDefinitions&lt;/code>, but kernel &lt;code>Behaviors&lt;/code> are also allowed, to permit use of &lt;code>Behaviors&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="stateUsageEntryAction" label="stateUsageEntryAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed on entry to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = entry&lt;/code>.&lt;/p>"/>
    <properties name="stateUsageDoAction" label="stateUsageDoAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed while in the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = do&lt;/code>.&lt;/p>"/>
    <properties name="stateUsageExitAction" label="stateUsageExitAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed on exit to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = exit&lt;/code>.&lt;/p>"/>
    <properties name="intersectingIntersectingType" label="intersectingIntersectingType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeIntersected&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>"/>
    <properties name="intersectingTypeIntersected" label="intersectingTypeIntersected" comment="&lt;p>Type with interpretations partly determined by &lt;code>intersectingType&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotation" label="annotatingElementAnnotation" comment="&lt;p>The Annotations that relate this AnnotatingElement to its &lt;code>annotatedElements&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotatedElement" label="annotatingElementAnnotatedElement" comment="&lt;p>The Elements that are annotated by this AnnotatingElement. If &lt;code>annotation&lt;/code&lt;> is not empty, this is derived as the &lt;code>annotatedElements&lt;/code> of the &lt;code>annotations&lt;/code>. If &lt;code>annotation&lt;/code>, then it is derived as the &lt;code>owningNamespace&lt;/code> of the AnnotatingElement.&lt;/p>&#xA;"/>
    <properties name="differencingDifferencingType" label="differencingDifferencingType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeDifferenced&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>"/>
    <properties name="differencingTypeDifferenced" label="differencingTypeDifferenced" comment="&lt;p>Type with interpretations partly determined by &lt;code>differencingType&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>"/>
    <properties name="satisfyRequirementUsageSatisfiedRequirement" label="satisfyRequirementUsageSatisfiedRequirement" comment="&lt;p>The RequirementUsage that is satisfied by the &lt;code>satisfyingSubject&lt;/code> of this SatisfyRequirementUsage. It is the &lt;code>assertedConstraint&lt;/code> of the SatisfyRequirementUsage considered as an AssertConstraintUsage, which must be a RequirementUsage.&lt;/p>"/>
    <properties name="satisfyRequirementUsageSatisfyingFeature" label="satisfyRequirementUsageSatisfyingFeature" comment="&lt;p>The Feature that represents the actual subject that is asserted to satisfy the &lt;tt>satisfiedRequirement&lt;/tt>. The &lt;tt>satisfyingFeature&lt;/tt> must be the target of a BindingConnector from the &lt;tt>subjectParameter&lt;/tt> of the &lt;tt>satisfiedRequirement&lt;/tt>.&lt;/p>"/>
    <properties name="literalRationalValue" label="literalRationalValue" comment="&lt;p>The value whose rational approximation is the result of evaluating this Expression.&lt;/p>&#xA;&#xA;&lt;p>The Real value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="eventOccurrenceUsageEventOccurrence" label="eventOccurrenceUsageEventOccurrence" comment="&lt;p>The OccurrenceUsage referenced as an event by this EventOccurrenceUsage. It is the &lt;code>referenceFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the EventOccurrenceUsage, if there is one, and, otherwise, the EventOccurrenceUsage itself.&lt;/p>"/>
    <properties name="objectiveMembershipOwnedObjectiveRequirement" label="objectiveMembershipOwnedObjectiveRequirement" comment="&lt;p>The RequirementUsage that is the &lt;code>ownedMemberFeature&lt;/code> of this RequirementUsage.&lt;/p> &#xA;"/>
    <properties name="resultExpressionMembershipOwnedResultExpression" label="resultExpressionMembershipOwnedResultExpression" comment="&lt;p>The Expression that provides the result for the owner of the ResultExpressionMembership.&lt;/p>"/>
    <properties name="textualRepresentationLanguage" label="textualRepresentationLanguage" comment="&lt;p>The natural or artifical language in which the &lt;code>body&lt;/code> text is written.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationBody" label="textualRepresentationBody" comment="&lt;p>The textual representation of the &lt;code>representedElement&lt;/code> in the given &lt;code>language&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationRepresentedElement" label="textualRepresentationRepresentedElement" comment="&lt;p>The Element that is represented by this TextualRepresentation.&lt;/p>"/>
    <properties name="attributeUsageAttributeDefinition" label="attributeUsageAttributeDefinition" comment="&lt;p>The DataTypes that are the types of this AttributeUsage. Nominally, these are AttributeDefinitions, but other kinds of kernel DataTypes are also allowed, to permit use of DataTypes from the Kernel Library.&lt;/p>"/>
    <properties name="importVisibility" label="importVisibility" comment="&lt;p>The visibility level of the imported &lt;code>members&lt;/code> from this Import relative to the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="importIsRecursive" label="importIsRecursive" comment="&lt;p>Whether to recursively import Memberships from visible, owned sub-Namespaces.&lt;/p>"/>
    <properties name="importIsImportAll" label="importIsImportAll" comment="&lt;p>Whether to import memberships without regard to declared visibility.&lt;/p>&#xA;"/>
    <properties name="importImportedElement" label="importImportedElement" comment="&lt;p>The effectively imported Element for this Import. For a MembershipImport, this is the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code>. For a NamespaceImport, it is the &lt;code>importedNamespace&lt;/code>.&lt;/p>"/>
    <properties name="importImportOwningNamespace" label="importImportOwningNamespace" comment="&lt;p>The Namespace into which Memberships are imported by this Import, which must be the &lt;code>owningRelatedElement&lt;/code> of the Import.&lt;/p> &#xA;"/>
    <properties name="featureValueIsInitial" label="featureValueIsInitial" comment="&lt;p>Whether this FeatureValue specifies a bound value or an initial value for the &lt;code>featureWithValue&lt;/code>.&lt;/p>"/>
    <properties name="featureValueIsDefault" label="featureValueIsDefault" comment="&lt;p>Whether this FeatureValue is a concrete specification of the bound of initial value of the &lt;code>featureWithValue&lt;/code>, or just a default value that may be overridden.&lt;/p>"/>
    <properties name="featureValueFeatureWithValue" label="featureValueFeatureWithValue" comment="&lt;p>The Feature to be provided a value.&lt;/p>&#xA;&#xA;&lt;p>The Feature to be provided a value.&lt;/p>"/>
    <properties name="featureValueValue" label="featureValueValue" comment="&lt;p>The Expression that provides the value of the &lt;code>featureWithValue&lt;/code> as its &lt;code>result&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Expression that provides the value as a result.&lt;/p>"/>
    <properties name="featuringType" label="featuringType" comment="&lt;p>The Type that features the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featuringFeature" label="featuringFeature" comment="&lt;p>The Feature that is featured by the &lt;code>featuringType&lt;/code>.&lt;/p>"/>
    <properties name="redefinitionRedefiningFeature" label="redefinitionRedefiningFeature" comment="&lt;p>The Feature that is redefining the &lt;code>redefinedFeature&lt;/code> of this Redefinition.&lt;/p>&#xA;"/>
    <properties name="redefinitionRedefinedFeature" label="redefinitionRedefinedFeature" comment="&lt;p>The Feature that is redefined by the &lt;code>redefiningFeature&lt;/code> of this Redefinition.&lt;/p>&#xA;"/>
    <properties name="conjugationOriginalType" label="conjugationOriginalType" comment="&lt;p>The Type to be conjugated.&lt;/P>"/>
    <properties name="conjugationConjugatedType" label="conjugationConjugatedType" comment="&lt;p>The Type that is the result of applying Conjugation to the &lt;code>originalType&lt;/code>.&lt;/p>"/>
    <properties name="conjugationOwningType" label="conjugationOwningType" comment="&lt;p>The &lt;code>conjugatedType&lt;/code> of this Type that is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="analysisCaseUsageAnalysisAction" label="analysisCaseUsageAnalysisAction" comment="&lt;p>The &lt;code>features&lt;/code> of the AnalysisCaseUsage that are typed as AnalysisActions. Each &lt;code>analysisAction&lt;/code> ActionUsage must subset the &lt;code>analysisSteps&lt;/code> ActionUsage of the base AnalysisCaseDefinition AnalysisCase from the Systems model library.&lt;/p>&#xA;"/>
    <properties name="analysisCaseUsageAnalysisCaseDefinition" label="analysisCaseUsageAnalysisCaseDefinition" comment="&lt;p>The AnalysisCaseDefinition that is the type of this AnalysisCaseUsage.&lt;/p>"/>
    <properties name="analysisCaseUsageResultExpression" label="analysisCaseUsageResultExpression" comment="&lt;p>The Expression used to compute the &lt;code>result&lt;/code> of the AnalysisCaseUsage, derived as the Expression owned via a ResultExpressionMembership. The &lt;code>resultExpression&lt;/code> must redefine directly or indirectly, the &lt;code>resultEvaluation&lt;/code> Expression of the base AnalysisCaseDefinition AnalysisCase from the Systems model library.&lt;/p>&#xA;"/>
    <properties name="membershipImportImportedMembership" label="membershipImportImportedMembership" comment="&lt;p>The Membership to be imported.&lt;/p>"/>
    <properties name="portUsagePortDefinition" label="portUsagePortDefinition" comment="&lt;p>The &lt;code>types&lt;/code> of this PortUsage, which must all be PortDefinitions.&lt;/p>"/>
    <properties name="caseUsageObjectiveRequirement" label="caseUsageObjectiveRequirement" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of this CaseUsage that is owned via an ObjectiveMembership, and that must redefine, directly or indirectly, the &lt;code>objective&lt;/code> RequirementUsage of the base CaseDefinition Case from the Systems model library.&lt;/p> &#xA;"/>
    <properties name="caseUsageCaseDefinition" label="caseUsageCaseDefinition" comment="&lt;p>The CaseDefinition that is the type of this CaseUsage.&lt;/p>"/>
    <properties name="caseUsageSubjectParameter" label="caseUsageSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this CaseUsage that is owned via a SubjectMembership, which must redefine, directly or indirectly, the &lt;code>subject&lt;/code> parameter of the base CaseDefinition Case from the Systems model library.&lt;/p>&#xA;"/>
    <properties name="caseUsageActorParameter" label="caseUsageActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this CaseUsage that are owned via ActorMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>actors&lt;/code>&lt;/em> of the base CaseDefinition &lt;em>Case&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="allocationUsageAllocationDefinition" label="allocationUsageAllocationDefinition" comment="&lt;p>The AllocationDefinitions that are the types of this AllocationUsage.&lt;/p>"/>
    <properties name="invocationExpressionArgument" label="invocationExpressionArgument" comment="&lt;p>The &lt;code>value&lt;/code> &lt;code>Expressions&lt;/code> of the &lt;code>FeatureValues&lt;/code> of the input &lt;code>parameters&lt;/code> of the &lt;code>InvocationExpression&lt;/code>."/>
    <properties name="viewRenderingMembershipOwnedRendering" label="viewRenderingMembershipOwnedRendering"/>
    <properties name="viewRenderingMembershipReferencedRendering" label="viewRenderingMembershipReferencedRendering" comment="&lt;p> The RenderingUsage that is referenced through this ViewRenderingMembership. It is the &lt;code>referenceFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the &lt;code>ownedRendering&lt;/code>, if there is one, and, otherwise, the &lt;code>ownedRendering&lt;/code> itself.&lt;/p>"/>
    <properties name="featureReferenceExpressionReferent" label="featureReferenceExpressionReferent" comment="&lt;p>The Feature that is referenced by this FeatureReferenceExpression, derived as its first &lt;code>member&lt;/code> Feature.&lt;/p>"/>
    <properties name="featureChainingChainingFeature" label="featureChainingChainingFeature" comment="&lt;p>The Feature whose values partly determine values of &lt;code>featureChained&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeatureChained" label="featureChainingFeatureChained" comment="&lt;p>The Feature whose values are partly determined by values of the &lt;code>chainingFeature&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionIsParallel" label="stateDefinitionIsParallel" comment="&lt;p>Whether the &lt;code>ownedStates&lt;/code> of this &lt;code>StateDefinition&lt;/code> are to all be performed in parallel. If true, none of the &lt;code>ownedActions&lt;/code> (which includes &lt;code>ownedStates&lt;/code>) may have any incoming or outgoing &lt;code>Transitions&lt;/code>. If false, only one &lt;code>ownedState&lt;/code> may be performed at a time.&lt;/p>&#xA;"/>
    <properties name="stateDefinitionState" label="stateDefinitionState" comment="&lt;p>The &lt;code>StateUsages&lt;/code> that are the &lt;code>actions&lt;/code> of the &lt;code>StateDefinition&lt;/code>, which specify the discrete states in the behavior defined by the &lt;code>StateDefinition&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionEntryAction" label="stateDefinitionEntryAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed on entry to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = entry&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionDoAction" label="stateDefinitionDoAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed while in the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = do&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionExitAction" label="stateDefinitionExitAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed on exit to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = exit&lt;/code>.&lt;/p>"/>
    <properties name="namespaceOwnedMembership" label="namespaceOwnedMembership" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Namespace that are Memberships, for which the Namespace is the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMember" label="namespaceOwnedMember" comment="&lt;p>The owned &lt;code>members&lt;/code> of this Namespace, derived as the &lt;cpde>ownedMemberElements&lt;/code> of the &lt;code>ownedMemberships&lt;/code> of the Namespace.&lt;/p>&#xA;"/>
    <properties name="namespaceMembership" label="namespaceMembership" comment="&lt;p>All Memberships in this Namespace, including (at least) the union of &lt;code>ownedMemberships&lt;/code> and &lt;code>importedMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedImport" label="namespaceOwnedImport" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Namespace that are Imports, for which the Namespace is the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceMember" label="namespaceMember" comment="&lt;p>The set of all member Elements of this Namespace, derived as the &lt;code>memberElements&lt;/code> of all &lt;code>memberships&lt;/code> of the Namespace.&lt;/p>&#xA;"/>
    <properties name="namespaceImportedMembership" label="namespaceImportedMembership" comment="&lt;p>The Memberships in this Namespace that result from Import Relationships between the Namespace and other Namespaces.&lt;/p>&#xA;"/>
    <properties name="subclassificationSuperclassifier" label="subclassificationSuperclassifier" comment="&lt;p>The more general Classifier in this Subclassification.&lt;/p>"/>
    <properties name="subclassificationSubclassifier" label="subclassificationSubclassifier" comment="&lt;p>The more specific Classifier in this Subclassification.&lt;/p>"/>
    <properties name="subclassificationOwningClassifier" label="subclassificationOwningClassifier" comment="&lt;p>The Classfier that owns this Subclassification relationship, which must also be its &lt;code>subclassifier&lt;/code>.&lt;/p>"/>
    <properties name="assertConstraintUsageAssertedConstraint" label="assertConstraintUsageAssertedConstraint" comment="&lt;p>The ConstraintUsage to be performed by the AssertConstraintUsage. It is the &lt;code>referenceFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the AssertConstraintUsage, if there is one, and, otherwise, the AssertConstraintUsage itself.&lt;/p>"/>
    <properties name="actionDefinitionAction" label="actionDefinitionAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that are &lt;code>steps&lt;/code> in this &lt;code>ActionDefinition&lt;/code>, which define the actions that specify the behavior of the &lt;code>ActionDefinition&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="requirementConstraintMembershipKind" label="requirementConstraintMembershipKind" comment="&lt;p>Whether the RequirementConstraintMembership is for an assumed or required ConstraintUsage.&lt;/p>"/>
    <properties name="requirementConstraintMembershipOwnedConstraint" label="requirementConstraintMembershipOwnedConstraint" comment="&lt;p>The ConstraintUsage that is the &lt;code>ownedMemberFeature&lt;/code> of this RequirementConstraintMembership.&lt;/p>"/>
    <properties name="requirementConstraintMembershipReferencedConstraint" label="requirementConstraintMembershipReferencedConstraint" comment="&lt;p> The ConstraintUsage that is referenced through this RequirementConstraintMembership. This is derived as &lt;code>referencedFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> of the &lt;code>ownedConstraint&lt;/code>, if there is one, and, otherwise, the &lt;code>ownedConstraint&lt;/code> itself.&lt;/p>"/>
    <properties name="documentationDocumentedElement" label="documentationDocumentedElement" comment="&lt;p>The Element that is documented by this Documentation.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberElementId" label="owningMembershipOwnedMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberShortName" label="owningMembershipOwnedMemberShortName" comment="&lt;p>The &lt;code>shortName&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberName" label="owningMembershipOwnedMemberName" comment="&lt;p>The &lt;code>name&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElement" label="owningMembershipOwnedMemberElement" comment="&lt;p>The Element that becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this OwningMembership. Derived as the first &lt;code>ownedRelatedElement&lt;/code> of the OwningRelationship.&lt;/p>&#xA;&#xA;"/>
    <properties name="allocationDefinitionAllocation" label="allocationDefinitionAllocation" comment="&lt;p>The ActionUsages that refine the allocation mapping defined by this AllocationDefinition.&lt;/p>"/>
    <properties name="membershipMemberElementId" label="membershipMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>memberElement&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberShortName" label="membershipMemberShortName" comment="&lt;p>The short name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberName" label="membershipMemberName" comment="&lt;p>The name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipVisibility" label="membershipVisibility" comment="&lt;p>Whether or not the Membership of the &lt;code>memberElement&lt;/code> in the &lt;code>membershipOwningNamespace&lt;/code> is publicly visible outside that Namespace.&lt;/p>&#xA;"/>
    <properties name="membershipMembershipOwningNamespace" label="membershipMembershipOwningNamespace" comment="&lt;p>The Namespace of which the &lt;code>memberElement&lt;/code> becomes a &lt;cpde>member&lt;/code> due to this Membership.&lt;/p>&#xA;"/>
    <properties name="membershipMemberElement" label="membershipMemberElement" comment="&lt;p>The Element that becomes a &lt;code>member&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this Membership.&lt;/p>&#xA;"/>
    <properties name="metadataFeatureMetaclass" label="metadataFeatureMetaclass" comment="&lt;p>The &lt;code>type&lt;/code> of this AnnotatingFeature, which must be a DataType.&lt;/p>"/>
    <properties name="conjugatedPortTypingPortDefinition" label="conjugatedPortTypingPortDefinition" comment="&lt;p>The &lt;code>originalPortDefinition&lt;/code> of the &lt;code>conjugatedPortDefinition&lt;/code> of this ConjugatedPortTyping.&lt;/p>"/>
    <properties name="conjugatedPortTypingConjugatedPortDefinition" label="conjugatedPortTypingConjugatedPortDefinition" comment="&lt;p>The &lt;code>type&lt;/code> of this ConjugatedPortTyping considered as a FeatureTyping, which must be a ConjugatedPortDefinition.&lt;/p>&#xA;"/>
    <properties name="conjugatedPortDefinitionOwnedPortConjugator" label="conjugatedPortDefinitionOwnedPortConjugator" comment="&lt;p>The PortConjugation that is the &lt;code>ownedConjugator&lt;/code> of this ConjugatedPortDefinition, linking it its &lt;code>originalPortDefinition&lt;/code>.&lt;/p>"/>
    <properties name="conjugatedPortDefinitionOriginalPortDefinition" label="conjugatedPortDefinitionOriginalPortDefinition" comment="&lt;p>The original PortDefinition for this ConjugatedPortDefinition.&lt;/p>"/>
    <properties name="literalStringValue" label="literalStringValue" comment="&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>&#xA;&#xA;&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="packageFilterCondition" label="packageFilterCondition" comment="&lt;p>The model-level evaluable Boolean Expressions used to filter the &lt;code>members&lt;/code> of this Package, derived as those &lt;code>ownedMembers&lt;/code> of the Package that are owned via ElementFilterMembership.&lt;/p>"/>
    <properties name="caseDefinitionObjectiveRequirement" label="caseDefinitionObjectiveRequirement" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of this CaseDefinition that is owned via an ObjectiveMembership, and that must redefine, directly or indirectly, the &lt;code>objective&lt;/code> RequirementUsage of the base CaseDefinition Case from the Systems model library.&lt;/p> &#xA;"/>
    <properties name="caseDefinitionSubjectParameter" label="caseDefinitionSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this CaseDefinition that is owned via a SubjectMembership, which must redefine, directly or indirectly, the &lt;code>subject&lt;/code> parameter of the base CaseDefinition Case from the Systems model library.&lt;/p>"/>
    <properties name="caseDefinitionActorParameter" label="caseDefinitionActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this CaseDefinition that are owned via ActorMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>actors&lt;/code>&lt;/em> of the base CaseDefinition &lt;em>Case&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="namespaceImportImportedNamespace" label="namespaceImportImportedNamespace" comment="&lt;p>The Namespace whose visible Memberships are imported by this NamespaceImport.&lt;/p>&#xA;"/>
    <properties name="interfaceUsageInterfaceDefinition" label="interfaceUsageInterfaceDefinition" comment="&lt;p>The InterfaceDefinitions that type this InterfaceUsage.&lt;/p>"/>
    <properties name="behaviorStep" label="behaviorStep" comment="&lt;p>The Steps that make up this Behavior.&lt;/p>&#xA;"/>
    <properties name="behaviorParameter" label="behaviorParameter" comment="&lt;p>The parameters of this Behavior, which are all its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the Behavior.&lt;/p>&#xA;"/>
    <properties name="disjoiningTypeDisjoined" label="disjoiningTypeDisjoined" comment="&lt;p>Type asserted to be disjoint with the &lt;code>disjoiningType&lt;/code>.&lt;p>"/>
    <properties name="disjoiningDisjoiningType" label="disjoiningDisjoiningType" comment="&lt;p>Type asserted to be disjoint with the &lt;code>typeDisjoined&lt;/code>.&lt;p>"/>
    <properties name="disjoiningOwningType" label="disjoiningOwningType" comment="&lt;p>A &lt;code>typeDisjoined&lt;/code> that is also an &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingFeatureOfType" label="typeFeaturingFeatureOfType" comment="&lt;p>The Feature that is featured by the &lt;code>featuringType&lt;/code>. It is the &lt;code>source&lt;/code> of the Relationship.&lt;/p>"/>
    <properties name="typeFeaturingFeaturingType" label="typeFeaturingFeaturingType" comment="&lt;p>The Type that features the &lt;code>featureOfType&lt;/code>. It is the &lt;code>target&lt;/code> of the Relationship.&lt;/p>"/>
    <properties name="typeFeaturingOwningFeatureOfType" label="typeFeaturingOwningFeatureOfType" comment="&lt;p>The Feature that owns this TypeFeaturing and is also the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="booleanExpressionPredicate" label="booleanExpressionPredicate" comment="&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;"/>
    <properties name="interfaceDefinitionInterfaceEnd" label="interfaceDefinitionInterfaceEnd" comment="&lt;p>The PortUsages that are the &lt;code>associationEnds&lt;/code> of this InterfaceDefinition.&#xA;&#xA;"/>
    <properties name="loopActionUsageBodyAction" label="loopActionUsageBodyAction" comment="&lt;p>The ActionUsage to be performed repeatedly by the LoopActionUsage. Derived as the owned ActionUsage that redefines the &lt;em>&lt;code>body&lt;/code>&lt;em> &lt;/em>&lt;/em>parameter of the LoopActionUsage.&lt;/p> &#xA;"/>
    <properties name="libraryPackageIsStandard" label="libraryPackageIsStandard" comment="&lt;p>Whether this LibraryPackage contains a standard library model. This should only be set to true for LibraryPackage in the standard Kernel Libraries or in normative model libraries for a language built on KerML.&lt;/p>"/>
    <properties name="portConjugationOriginalPortDefinition" label="portConjugationOriginalPortDefinition" comment="&lt;p>The PortDefinition being conjugated.&lt;/p>"/>
    <properties name="portConjugationConjugatedPortDefinition" label="portConjugationConjugatedPortDefinition" comment="&lt;p>The ConjugatedPortDefinition that is conjugate to the &lt;tt>originalPortDefinition&lt;/tt>.&lt;/p>"/>
    <properties name="framedConcernMembershipOwnedConcern" label="framedConcernMembershipOwnedConcern" comment="&lt;p>The ConcernUsage that is the &lt;code>ownedConstraint&lt;/code> of this AddressedConcernMembership.&lt;/p>"/>
    <properties name="framedConcernMembershipReferencedConcern" label="framedConcernMembershipReferencedConcern" comment="&lt;p> The ConcernUsage that is referenced through this AddressedConcernMembership. It is the &lt;code>referencedConstraint&lt;/code> of the FramedConcernMembership considered as a RequirementConstraintMembership, which must be a ConcernUsage.&lt;/p>"/>
    <properties name="relationshipIsImplied" label="relationshipIsImplied" comment="&lt;p>Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.&lt;/p>"/>
    <properties name="relationshipRelatedElement" label="relationshipRelatedElement" comment="&lt;p>The Elements that are related by this Relationship, derived as the union of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code> Elements of the Relationship.&lt;/p>"/>
    <properties name="relationshipTarget" label="relationshipTarget" comment="&lt;p>The &lt;code>relatedElements&lt;/code> to which this Relationship is considered to be directed.&lt;/p>&#xA;"/>
    <properties name="relationshipSource" label="relationshipSource" comment="&lt;p>The &lt;code>relatedElements&lt;/c ode> from which this Relationship is considered to be directed.&lt;/p>"/>
    <properties name="relationshipOwningRelatedElement" label="relationshipOwningRelatedElement" comment="&lt;p>The &lt;tt>relatedElement&lt;/tt> of this Relationship that owns the Relationship, if any.&lt;/p>"/>
    <properties name="relationshipOwnedRelatedElement" label="relationshipOwnedRelatedElement" comment="&lt;p>The &lt;tt>relatedElements&lt;/tt> of this Relationship that are owned by the Relationship.&lt;/p>"/>
    <properties name="connectionDefinitionConnectionEnd" label="connectionDefinitionConnectionEnd" comment="&lt;p>The Usages that define the things related by the ConnectionDefinition.&lt;/p>"/>
    <properties name="featureTypingTypedFeature" label="featureTypingTypedFeature" comment="&lt;p>The Feature that has its Type determined by this FeatureTyping.&lt;/p>"/>
    <properties name="featureTypingType" label="featureTypingType" comment="&lt;p>The Type that is being applied by this FeatureTyping.&lt;/p>&#xA;"/>
    <properties name="featureTypingOwningFeature" label="featureTypingOwningFeature" comment="&lt;p>The Feature that owns this FeatureTyping (which must also be the &lt;code>typedFeature&lt;/code>).&lt;/p>"/>
    <properties name="flowConnectionUsageFlowConnectionDefinition" label="flowConnectionUsageFlowConnectionDefinition" comment="&lt;p>The Interactions that are the types of this FlowConnectionUsage. Nominally, these are FlowConnectionDefinitions, but other kinds of Kernel Interactions are also allowed, to permit use of Interactions from the Kernel Library.&lt;/p>"/>
    <properties name="subjectMembershipOwnedSubjectParameter" label="subjectMembershipOwnedSubjectParameter" comment="&lt;p>The Usage that is the &lt;code>ownedMemberParameter&lt;/code> of this SubjectMembership.&lt;/p>"/>
    <properties name="itemFlowItemType" label="itemFlowItemType" comment="&lt;p>The type of  items transferred, derived as the &lt;code>type&lt;/code> of the &lt;code>itemFeature&lt;/code> of the ItemFlow.&lt;/p>&#xA;&#xA;"/>
    <properties name="itemFlowTargetInputFeature" label="itemFlowTargetInputFeature" comment="&lt;p>The Feature that receives the items carried by the ItemFlow. It must be an owned &lt;code>output&lt;/code> of the target participant of the ItemFlow.&lt;/p>"/>
    <properties name="itemFlowSourceOutputFeature" label="itemFlowSourceOutputFeature" comment="&lt;p>The Feature that provides the items carried by the ItemFlow. It must be an owned &lt;code>output&lt;/code> of the &lt;code>source&lt;/code> of the ItemFlow.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFlowEnd" label="itemFlowItemFlowEnd" comment="&lt;p>The &lt;code>connectorEnds&lt;/code> of this ItemFlow that are ItemFlowEnds.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFeature" label="itemFlowItemFeature" comment="&lt;p>The Feature of the ItemFlow that is an ItemFeature.&lt;/p>&#xA;"/>
    <properties name="itemFlowInteraction" label="itemFlowInteraction" comment="&lt;p>The Interactions that type this ItemFlow. Interactions are both Associations and Behaviors, which can type Connectors and Steps, respectively.&lt;/p>"/>
    <properties name="featureChainExpressionTargetFeature" label="featureChainExpressionTargetFeature" comment="&lt;p>The Feature that is accessed by this FeatureChainExpression, derived as its second &lt;code>member&lt;/code> Feature (the first being its one &lt;code>argument&lt;/code> Expression). This Feature must redefine the &lt;em>&lt;code>target&lt;/code> Feature of the Function &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em>.&lt;/p>"/>
    <properties name="multiplicityRangeLowerBound" label="multiplicityRangeLowerBound" comment="&lt;p>The Expression whose result provides the lower bound of MultiplicityRange. If no &lt;code>lowerBound&lt;/code> Expression is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (&lt;code>*&lt;/code>), in which case the lower bound shall be 0.&lt;/p>&#xA;"/>
    <properties name="multiplicityRangeUpperBound" label="multiplicityRangeUpperBound" comment="The Expression whose result is the upper bound of the MultiplicityRange."/>
    <properties name="multiplicityRangeBound" label="multiplicityRangeBound" comment="&lt;p>The bound Expressions of the MultiplicityRange. These shall be the only &lt;code>ownedMembers&lt;/code> of the MultiplicityRange.&lt;/p>"/>
    <properties name="successionTransitionStep" label="successionTransitionStep" comment="&lt;p>A Step that is typed by the Behavior &lt;em>TransitionPerformance&lt;/em> (from the Model Library) that has this Succession as its &lt;em>&lt;code>transitionLink&lt;/code>&lt;/em>.&lt;/p>&#xA;"/>
    <properties name="successionTriggerStep" label="successionTriggerStep" comment="&lt;p>Steps that map incoming events to the timing of occurrences of the &lt;code>transitionStep&lt;/code>. The values of &lt;code>triggerStep&lt;/code> subset the list of acceptable events to be received by a Behavior or the object that performs it.&lt;/p>&#xA;"/>
    <properties name="successionEffectStep" label="successionEffectStep" comment="&lt;p>Steps that represent occurrences that are side effects of the &lt;code>transitionStep&lt;/code> occurring.&lt;/p>&#xA;"/>
    <properties name="successionGuardExpression" label="successionGuardExpression" comment="&lt;p>Expressions that must evaluate to true before the &lt;code>transitionStep&lt;/code> can occur.&lt;/p>&#xA;"/>
    <properties name="acceptActionUsageReceiverArgument" label="acceptActionUsageReceiverArgument" comment="&lt;p>An &lt;code>Expression&lt;code> whose &lt;code>result&lt;/code> is bound to the &lt;em>&lt;code>receiver&lt;/code>&lt;/em> input &lt;code>parameter&lt;/code> of this &lt;code>AcceptActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="acceptActionUsagePayloadParameter" label="acceptActionUsagePayloadParameter" comment="&lt;p>The &lt;code>nestedReference&lt;/code> of this &lt;code>AcceptActionUsage&lt;/code> that redefines the &lt;code>payload&lt;/code> output &lt;code>parameter&lt;/code> of the base &lt;code>AcceptActionUsage&lt;/code> &lt;em>&lt;code>AcceptAction&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>"/>
    <properties name="acceptActionUsagePayloadArgument" label="acceptActionUsagePayloadArgument" comment="&lt;p>An &lt;code>Expression&lt;code> whose &lt;code>result&lt;/code> is bound to the &lt;code>&lt;em>payload&lt;/em>&lt;/code> &lt;code>parameter &lt;/code> of this &lt;code>AcceptActionUsage&lt;/code>. If provided, the &lt;code>AcceptActionUsage&lt;/code> will only accept a &lt;code>&lt;em>Transfer&lt;/em>&lt;/code> with exactly this &lt;code>&lt;em>payload&lt;/em>&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="featureIsUnique" label="featureIsUnique" comment="&lt;p>Whether or not values for this Feature must have no duplicates or not.&lt;/p>&#xA;"/>
    <properties name="featureIsOrdered" label="featureIsOrdered" comment="&lt;p>Whether an order exists for the values of this Feature or not.&lt;/p>"/>
    <properties name="featureIsComposite" label="featureIsComposite" comment="&lt;p>Whether the Feature is a composite &lt;code>feature&lt;/code> of its &lt;code>featuringType&lt;/code>. If so, the values of the Feature cannot exist after the instance of the &lt;code>featuringType&lt;/code> no longer does.&lt;/p>&#xA;"/>
    <properties name="featureIsEnd" label="featureIsEnd" comment="&lt;p>Whether or not the this Feature is an end Feature, requiring a different interpretation of the &lt;code>multiplicity&lt;/code> of the Feature.&lt;/p>&#xA;&#xA;&lt;p>An end Feature is always considered to map each domain entity to a single co-domain entity, whether or not a Multiplicity is given for it. If a Multiplicity is given for an end Feature, rather than giving the co-domain cardinality for the Feature as usual, it specifies a cardinality constraint for &lt;em>navigating&lt;/em> across the &lt;code>endFeatures&lt;/code> of the &lt;code>featuringType&lt;/code> of the end Feature. That is, if a Type has &lt;em>n&lt;/em> &lt;code>endFeatures&lt;/code>, then the Multiplicity of any one of those end Features constrains the cardinality of the set of values of that Feature when the values of the other &lt;em>n-1&lt;/em> end Features are held fixed.&lt;/p>&#xA;"/>
    <properties name="featureIsDerived" label="featureIsDerived" comment="&lt;p>Whether the values of this Feature&amp;nbsp;can always be computed from the values of other Features.&lt;/p>&#xA;"/>
    <properties name="featureIsReadOnly" label="featureIsReadOnly" comment="&lt;p>Whether the values of this Feature can change over the lifetime of an instance of the domain.&lt;/p>&#xA;"/>
    <properties name="featureIsPortion" label="featureIsPortion" comment="&lt;p>Whether the values of this Feature are contained in the space and time of instances of the Feature&amp;#39;s domain.&lt;/p>&#xA;"/>
    <properties name="featureDirection" label="featureDirection" comment="&lt;p>Determines how values of this Feature are determined or used (see FeatureDirectionKind).&lt;/p>&#xA;"/>
    <properties name="featureIsNonunique" label="featureIsNonunique"/>
    <properties name="featureOwningFeatureMembership" label="featureOwningFeatureMembership" comment="&lt;p>The FeatureMembership that owns this Feature as an &lt;code>ownedMemberFeature&lt;/code>, determining its &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="featureOwningType" label="featureOwningType" comment="&lt;p>The Type that is the &lt;code>owningType&lt;/code> of the &lt;code>owningFeatureMembership&lt;/code> of this Type.&lt;/p>"/>
    <properties name="featureEndOwningType" label="featureEndOwningType" comment="&lt;p>The Type that is related to this Feature by an EndFeatureMembership in which the Feature is an &lt;code>ownedMemberFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureType" label="featureType" comment="&lt;p>Types that restrict the values of this Feature, such that the values must be instances of all the types. The types of a Feature are derived from its &lt;code>ownedFeatureTypings&lt;/code> and the &lt;code>types&lt;/code> of its &lt;code>ownedSubsettings&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwnedRedefinition" label="featureOwnedRedefinition" comment="&lt;p>The &lt;code>ownedSubsettings&lt;/code> of this Feature that are Redefinitions, for which the Feature is the &lt;code>redefiningFeature&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="featureOwnedSubsetting" label="featureOwnedSubsetting" comment="&lt;p>The &lt;code>ownedGeneralizations&lt;/code> of this Feature that are Subsettings, for which the Feature is the &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwnedTyping" label="featureOwnedTyping" comment="&lt;p>The &lt;code>ownedGeneralizations&lt;/code> of this Feature that are FeatureTypings, for which the Feature is the &lt;code>typedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureFeaturingType" label="featureFeaturingType" comment="&lt;p>Types that feature this Feature, such that any instance in the domain of the Feature must be classified by all of these Types, including at least all the &lt;code>featuringTypes&lt;/code> of its &lt;code>ownedTypeFeaturings&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTypeFeaturing" label="featureOwnedTypeFeaturing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Feature that are TypeFeaturings, for which the Feature is the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeature" label="featureChainingFeature" comment="&lt;p>The Features that are chained together to determine the values of this Feature, derived from the &lt;code>chainingFeatures&lt;/code> of the &lt;code>ownedFeatureChainings&lt;/code> of this Feature, in the same order. The values of a Feature with chainingFeatures are the same as values of the last Feature in the chain, which can be found by starting with the values of the first Feature (for each instance of the original Feature's domain), then on each of those to the values of the second Feature in chainingFeatures, and so on, to values of the last Feature. The Features related to a Feature by a FeatureChaining are identified as its chainingFeatures.&lt;/p>"/>
    <properties name="featureOwnedFeatureInverting" label="featureOwnedFeatureInverting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Feature that are FeatureInvertings, for which the Feature is the &lt;code>featureInverted&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureChaining" label="featureOwnedFeatureChaining" comment="&lt;p>The FeatureChainings that are among the &lt;code>ownedRelationships&lt;/owned> of this Feature (identify their &lt;code>featureChained&lt;/code> also as an &lt;code>owningRelatedElement&lt;/code>).&lt;/p>"/>
    <properties name="featureOwnedReferenceSubsetting" label="featureOwnedReferenceSubsetting" comment="&lt;p>The one &lt;code>ownedSubsetting&lt;/code> of this Feature, if any, that is a ReferenceSubsetting, for which the Feature is the &lt;code>referencingFeature&lt;/code>.&lt;/p>"/>
    <properties name="metadataUsageMetadataDefinition" label="metadataUsageMetadataDefinition"/>
    <properties name="annotationAnnotatedElement" label="annotationAnnotatedElement" comment="&lt;p>The Element that is annotated by the &lt;code>annotatingElement&lt;/code> of this Annotation.&lt;/p>"/>
    <properties name="annotationOwningAnnotatedElement" label="annotationOwningAnnotatedElement" comment="&lt;p>The &lt;code>annotatedElement&lt;/code> of this Annotation, when it is also its &lt;code>owningRelatedElement&lt;/code>."/>
    <properties name="annotationAnnotatingElement" label="annotationAnnotatingElement" comment="&lt;p>The AnnotatingElement that annotates the &lt;code>annotatedElement&lt;/code> of this Annotation.&lt;/p>&#xA;"/>
    <properties name="partUsagePartDefinition" label="partUsagePartDefinition" comment="&lt;p>The &lt;code>itemDefinitions&lt;/code> of this PartUsage that are PartDefinitions.&lt;/p>"/>
    <properties name="sendActionUsageReceiverArgument" label="sendActionUsageReceiverArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;em>&lt;code>receiver&lt;/code>&lt;/em> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="sendActionUsagePayloadArgument" label="sendActionUsagePayloadArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;code>&lt;em>payload&lt;/em>&lt;/code> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="sendActionUsageSenderArgument" label="sendActionUsageSenderArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;em>&lt;code>sender&lt;/code>&lt;/em> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="requirementUsageReqId" label="requirementUsageReqId" comment="&lt;p>An optional modeler-specified identifier for this RequirementUsage (used, e.g., to link it to an original requirement text in some source document), derived as the &lt;code>modeledId&lt;/code> for the RequirementUsage.&lt;/p>"/>
    <properties name="requirementUsageText" label="requirementUsageText" comment="&lt;p>An optional textual statement of the requirement represented by this RequirementUsage, derived as the &lt;code>bodies&lt;code> of the &lt;code>documentaryComments&lt;/code> of the RequirementDefinition.&lt;/p>"/>
    <properties name="requirementUsageRequirementDefinition" label="requirementUsageRequirementDefinition" comment="&lt;p>The RequirementDefinition that is the single type of this RequirementUsage.&lt;/p>"/>
    <properties name="requirementUsageRequiredConstraint" label="requirementUsageRequiredConstraint" comment="&lt;p>The owned ConstraintUsages that represent requirements of this RequirementUsage, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the RequirementUsage with &lt;code>kind&lt;/code> = &lt;code>requirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageAssumedConstraint" label="requirementUsageAssumedConstraint" comment="&lt;p>The owned ConstraintUsages that represent assumptions of this RequirementUsage, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the RequirementUsage with &lt;code>kind&lt;/code> = &lt;code>assumption&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageSubjectParameter" label="requirementUsageSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this RequirementUsage that is owned via a SubjectMembership, which must redefine, directly or indirectly, the &lt;code>subject&lt;/code> parameter of the base RequirementDefinition RequirementCheck from the Systems model library.&lt;/p>"/>
    <properties name="requirementUsageFramedConcern" label="requirementUsageFramedConcern" comment="&lt;p>The Concerns framed by this RequirementUsage, derived as the &lt;code>ownedConcerns&lt;/code> of all &lt;code>FramedConcernMemberships&lt;/code> of the RequirementUsage.&lt;/p>"/>
    <properties name="requirementUsageActorParameter" label="requirementUsageActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this RequirementUsage that are owned via ActorMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>actors&lt;/code>&lt;/em> of the base RequirementDefinition &lt;em>RequirementCheck&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="requirementUsageStakeholderParameter" label="requirementUsageStakeholderParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this RequirementUsage that are owned via StakeholderMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>stakeholders&lt;/code>&lt;/em> of the base RequirementDefinition &lt;em>RequirementCheck&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="literalBooleanValue" label="literalBooleanValue" comment="&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="stakeholderMembershipOwnedStakeholderParameter" label="stakeholderMembershipOwnedStakeholderParameter" comment="&lt;p>The PartUsage specifying the stakeholder.&lt;/p>"/>
    <properties name="exhibitStateUsageExhibitedState" label="exhibitStateUsageExhibitedState" comment="&lt;p>The StateUsage to be exhibited by the ExhibitStateUsage. It is the &lt;code>performedAction&lt;/code> of the ExhibitStateUsage considered as an PerformActionUsage, which must be an StateUsage.&lt;/p>"/>
    <properties name="elementFilterMembershipCondition" label="elementFilterMembershipCondition" comment="&lt;p>The model-level evaluable Boolean Expression used to filter the &lt;code>members&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> of this ElementFilterMembership.&lt;/p>"/>
    <properties name="renderingUsageRenderingDefinition" label="renderingUsageRenderingDefinition" comment="&lt;p>The RenderingDefinition that defines this RenderingUsage.&lt;/p>"/>
    <properties name="verificationCaseDefinitionVerifiedRequirement" label="verificationCaseDefinitionVerifiedRequirement" comment="&lt;p>The RequirementUsages verified by this VerificationCaseDefinition, derived as the &lt;code>verifiedRequirements&lt;/code> of all RequirementVerificationMemberships of the &lt;code>objectiveRequirement&lt;/code>.&lt;/p>"/>
    <properties name="elementAliasIds" label="elementAliasIds" comment="&lt;p>Various alternative identifiers for this Element. Generally, these will be set by tools.&lt;/p>"/>
    <properties name="elementDeclaredShortName" label="elementDeclaredShortName" comment="&lt;p>An optional alternative name for the &lt;code>Element&lt;/code> that is intended to be shorter or in some way more succinct than its primary &lt;code>name&lt;/code>. It may act as a modeler-specified identifier for the &lt;code>Element&lt;/code>, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.&lt;/p> &#xA;"/>
    <properties name="elementDeclaredName" label="elementDeclaredName" comment="&lt;p>The declared name of this &lt;code>Element&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementShortName" label="elementShortName" comment="&lt;p>The short name to be used for this &lt;code>Element&lt;/code> during name resolution within its &lt;code>owningNamespace&lt;/code>. This is derived using the &lt;code>effectiveShortName()&lt;/code> operation. By default, it is the same as the &lt;code>declaredShortName&lt;/code>, but this is overridden for certain kinds of &lt;code>Elements&lt;/code> to compute a &lt;code>shortName&lt;/code> even when the &lt;code>declaredName&lt;/code> is null.&lt;/p>"/>
    <properties name="elementQualifiedName" label="elementQualifiedName" comment="&lt;p>The full ownership-qualified name of this &lt;code>Element&lt;/code>, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The &lt;code>qualifiedName&lt;/code> is null if this &lt;code>Element&lt;/code> has no &lt;code>owningNamespace&lt;/code> or if there is not a complete ownership chain of named &lt;code>Namespaces&lt;/code> from a root &lt;code>Namespace&lt;/code> to this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="elementIsImpliedIncluded" label="elementIsImpliedIncluded" comment="&lt;p>Whether all necessary implied Relationships have been included in the &lt;code>ownedRelationships&lt;/code> of this Element. This property may be true, even if there are not actually any &lt;code>ownedRelationships&lt;/code> with &lt;code>isImplied = true&lt;/code>, meaning that no such Relationships are actually implied for this Element. However, if it is false, then &lt;code>ownedRelationships&lt;/code> may &lt;em>not&lt;/em> contain any implied Relationships. That is, either &lt;em>all&lt;/em> required implied Relationships must be included, or none of them.&lt;/p>"/>
    <properties name="elementIsLibraryElement" label="elementIsLibraryElement" comment="&lt;p>Whether this Element is contained in the ownership tree of a library model.&lt;/p>"/>
    <properties name="elementOwningMembership" label="elementOwningMembership" comment="&lt;p>The &lt;code>owningRelationship&lt;/code> of this Element, if that Relationship is a Membership.&lt;/p>&#xA;"/>
    <properties name="elementOwnedRelationship" label="elementOwnedRelationship" comment="&lt;p>The Relationships for which this Element is the &lt;tt>owningRelatedElement&lt;/tt>.&lt;/p>"/>
    <properties name="elementOwningRelationship" label="elementOwningRelationship" comment="&lt;p>The Relationship for which this Element is an &lt;tt>ownedRelatedElement&lt;/tt>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwningNamespace" label="elementOwningNamespace" comment="&lt;p>The Namespace that owns this Element, derived as the &lt;code>membershipOwningNamespace&lt;/code> of the &lt;code>owningMembership&lt;/code> of this Element, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwner" label="elementOwner" comment="&lt;p>The owner of this Element, derived as the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>owningRelationship&lt;/code> of this Element, if any.&lt;/p>"/>
    <properties name="elementOwnedElement" label="elementOwnedElement" comment="&lt;p>The Elements owned by this Element, derived as the &lt;tt>ownedRelatedElements&lt;/tt> of the &lt;tt>ownedRelationships&lt;/tt> of this Element.&lt;/p>&#xA;"/>
    <properties name="elementDocumentation" label="elementDocumentation" comment="&lt;p>The Documentation owned by this Element.&lt;/p>"/>
    <properties name="elementOwnedAnnotation" label="elementOwnedAnnotation" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Element that are Annotations, for which this Element is the &lt;code>annotatedElement&lt;/code>.&lt;/code>"/>
    <properties name="elementTextualRepresentation" label="elementTextualRepresentation" comment="&lt;p>The &lt;code>textualRepresentations&lt;/code> that annotate this Element.&lt;/p>"/>
    <properties name="verificationCaseUsageVerificationCaseDefinition" label="verificationCaseUsageVerificationCaseDefinition" comment="&lt;p>The VerificationCase that defines this VerificationCaseUsage.&lt;/p>"/>
    <properties name="verificationCaseUsageVerifiedRequirement" label="verificationCaseUsageVerifiedRequirement" comment="&lt;p>The RequirementUsages verified by this VerificationCaseUsage, derived as the &lt;code>verifiedRequirements&lt;/code> of all RequirementVerificationMemberships of the &lt;code>objectiveRequirement&lt;/code>.&lt;/p>"/>
    <properties name="portDefinitionConjugatedPortDefinition" label="portDefinitionConjugatedPortDefinition" comment="&lt;p>The ConjugatedPortDefinition that is conjugate to this PortDefinition.&lt;/p>"/>
    <properties name="expressionIsModelLevelEvaluable" label="expressionIsModelLevelEvaluable" comment="&lt;p>Whether this Expression meets the constraints necessary to be evaluated at &lt;em>model level&lt;/em>, that is, using metadata within the model.&lt;/p>"/>
    <properties name="expressionFunction" label="expressionFunction" comment="&lt;p>The Function that types this Expression.&lt;/p>&#xA;&#xA;&lt;p>This is the Function that types the Expression.&lt;/p>&#xA;"/>
    <properties name="expressionResult" label="expressionResult" comment="&lt;p>&lt;p>The &lt;code>result&lt;/code> parameter of the Expression, derived as the single &lt;code>parameter&lt;/code> of the Expression with direction &lt;code>out&lt;/code>. The result of an Expression must either be inherited from its &lt;code>function&lt;/code> or (directly or indirectly) redefine the &lt;code>result&lt;/code> parameter of its &lt;code>function&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwnedMemberFeature" label="featureMembershipOwnedMemberFeature" comment="&lt;p>The Feature that this FeatureMembership relates to its &lt;code>owningType&lt;/code>, making it an &lt;code>ownedFeature&lt;/code> of the &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="featureMembershipOwningType" label="featureMembershipOwningType" comment="&lt;p>The Type that owns this FeatureMembership.&lt;/p>"/>
    <properties name="renderingDefinitionRendering" label="renderingDefinitionRendering" comment="&lt;p>The &lt;code>usages&lt;/code> of a RenderingDefinition that are RenderingUsages.&lt;/p>"/>
    <properties name="constraintUsageConstraintDefinition" label="constraintUsageConstraintDefinition" comment="&lt;p>The (single) &lt;code>Predicate&lt;/code> that is the type of this &lt;code>ConstraintUsage&lt;/code>. Nominally, this will be a &lt;code>ConstraintDefinition&lt;/code>, but other kinds of &lt;code>Predicates&lt;/code> are also allowed, to permit use of &lt;code>Predicates&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="transitionUsageSource" label="transitionUsageSource" comment="&lt;p>The source &lt;code>ActionUsage&lt;/code> of this &lt;code>TransitionUsage&lt;/code>, which becomes the &lt;code>source&lt;/code> of the &lt;code>succession&lt;/code> for the &lt;code>TransitionUsage&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageTarget" label="transitionUsageTarget" comment="&lt;p>The target &lt;code>ActionUsage&lt;/code> of this &lt;code>TransitionUsage&lt;code>, which is the &lt;code>targetFeature&lt;/code> of the &lt;code>succession&lt;/code> for the &lt;code>TransitionUsage&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageTriggerAction" label="transitionUsageTriggerAction" comment="&lt;p>The &lt;code>AcceptActionUsages&lt;/code> that define the triggers of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = trigger&lt;/code>, which must all be &lt;code>AcceptActionUsages&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageGuardExpression" label="transitionUsageGuardExpression" comment="&lt;p>The &lt;code>Expressions&lt;/code> that define the guards of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = guard&lt;/code>, which must all be &lt;code>Expressions&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageEffectAction" label="transitionUsageEffectAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that define the effects of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = effect&lt;/code>, which must all be &lt;code>Expressions&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageSuccession" label="transitionUsageSuccession" comment="&lt;p>The &lt;code>Succession&lt;/code> that is the &lt;code>ownedFeature&lt;/code> of this &lt;code>TransitionUsage&lt;/code>, which, if the &lt;code>TransitionUsage&lt;/code> is triggered, asserts the temporal ordering of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionReqId" label="requirementDefinitionReqId" comment="&lt;p>An optional modeler-specified identifier for this RequirementDefinition (used, e.g., to link it to an original requirement text in some source document), derived as the &lt;code>modeledId&lt;/code> for the RequirementDefinition.&lt;/p>"/>
    <properties name="requirementDefinitionText" label="requirementDefinitionText" comment="&lt;p>An optional textual statement of the requirement represented by this RequirementDefinition, derived as the &lt;code>bodies&lt;/code> of the &lt;code>documentaryComments&lt;/code> of the RequirementDefinition.&lt;/p>&#xA;"/>
    <properties name="requirementDefinitionAssumedConstraint" label="requirementDefinitionAssumedConstraint" comment="&lt;p>The owned ConstraintUsages that represent assumptions of this RequirementDefinition, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the RequirementDefinition with &lt;code>kind&lt;/code> = &lt;code>assumption&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionRequiredConstraint" label="requirementDefinitionRequiredConstraint" comment="&lt;p>The owned ConstraintUsages that represent requirements of this RequirementDefinition, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the RequirementDefinition with &lt;code>kind&lt;/code> = &lt;code>requirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionSubjectParameter" label="requirementDefinitionSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this RequirementDefinition that is owned via a SubjectMembership, which must redefine, directly or indirectly, the &lt;code>subject&lt;/code> parameter of the base RequirementDefinition RequirementCheck from the Systems model library.&lt;/p>"/>
    <properties name="requirementDefinitionFramedConcern" label="requirementDefinitionFramedConcern" comment="&lt;p>The Concerns framed by this RequirementDefinition, derived as the &lt;code>ownedConcerns&lt;/code> of all &lt;code>FramedConcernMemberships&lt;/code> of the RequirementDefinition.&lt;/p>"/>
    <properties name="requirementDefinitionActorParameter" label="requirementDefinitionActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this RequirementDefinition that are owned via ActorMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>actors&lt;/code>&lt;/em> of the base RequirementDefinition &lt;em>RequirementCheck&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="requirementDefinitionStakeholderParameter" label="requirementDefinitionStakeholderParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this RequirementDefinition that are owned via StakeholderMemberships, which must subset, directly or indirectly, the PartUsage &lt;em>&lt;code>stakeholders&lt;/code>&lt;/em> of the base RequirementDefinition &lt;em>RequirementCheck&lt;/em> from the Systems model library.&lt;/p>"/>
    <properties name="literalIntegerValue" label="literalIntegerValue" comment="&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="occurrenceDefinitionIsIndividual" label="occurrenceDefinitionIsIndividual" comment="&lt;p>Whether this OccurrenceDefinition is constrained to represent single individual.&lt;/p>"/>
    <properties name="occurrenceDefinitionLifeClass" label="occurrenceDefinitionLifeClass" comment="&lt;p>If &lt;code>isIndividual&lt;/code> is true, a LifeClass that specializes this OccurrenceDefinition, restricting it to represent an individual.&lt;/p>"/>
    <properties name="concernUsageConcernDefinition" label="concernUsageConcernDefinition" comment="&lt;p>The ConcernDefinition that is the single type of this ConcernUsage.&lt;/p>"/>
    <properties name="calculationUsageCalculationDefinition" label="calculationUsageCalculationDefinition" comment="&lt;p>The &lt;ode>Function&lt;/code> that is the &lt;code>type&lt;/code> of this &lt;code>CalculationUsage&lt;/code>. Nominally, this would be a &lt;code>CalculationDefinition&lt;/code>, but a kernel &lt;code>Function&lt;/code> is also allowed, to permit use of &lt;code>Functions&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="ifActionUsageElseAction" label="ifActionUsageElseAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is to be performed if the result of the &lt;code>ifArgument&lt;/code> is false. It an the owned &lt;code>ActionUsage&lt;/code> that redefines the &lt;em>&lt;code>elseClause&lt;/code>&lt;/em> &lt;code>parameter&lt;/code> of the &lt;code>IfActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="ifActionUsageThenAction" label="ifActionUsageThenAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is to be performed if the result of the &lt;code>ifArgument&lt;/code> is true. It is an owned &lt;code>ActionUsage&lt;/code> that redefines the &lt;em>&lt;code>thenClause&lt;/code>&lt;/em> &lt;code>parameter&lt;code> of the &lt;code>IfActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="ifActionUsageIfArgument" label="ifActionUsageIfArgument" comment="&lt;p>The Expression whose result determines whether the &lt;code>thenAction&lt;/code> or (optionally) the &lt;code>elseAction&lt;/code> is performed. Derived as the &lt;code>value&lt;/code> Expression of the FeatureValue for the redefined &lt;em>&lt;code>ifTest&lt;/code>&lt;/em> parameter of the IfActionUsage.&lt;/p> &#xA;"/>
    <properties name="enumerationDefinitionEnumeratedValue" label="enumerationDefinitionEnumeratedValue" comment="&lt;p>An EnumerationUsage of this EnumerationDefinition with a fixed value, distinct from the value of all other &lt;code>enumerationValues&lt;/code>, which specifies one of the allowed instances of the EnumerationDefinition.&lt;/p>"/>
    <properties name="calculationDefinitionCalculation" label="calculationDefinitionCalculation" comment="&lt;p>The &lt;code>actions&lt;/code> of this &lt;code>CalculationDefinition&lt;/code> that are &lt;code>CalculationUsages&lt;/code>.&lt;/p>"/>
    <properties name="definitionIsVariation" label="definitionIsVariation" comment="&lt;p>Whether this Definition is for a variation point or not. If true, then all the &lt;code>memberships&lt;/code> of the Definition must be VariantMemberships.&lt;/p>"/>
    <properties name="definitionOwnedPort" label="definitionOwnedPort" comment="&lt;p>The PortUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionDirectedUsage" label="definitionDirectedUsage" comment="&lt;p>The &lt;code>usages&lt;/code> of this Definition that are &lt;code>directedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="definitionUsage" label="definitionUsage" comment="&lt;p>The Usages that are &lt;code>features&lt;/code> of this Definition (not necessarily owned).&lt;/p>"/>
    <properties name="definitionOwnedState" label="definitionOwnedState" comment="&lt;p>The StateUsages that are &lt;tt>ownedUsages&lt;/tt> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedConstraint" label="definitionOwnedConstraint" comment="&lt;p>The ConstraintUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p> &#xA;"/>
    <properties name="definitionOwnedTransition" label="definitionOwnedTransition" comment="&lt;p>The TransitionUsages that are &lt;tt>ownedUsages&lt;/tt> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedRequirement" label="definitionOwnedRequirement" comment="&lt;p>The RequirementUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedCalculation" label="definitionOwnedCalculation" comment="&lt;p>The CalculationUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionVariantMembership" label="definitionVariantMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this Definition that are VariantMemberships. If &lt;code>isVariation&lt;/code> = true, then this must be all &lt;code>ownedMemberships&lt;/code> of the Definition. If &lt;code>isVariation&lt;/code> = false, then &lt;code>variantMembership&lt;/code>must be empty.&lt;/p>"/>
    <properties name="definitionOwnedAnalysisCase" label="definitionOwnedAnalysisCase" comment="&lt;p>The AnalysisCaseUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionVariant" label="definitionVariant" comment="&lt;p>The Usages which represent the variants of this Definition as a variation point Definition, if &lt;code>isVariation&lt;/code> = true. If &lt;code>isVariation&lt;/code> = false, the there must be no &lt;code>variants&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedCase" label="definitionOwnedCase" comment="&lt;p>The CaseUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedReference" label="definitionOwnedReference" comment="&lt;p>The ReferenceUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedAction" label="definitionOwnedAction" comment="&lt;p>The ActionUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/code>"/>
    <properties name="definitionOwnedConnection" label="definitionOwnedConnection" comment="&lt;p>The ConnectorAsUsages that are &lt;code>ownedUsages&lt;/code> of this Definition. Note that this list includes BindingConnectorAsUsages and SuccessionAsUsages, even though these are ConnectorAsUsages but not ConnectionUsages.&lt;/p>"/>
    <properties name="definitionOwnedItem" label="definitionOwnedItem" comment="&lt;p>The ItemUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedPart" label="definitionOwnedPart" comment="&lt;p>The PartUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedInterface" label="definitionOwnedInterface" comment="&lt;p>The InterfaceUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedAttribute" label="definitionOwnedAttribute" comment="&lt;p>The AttributeUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;p>"/>
    <properties name="definitionOwnedView" label="definitionOwnedView" comment="&lt;p> The &lt;code>ownedUsages&lt;/code> of this Definition that are ViewUsages.&lt;/p>"/>
    <properties name="definitionOwnedViewpoint" label="definitionOwnedViewpoint" comment="&lt;p>The &lt;code>ownedUsages&lt;/code> of this Definition that are ViewpointUsages.&lt;/p>"/>
    <properties name="definitionOwnedRendering" label="definitionOwnedRendering" comment="&lt;p>The &lt;code>usages&lt;/code> of this Definition that are RenderingUsages.&lt;/p>"/>
    <properties name="definitionOwnedVerificationCase" label="definitionOwnedVerificationCase" comment="&lt;p>The &lt;code>ownedUsages&lt;/code> of this Definition that are VerificationCaseUsages.&lt;/p>"/>
    <properties name="definitionOwnedEnumeration" label="definitionOwnedEnumeration" comment="&lt;p>The EnumerationUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;p>"/>
    <properties name="definitionOwnedAllocation" label="definitionOwnedAllocation" comment="&lt;p>The AllocationUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedConcern" label="definitionOwnedConcern" comment="&lt;p>The ConcernUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedOccurrence" label="definitionOwnedOccurrence" comment="&lt;p>The OccurrenceUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedUseCase" label="definitionOwnedUseCase" comment="&lt;p>The UseCaseUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedFlow" label="definitionOwnedFlow" comment="&lt;p>The FlowConnectionUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedMetadata" label="definitionOwnedMetadata" comment="&lt;p>The MetadataUsages that are &lt;code>ownedUsages&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="definitionOwnedUsage" label="definitionOwnedUsage" comment="&lt;p>The Usages that are &lt;code>ownedFeatures&lt;/code> of this Definition.&lt;/p>"/>
    <properties name="itemUsageItemDefinition" label="itemUsageItemDefinition" comment="&lt;p>The Structures that are the &lt;code>definitions&lt;/code> of this ItemUsage. Nominally, these are ItemDefinitions, but other kinds of Kernel Structures are also allowed, to permit use of Structures from the Kernel Library.&lt;/p>"/>
    <properties name="specializationGeneral" label="specializationGeneral" comment="&lt;p>A Type with a superset of all instances of the &lt;code>specific&lt;/code> Type, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationSpecific" label="specializationSpecific" comment="&lt;p>A Type with a subset of all instances of the &lt;code>general&lt;/code> Type, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationOwningType" label="specializationOwningType" comment="&lt;p>The Type that is the &lt;code>specific&lt;/code> Type of this Specialization and owns it as its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="functionIsModelLevelEvaluable" label="functionIsModelLevelEvaluable" comment="&lt;p>Whether this Function can be used as the &lt;code>function&lt;/code> of a model-level evaluable InvocationExpression.&lt;/p>"/>
    <properties name="functionExpression" label="functionExpression" comment="&lt;p>The Expressions that are steps in the calculation of the &lt;code>result&lt;/code> of this Function.&lt;/p>&#xA;&#xA;&lt;p>The set of expressions that represent computational steps or parts of a system of equations within the Function.&lt;/p>&#xA;"/>
    <properties name="functionResult" label="functionResult" comment="&lt;p>The &lt;code>result&lt;/code> parameter of the Function, derived as the single &lt;code>parameter&lt;/code> of the Function with direction &lt;code>out&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The object or value that is the result of evaluating the Function.&lt;/p>"/>
    <properties name="parameterMembershipOwnedMemberParameter" label="parameterMembershipOwnedMemberParameter" comment="&lt;p>The Feature that is identified as a parameter by this ParameterMembership, which is always owned by the ParameterMembership.&lt;/p>&#xA;"/>
    <properties name="connectionUsageConnectionDefinition" label="connectionUsageConnectionDefinition" comment="&lt;p>The AssociationStructures that are the types of this ConnectionUsage. Nominally, these are ConnectionDefinitions, but other kinds of Kernel AssociationStructures are also allowed, to permit use of AssociationStructures from the Kernel Library.&lt;/p>"/>
    <properties name="forLoopActionUsageSeqArgument" label="forLoopActionUsageSeqArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result provides the sequence of values to which the &lt;code>loopVariable&lt;/code> is set for each iterative performance of the &lt;code>bodyAction&lt;/code>. It is the owned &lt;code>parameter&lt;/code> that redefines &lt;em>&lt;code>ForLoopAction::body&lt;/code>&lt;/em>.&lt;/p>&#xA;"/>
    <properties name="forLoopActionUsageLoopVariable" label="forLoopActionUsageLoopVariable" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of this &lt;co>ForLoopActionUsage&lt;/code> that acts as the loop variable, which is assigned the successive values of the input sequence on each iteration. It is the &lt;code>ownedFeature&lt;/code> that redefines &lt;em>&lt;code>ForLoopAction::var&lt;/code>&lt;/em>.&lt;/p> "/>
    <properties name="variantMembershipOwnedVariantUsage" label="variantMembershipOwnedVariantUsage" comment="&lt;p>The Usage that represents a variant in the context of the &lt;code>owningVariationDefinition&lt;/code> or &lt;code>owningVariationUsage&lt;/code>.&lt;/p>"/>
    <properties name="metadataAccessExpressionReferencedElement" label="metadataAccessExpressionReferencedElement" comment="&lt;p> The Element whose metadata is being accessed.&lt;/p>"/>
    <properties name="triggerInvocationExpressionKind" label="triggerInvocationExpressionKind" comment="&lt;p>Indicates which of the Functions from the Kernel &lt;em>Triggers&lt;/em> package is to be invoked by this TriggerInvocationExpression.&lt;/p>"/>
    <properties name="assignmentActionUsageTargetArgument" label="assignmentActionUsageTargetArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose value is an occurrence in the domain of the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>, for which the value of the &lt;code>referent&lt;/code> will be set to the result of the &lt;code>valueExpression&lt;/code> by this &lt;code>AssignmentActionUsage&lt;/code>.&lt;/p>"/>
    <properties name="assignmentActionUsageValueExpression" label="assignmentActionUsageValueExpression" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result is to be assigned to the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="assignmentActionUsageReferent" label="assignmentActionUsageReferent" comment="&lt;p>The &lt;code>Feature&lt;/code> whose value is to be set.&lt;/p>"/>
    <properties name="commentLocale" label="commentLocale" comment="&lt;p>Identification of the language of the &lt;code>body&lt;/code> text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format &lt;code>[language[_territory][.codeset][@modifier]]&lt;/code>.&lt;/p>"/>
    <properties name="commentBody" label="commentBody" comment="&lt;p>The annotation text for the Comment.&lt;/p>&#xA;"/>
    <properties name="viewDefinitionView" label="viewDefinitionView" comment="&lt;p>The &lt;code>usages&lt;/code> of this ViewDefinition that are ViewUsages.&lt;/p>"/>
    <properties name="viewDefinitionSatisfiedViewpoint" label="viewDefinitionSatisfiedViewpoint" comment="&lt;p>The &lt;code>ownedUsages&lt;/code> of this ViewDefinition that are ViewpointUsages for viewpoints satisfied by the ViewDefinition.&lt;/p>"/>
    <properties name="viewDefinitionViewRendering" label="viewDefinitionViewRendering" comment="&lt;p>The RenderingUsage to be used to render views defined by this ViewDefinition. Derived as the &lt;code>referencedRendering&lt;/code> of the ViewRenderingMembership of the ViewDefinition. A ViewDefinition may have at most one.&lt;p>"/>
    <properties name="viewDefinitionViewCondition" label="viewDefinitionViewCondition" comment="&lt;p>The Expressions related to this ViewDefinition by ElementFilterMemberships, which specify conditions on Elements to be rendered in a view.&lt;/p>"/>
    <properties name="actionUsageActionDefinition" label="actionUsageActionDefinition" comment="&lt;p>The Behaviors that are the types of this ActionUsage. Nominally, these would be ActionDefinitions, but other kinds of Kernel Behaviors are also allowed, to permit use of Behaviors from the Kernel Library.&lt;/p> &#xA;"/>
    <properties name="transitionFeatureMembershipKind" label="transitionFeatureMembershipKind" comment="&lt;p>Whether this &lt;code>TransitionFeatureMembership &lt;/code> is for a trigger, guard or effect.&lt;/p>"/>
    <properties name="transitionFeatureMembershipTransitionFeature" label="transitionFeatureMembershipTransitionFeature" comment="&lt;p>The &lt;codeStep&lt;/code> that is the &lt;cpde>ownedMemberFeature&lt;/code> of this &lt;code>TransitionFeatureMembership&lt;/code>.&lt;/p>"/>
    <properties name="useCaseDefinitionIncludedUseCase" label="useCaseDefinitionIncludedUseCase" comment="&lt;p>The UseCaseUsages that are included by this UseCaseDefinition. Derived as the &lt;code>includedUseCase&lt;/code> of the IncludeUseCaseUsages owned by this UseCaseDefinition.&lt;/p>"/>
    <properties name="typeIsAbstract" label="typeIsAbstract" comment="&lt;p>Indicates whether instances of this Type must also be instances of at least one of its specialized Types.&lt;/p>&#xA;"/>
    <properties name="typeIsSufficient" label="typeIsSufficient" comment="&lt;p>Whether all things that meet the classification conditions of this Type must be classified by the Type.&lt;/p>&#xA;&#xA;&lt;p>(A Type&amp;nbsp;gives conditions that must be met by whatever it classifies, but when &lt;code>isSufficient&lt;/code> is false, things may meet those conditions but still not be classified by the Type. For example, a Type &lt;code>&lt;em>Car&lt;/em>&lt;/code> that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would need to be cars. However, if the type &lt;code>&lt;em>Car&lt;/em>&lt;/code> were sufficient, it would classify all four-wheeled things.)&lt;/p>&#xA;"/>
    <properties name="typeIsConjugated" label="typeIsConjugated" comment="&lt;p>Indicates whether this Type has an &lt;code>ownedConjugator&lt;/code>. (See Conjugation.)&lt;/p>&#xA;"/>
    <properties name="typeOwnedSpecialization" label="typeOwnedSpecialization" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Specializations, for which the Type is the &lt;code>specific&lt;/code> Type.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeatureMembership" label="typeOwnedFeatureMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this Type that are FeatureMemberships, for which the Type is the &lt;code>owningType&lt;/code>. Each such FeatureMembership identifies an &lt;code>ownedFeature&lt;/code> of the Type.&lt;/p>&#xA;"/>
    <properties name="typeFeature" label="typeFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>featureMemberships&lt;/code> of this Type.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeature" label="typeOwnedFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>ownedFeatureMemberships&lt;/code> of this Type.&lt;/code>&#xA;"/>
    <properties name="typeInput" label="typeInput" comment="&lt;p>All &lt;code>features&lt;/code> related to this Type by FeatureMemberships that have &lt;code>direction&lt;/code> &lt;code>in&lt;code> or &lt;code>inout&lt;code>.&lt;/p>&#xA;"/>
    <properties name="typeOutput" label="typeOutput" comment="&lt;p>All &lt;code>features&lt;/code> related to this Type by FeatureMemberships that have &lt;code>direction&lt;/code> &lt;code>out&lt;code> or &lt;code>inout&lt;code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedMembership" label="typeInheritedMembership" comment="&lt;p>All Memberships inherited by this Type via Generalization or Conjugation. These are included in the derived union for the &lt;code>memberships&lt;/code> of the Type.&lt;/p>"/>
    <properties name="typeEndFeature" label="typeEndFeature" comment="&lt;p>All &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> with &lt;code>isEnd = true&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedEndFeature" label="typeOwnedEndFeature" comment="&lt;p>All &lt;code>endFeatures&lt;/code> of this Type that are &lt;code>ownedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedConjugator" label="typeOwnedConjugator" comment="&lt;p>A Conjugation owned by this Type for which the Type is the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedFeature" label="typeInheritedFeature" comment="&lt;p>All the &lt;code>memberFeatures&lt;/code> of the &lt;code>inheritedMemberships&lt;/code> of this Type.&lt;/p>&#xA;"/>
    <properties name="typeMultiplicity" label="typeMultiplicity" comment="&lt;p>An &lt;code>ownedMember&lt;/code> of this &lt;code>Type&lt;/code> that is a &lt;code>Multiplicity&lt;/code>, which constraints the cardinality of the &lt;code>Type&lt;/code>. If there is no such &lt;code>ownedMember&lt;/p>, then the cardinality of this &lt;code>Type&lt;/code> is constrained by all the &lt;code>Multiplicity&lt;/code> constraints applicable to any direct supertypes.&lt;/p>"/>
    <properties name="typeUnioningType" label="typeUnioningType" comment="&lt;p>The interpretations of a Type with code>unioningTypes&lt;/code> are asserted to be the same as those of all the &lt;code>unioningTypes&lt;/code> together, which are the Types  derived from the &lt;code>unioningType&lt;/code> of the &lt;code>ownedUnionings&lt;/code> of this Type.  For example, a Classifier for people might be the union of Classifiers for all the sexes. Similarly, a feature for people's children might be the union of features dividing them in the same ways as people in general.&lt;/p>"/>
    <properties name="typeOwnedIntersecting" label="typeOwnedIntersecting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Intersectings, have the Type as their &lt;code>typeIntersected&lt;/code>.&lt;/p>"/>
    <properties name="typeIntersectingType" label="typeIntersectingType" comment="&lt;p>The interpretations of a Type with code>intersectingTypes&lt;/code> are asserted to be those in common among the &lt;code>intersectingTypes&lt;/code>, which are the Types derived from the &lt;code>intersectingType&lt;/code> of the &lt;code>ownedIntersectings&lt;/code> of this Type.  For example, a Classifier might be an intersection of Classifiers for people of a particular sex and of a particular nationality.  Similarly, a feature for people's children of a particular sex might be the intersection of a feature for their children and a Classifier for people of that sex (because the interpretations of the children feature that identify those of that sex are also interpretations of the Classifier for that sex).&lt;p>"/>
    <properties name="typeOwnedUnioning" label="typeOwnedUnioning" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Unionings, having the Type as their &lt;code>typeUnioned&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedDisjoining" label="typeOwnedDisjoining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Disjoinings, for which the Type is the &lt;code>typeDisjoined&lt;/code> Type.&lt;/p>"/>
    <properties name="typeFeatureMembership" label="typeFeatureMembership" comment="&lt;p>The FeatureMemberships for &lt;code>features&lt;/code> of this Type, which include all &lt;code>ownedFeatureMemberships&lt;/code> and those &lt;code>inheritedMemberships&lt;/code> that are FeatureMemberships (but does &lt;em>not&lt;/em> include any &lt;code>importedMemberships&lt;/code>).&lt;/p>"/>
    <properties name="typeDifferencingType" label="typeDifferencingType" comment="&lt;p>The interpretations of a Type with &lt;code>differencingTypes&lt;/code> are asserted to be those of the first of those Types, but not including those of the remaining types. For example, a Classifier might be the difference of a Classifier for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a Classifier for people of a particular sex, identifying their children not of that sex (because the interpretations of the children feature that identify those of that sex are also interpretations of the Classifier for that sex).&lt;p>"/>
    <properties name="typeOwnedDifferencing" label="typeOwnedDifferencing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Differencings, having this Type as their &lt;code>typeDifferenced&lt;/code>.&lt;/p>"/>
    <properties name="typeDirectedFeature" label="typeDirectedFeature" comment="&lt;p>The &lt;code>features&lt;/code> of this Type that have a non-null &lt;code>direction&lt;/code>.&lt;/p>"/>
    <properties name="requirementVerificationMembershipOwnedRequirement" label="requirementVerificationMembershipOwnedRequirement" comment="&lt;p>The owned Requirement that acts as the &lt;code>constraint&lt;/code> for this RequirementVerificationMembership. This will either be the &lt;code>verifiedRequirement&lt;/code>, or it will subset the &lt;code>verifiedRequirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementVerificationMembershipVerifiedRequirement" label="requirementVerificationMembershipVerifiedRequirement" comment="&lt;p> The RequirementUsage that is identified as being verified. It is the &lt;code>referencedConstraint&lt;/code> of the RequirementVerificationMembership considered as a RequirementConstraintMembership, which must be a RequirementUsage.&lt;/p>"/>
    <properties name="operatorExpressionOperator" label="operatorExpressionOperator" comment="&lt;p>An operator symbol that names a corresponding Function from one of the standard Function packages from the Kernel Model Library .&lt;/p>"/>
    <properties name="operatorExpressionOperand" label="operatorExpressionOperand"/>
    <properties name="includeUseCaseUsageUseCaseIncluded" label="includeUseCaseUsageUseCaseIncluded" comment="&lt;p>The UseCaseUsage to be included by this IncludeUseCaseUsage. It is the &lt;code>subsettedFeature&lt;/code> of the first owned Subsetting Relationship of the IncludeUseCaseUsage.&lt;/p> &#xA;"/>
    <properties name="performActionUsagePerformedAction" label="performActionUsagePerformedAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> to be performed by this &lt;code>PerformedActionUsage&lt;/code>. It is the &lt;code>eventOccurrence&lt;/code> of the &lt;code>PerformActionUsage&lt;/code> considered as an &lt;code>EventOccurrenceUsage&lt;/code>, which must be an &lt;code>ActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="viewpointDefinitionViewpointStakeholder" label="viewpointDefinitionViewpointStakeholder" comment="&lt;p>The features that identify the stakeholders with concerns framed by this ViewpointDefinition, derived as the owned and inherited &lt;code>stakeholderParameters&lt;/code> of the &lt;code>framedConcerns&lt;/code> of this ViewpointDefinition.&lt;/p>"/>
    <properties name="whileLoopActionUsageWhileArgument" label="whileLoopActionUsageWhileArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result, if true, determines that the &lt;code>bodyAction&lt;/code> should continue to be performed. It the owned &lt;code>parameter&lt;/code> that redefines &lt;em>&lt;code>WhileLoopAction::whileTest&lt;/code>&lt;/em>.&lt;/p> &#xA;"/>
    <properties name="whileLoopActionUsageUntilArgument" label="whileLoopActionUsageUntilArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result, if false, determines that the &lt;code>bodyAction&lt;/code> should continue to be performed. It is the owned &lt;code>parameter&lt;/code> that redefines &lt;em>&lt;code>WhileLoopAction::untilTest&lt;/code>&lt;em>.&lt;/p> &#xA;"/>
    <properties name="invariantIsNegated" label="invariantIsNegated" comment="&lt;p>Whether this Invariant is asserted to be false rather than true.&lt;/p>"/>
    <properties name="featureInvertingFeatureInverted" label="featureInvertingFeatureInverted" comment="&lt;p>Feature that is an the inverse of &lt;code>invertingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingInvertingFeature" label="featureInvertingInvertingFeature" comment="&lt;p>Feature that is an inverse of &lt;code>invertedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingOwningFeature" label="featureInvertingOwningFeature" comment="&lt;p>A &lt;code>featureInverted&lt;/code> that is also an &lt;code>owningRelatedElement&lt;code>.&lt;/p>"/>
    <properties name="referenceSubsettingReferencedFeature" label="referenceSubsettingReferencedFeature" comment="&lt;p>The Feature that is referenced by the &lt;code>referencingFeature&lt;/code> of this ReferenceSubsetting.&lt;/p>"/>
    <properties name="referenceSubsettingReferencingFeature" label="referenceSubsettingReferencingFeature" comment="&lt;p>The Feature that owns this ReferenceSubsetting relationship, which is also its &lt;code>subsettingFeature&lt;/code>.&lt;/p>"/>
    <properties name="actorMembershipOwnedActorParameter" label="actorMembershipOwnedActorParameter" comment="&lt;p>The PartUsage specifying the actor.&lt;/p>"/>
    <properties name="connectorIsDirected" label="connectorIsDirected" comment="&lt;p>For a binary Connector, whether or not the Connector should be considered to have a direction from &lt;code>source&lt;/code> to &lt;code>target&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorRelatedFeature" label="connectorRelatedFeature" comment="&lt;p>The Features that are related by this Connector considered as a Relationship and restrict the links it identifies, derived as the referenced Features of the &lt;code>connectorEnds&lt;/code> of the Connector.&lt;/p>&#xA;"/>
    <properties name="connectorAssociation" label="connectorAssociation" comment="&lt;p>The Associations that type the Connector.&lt;/p>&#xA;"/>
    <properties name="connectorConnectorEnd" label="connectorConnectorEnd" comment="&lt;p>The &lt;code>endFeatures&lt;/code> of a Connector, which redefine the &lt;code>endFeatures&lt;code> of the &lt;code>associations&lt;/code> of the Connector. The &lt;code>connectorEnds&lt;/code> determine via ReferenceSubsetting Relationships which Features are related by the Connector.&lt;/p>"/>
    <properties name="connectorSourceFeature" label="connectorSourceFeature" comment="&lt;p>The source &lt;code>relatedFeature&lt;/code> for this Connector. It is  derived as the first &lt;code>relatedFeature&lt;/code>.&lt;/p>"/>
    <properties name="connectorTargetFeature" label="connectorTargetFeature" comment="&lt;p>The target &lt;code>relatedFeatures&lt;/code> for this Connector. This includes all the &lt;code>relatedFeatures&lt;/code> other than the &lt;code>sourceFeature&lt;/code>.&lt;/p>"/>
    <properties name="associationRelatedType" label="associationRelatedType" comment="&lt;p>The &lt;code>types&lt;/code> of the &lt;code>associationEnds&lt;/code> of the Association, which are the &lt;code>relatedElements&lt;/code> of the Association considered as a Relationship.&lt;/p>&#xA;"/>
    <properties name="associationSourceType" label="associationSourceType" comment="&lt;p>The source &lt;code>relatedType&lt;/code> for this Association. It is the first &lt;code>relatedType&lt;/code> of the Association.&lt;/p>&#xA;"/>
    <properties name="associationTargetType" label="associationTargetType" comment="&lt;p>The target &lt;code>relatedTypes&lt;/code> for this Association. This includes all the &lt;code>relatedTypes&lt;/code> other than the &lt;code>sourceType&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="associationAssociationEnd" label="associationAssociationEnd" comment="&lt;p>The &lt;code>features&lt;/code> of the Association that identify the things that can be related by it. A concrete Association must have at least two &lt;code>associationEnds&lt;/code>. When it has exactly two, the Association is called a &lt;em>binary&lt;/em> Association.&lt;/p> &#xA;&#xA;&lt;p>The ends of the Association determine which elements are eligible to be related by instances of the Association.&lt;/p>&#xA;"/>
    <properties name="unioningUnioningType" label="unioningUnioningType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeUnioned&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>"/>
    <properties name="unioningTypeUnioned" label="unioningTypeUnioned" comment="&lt;p>Type with interpretations partly determined by &lt;code>unioningType&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>"/>
    <properties name="dependencyClient" label="dependencyClient" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> dependent on the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>"/>
    <properties name="dependencySupplier" label="dependencySupplier" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> on which the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> depend in some respect.&lt;/p>"/>
    <properties name="viewUsageViewDefinition" label="viewUsageViewDefinition" comment="&lt;p>The definition of this ViewUsage.&lt;/p>"/>
    <properties name="viewUsageSatisfiedViewpoint" label="viewUsageSatisfiedViewpoint" comment="&lt;p>The &lt;code>nestedUsages&lt;/code> of this ViewUsage that are ViewpointUsages for (additional) viewpoints satisfied by the ViewUsage.&lt;/p>"/>
    <properties name="viewUsageExposedElement" label="viewUsageExposedElement" comment="&lt;p>The Elements that are exposed by this ViewUsage, derived as those &lt;code>memberElements&lt;/code> of the imported Memberships from all the Expose Relationships that meet all the owned and inherited &lt;code>viewConditions&lt;/code>.&lt;/p>"/>
    <properties name="viewUsageViewRendering" label="viewUsageViewRendering" comment="&lt;p>The RenderingUsage to be used to render views defined by this ViewUsage. Derived as the &lt;code>referencedRendering&lt;/code> of the ViewRenderingMembership of the ViewUsage. A ViewUsage may have at most one.&lt;p>"/>
    <properties name="viewUsageViewCondition" label="viewUsageViewCondition" comment="&lt;p>The Expressions related to this ViewUsage by ElementFilterMemberships, which specify conditions on Elements to be rendered in a view.&lt;/p>"/>
  </vocabularies>
  <vocabularies namespaceURI="https://www.omg.org/spec/KerML/20230201/vocab#" label="KerML Vocabulary" preferredNamespacePrefix="kerml_vocab">
    <classes name="Annotation" label="Annotation" comment="&lt;p>An Annotation is a Relationship between an AnnotatingElement and the Element that is annotated by that AnnotatingElement.&lt;/p>&#xA;"/>
    <classes name="Relationship" label="Relationship" comment="&lt;p>A &lt;code>Relationship&lt;/code> is an &lt;code>Element&lt;/code> that relates other &lt;code>Element&lt;s/code>. Some of its &lt;code>relatedElements&lt;/code> may be owned, in which case those &lt;code>ownedRelatedElements&lt;/code> will be deleted from a model if their &lt;code>owningRelationship&lt;/code> is. A &lt;code>Relationship&lt;/code> may also be owned by another &lt;code>Element&lt;/code>, in which case the &lt;code>ownedRelatedElements&lt;/code> of the &lt;code>Relationship&lt;/code> are also considered to be transitively owned by the &lt;code>owningRelatedElement&lt;/code> of the Relationship.&lt;/p>&#xA;&#xA;&lt;p>The &lt;code>relatedElements&lt;/code> of a Relationship are divided into &lt;code>source&lt;/code> and &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. The &lt;code>Relationship&lt;/code> is considered to be directed from the &lt;code>source&lt;/code> to the &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. An undirected &lt;code>Relationship&lt;/code> may have either all &lt;code>source&lt;/code> or all &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &amp;quot;relationship &lt;code>Element&lt;/code>&amp;quot; in the abstract syntax is generically any &lt;code>Element&lt;/code> that is an instance of either &lt;code>Relationship&lt;/code> or a direct or indirect specialization of &lt;code>Relationship&lt;/code>. Any other kind of &lt;code>Element&lt;/code> is a &amp;quot;non-relationship &lt;code>Element&lt;/code>&amp;quot;. It is a convention of that non-relationship &lt;code>Elements&lt;/code> are &lt;em>only&lt;/em> related via reified relationship &lt;code>Elements&lt;/code>. Any meta-associations directly between non-relationship &lt;code>Elements&lt;/code> must be derived from underlying reified &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;relatedElement = source->union(target)"/>
    <classes name="Element" label="Element" comment="&lt;p>An &lt;code>Element&lt;/code> is a constituent of a model that is uniquely identified relative to all other &lt;code>Elements&lt;/code>. It can have &lt;code>Relationships&lt;/code> with other &lt;code>Elements&lt;/code>. Some of these &lt;code>Relationships&lt;/code> might imply ownership of other &lt;code>Elements&lt;/code>, which means that if an &lt;code>Element&lt;/code> is deleted from a model, then so are all the &lt;code>Elements&lt;/code> that it owns.&lt;/p>&#xA;&#xA;ownedElement = ownedRelationship.ownedRelatedElement&#xA;owner = owningRelationship.owningRelatedElement&#xA;qualifiedName =&#xA;    if owningNamespace = null then null&#xA;    else if owningNamespace.owner = null then escapedName()&#xA;    else if owningNamespace.qualifiedName = null then null&#xA;    else owningNamespace.qualifiedName + '::' + escapedName()&#xA;    endif endif endif&#xA;documentation = ownedElement->selectByKind(Documentation)&#xA;ownedAnnotation = ownedRelationship->selectByKind(Annotation)->&#xA;    select(a | a.annotatedElement = self)&#xA;name = effectiveName()&#xA;ownedRelationship->exists(isImplied) implies isImpliedIncluded&#xA;isLibraryElement = libraryNamespace() &lt;>null&#xA;&#xA;shortName = effectiveShortName()"/>
    <classes name="OwningMembership" label="OwningMembership" comment="&lt;p>An OwningMembership is a Membership that owns its &lt;code>memberElement&lt;/code> as a &lt;code>ownedRelatedElement&lt;/code>. The &lt;code>ownedMemberElementM&lt;/code> becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>.&#xA;ownedMemberName = ownedMemberElement.name&#xA;ownedMemberShortName = ownedMemberElement.shortName"/>
    <classes name="Membership" label="Membership" comment="&lt;p>Membership is a Relationship between a Namespace and an Element that indicates the Element is a &lt;code>member&lt;/code> of (i.e., is contained in) the Namespace. Any &lt;code>memberNames&lt;/code> specify how the &lt;code>memberElement&lt;/code> is identified in the Namespace and the &lt;code>visibility&lt;/code> specifies whether or not the &lt;code>memberElement&lt;/code> is publicly visible from outside the Namespace.&lt;/p>&#xA;&#xA;&lt;p>If a Membership is an OwningMembership, then it owns its &lt;code>memberElement&lt;/code>, which becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>. Otherwise, the &lt;code>memberNames&lt;/code> of a Membership are effectively aliases within the &lt;code>membershipOwningNamespace&lt;/code> for an Element with a separate OwningMembership in the same or a different Namespace.&lt;p>&#xA;"/>
    <classes name="Namespace" label="Namespace" comment="&lt;p>A &lt;code>Namespace&lt;/code> is an &lt;code>Element&lt;/code> that contains other &lt;code>Element&lt;/code>, known as its &lt;code>members&lt;/code>, via &lt;code>Membership&lt;/code> &lt;code>Relationships&lt;/code> with those &lt;code>Elements&lt;/code>. The &lt;code>members&lt;/code> of a &lt;code>Namespace&lt;/code> may be owned by the &lt;code>Namespace&lt;/code>, aliased in the &lt;code>Namespace&lt;/code>, or imported into the &lt;code>Namespace&lt;/code> via &lt;code>Import&lt;/code> &lt;code>Relationships&lt;/code> with other &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Namespace&lt;/code> can provide names for its &lt;code>members&lt;/code> via the &lt;code>memberNames&lt;/code> and &lt;code>memberShortNames&lt;/code> specified by the &lt;code>Memberships&lt;/code> in the &lt;code>Namespace&lt;/code>. If a &lt;code>Membership&lt;/code> specifies a &lt;code>memberName&lt;/code> and/or &lt;code>memberShortName&lt;/code>, then that those are names of the corresponding &lt;code>memberElement&lt;/code> relative to the &lt;code>Namespace&lt;/code>. For an &lt;code>OwningMembership&lt;/code>, the &lt;code>owningMemberName&lt;/code> and &lt;code>owningMemberShortName&lt;/code> are given by the &lt;code>Element&lt;/code> &lt;code>name&lt;/code> and &lt;code>shortName&lt;/code>. Note that the same &lt;code>Element&lt;/code> may be the &lt;code>memberElement&lt;/code> of multiple &lt;code>Memberships&lt;/code> in a &lt;code>Namespace&lt;/code> (though it may be owned at most once), each of which may define a separate alias for the &lt;code>Element&lt;/code> relative to the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;membership->forAll(m1 | &#xA;    membership->forAll(m2 | &#xA;        m1 &lt;> m2 implies m1.isDistinguishableFrom(m2)))&#xA;member = membership.memberElement&#xA;ownedMember = ownedMembership->selectByKind(OwningMembership).ownedMemberElement&#xA;importedMembership = importedMemberships(Set{})&#xA;ownedImport = ownedRelationship->selectByKind(Import)&#xA;ownedMembership = ownedRelationship->selectByKind(Membership)"/>
    <classes name="Import" label="Import" comment="&lt;p>An Import is an Relationship between its &lt;code>importOwningNamespace&lt;/code> and either a Membership (for a MembershipImport) or another Namespace (for a NamespaceImport), which determines a set of Memberships that become &lt;code>importedMemberships&lt;/code> of the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isImportAll = false&lt;/code> (the default), then only public Memberships are considered &amp;quot;visible&amp;quot;. If &lt;code>isImportAll = true&lt;/code>, then all Memberships are considered &amp;quot;visible&amp;quot;, regardless of their declared &lt;code>visibility&lt;/code>. If &lt;code>isRecursive = true&lt;/code>, then visible Memberships are also recursively imported from owned sub-Namespaces.&lt;/p>&#xA;&#xA;"/>
    <classes name="Documentation" label="Documentation" comment="&lt;p>Documentation is a Comment that specifically documents a &lt;code>documentedElement&lt;/code>, which must be its &lt;code>owner&lt;/code>.&lt;/p>"/>
    <classes name="Comment" label="Comment" comment="&lt;p>A Comment is an AnnotatingElement whose &lt;code>body&lt;/code> in some way describes its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="AnnotatingElement" label="AnnotatingElement" comment="&lt;p>An AnnotatingElement is an Element that provides additional description of or metadata on some other Element. An AnnotatingElement is attached to its &lt;code>annotatedElement&lt;/code> by an Annotation Relationship.&lt;/p>&#xA;&#xA;annotatedElement = &#xA; if annotation->notEmpty() then annotation.annotatedElement&#xA; else owningNamespace endif"/>
    <classes name="TextualRepresentation" label="TextualRepresentation" comment="&lt;p>A TextualRepresentation is an AnnotatingElement whose &lt;code>body&lt;/code> represents the &lt;code>representedElement&lt;/code> in a given &lt;code>language&lt;/code>. The &lt;code>representedElement&lt;/code> must be the &lt;code>owner&lt;/code> of the TextualRepresentation. The named &lt;code>language&lt;/code> can be a natural language, in which case the &lt;code>body&lt;/code> is an informal representation, or an artifical language, in which case the &lt;code>body&lt;/code> is expected to be a formal, machine-parsable representation.&lt;/p>&#xA;&#xA;&lt;p>If the named &lt;code>language&lt;/code> of a TextualRepresentation is machine-parsable, then the &lt;code>body&lt;/code> text should be legal input text as defined for that &lt;code>language&lt;/code>. The interpretation of the named language string shall be case insensitive. The following &lt;code>language&lt;/code> names are defined to correspond to the given standard languages:&lt;/p>&#xA;&#xA;&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; width=&quot;498&quot;>&#xA;&#x9;&lt;thead>&#xA;&#x9;&lt;/thead>&#xA;&#x9;&lt;tbody>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>kerml&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Kernel Modeling Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>ocl&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Object Constraint Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>alf&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Action Language for fUML&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&lt;/tbody>&#xA;&lt;/table>&#xA;&#xA;&lt;p>Other specifications may define specific &lt;code>language&lt;/code> strings, other than those shown in&amp;nbsp;&lt;mms-view-link mms-doc-id=&quot;_19_0_4_12e503d9_1655498859928_646482_53332&quot; mms-element-id=&quot;MMS_1656305537944_6a3ca48e-424a-4a4d-8ce2-56df128ebabe&quot; mms-pe-id=&quot;_hidden_MMS_1656305558930_8d3925ff-003f-4024-a594-14317550f480_pei&quot;>[cf:Standard Language Names.vlink]&lt;/mms-view-link>, to be used to indicate the use of languages from those specifications in KerML TextualRepresentations.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>language&lt;/code> of a TextualRepresentation is &amp;quot;&lt;code>kerml&lt;/code>&amp;quot;, then the &lt;code>body&lt;/code> text shall be a legal representation of the &lt;code>representedElement&lt;/code> in the KerML textual concrete syntax. A conforming tool can use such a TextualRepresentation Annotation to record the original KerML concrete syntax text from which an Element was parsed. In this case, it is a tool responsibility to ensure that the &lt;code>body&lt;/code> of the TextualRepresentation remains correct (or the Annotation is removed) if the annotated Element changes other than by re-parsing the &lt;code>body&lt;/code> text.&lt;/p>&#xA;&#xA;&lt;p>An Element with a TextualRepresentation in a language other than KerML is essentially a semantically &amp;quot;opaque&amp;quot; Element specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.&lt;/p>&#xA;"/>
    <classes name="NamespaceImport" label="NamespaceImport" comment="&lt;p>A NamespaceImport is an Import that imports Memberships from its &lt;code>importedNamespace&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code> isRecursive = false&lt;/code>, then only the visible Memberships of the &lt;code>importOwningNamespace&lt;/code> are imported. If &lt;code> isRecursive = true&lt;/code>, then, in addition, Memberships are recursively imported from any &lt;code>ownedMembers&lt;/code> of the &lt;code>importedNamespace&lt;/code> that are Namespaces.&lt;/p>&#xA;importedElement = importedNamespace"/>
    <classes name="MembershipImport" label="MembershipImport" comment="&lt;p>A MembershipImport is an Import that imports its &lt;code>importedMembership&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isRecursive = true&lt;/code> and the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code> is a Namespace, then the equivalent of a recursive NamespaceImport is also performed on that Namespace.&lt;/p>&#xA;importedElement = importedMembership.memberElement"/>
    <classes name="Dependency" label="Dependency" comment="&lt;p>A &lt;code>Dependency&lt;/code> is a &lt;code>Relationship&lt;/code> that indicates that one or more &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> require one more &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> for their complete specification. In general, this means that a change to one of the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> may necessitate a change to, or re-specification of, the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Note that a &lt;code>Dependency&lt;/code> is entirely a model-level &lt;code>Relationship&lt;/code>, without instance-level semantics.&lt;/p>"/>
    <classes name="TypeFeaturing" label="TypeFeaturing" comment="&lt;p>A TypeFeaturing is a Featuring Relationship in which the &lt;code>featureOfType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featuringType&lt;/code> is the target. A TypeFeaturing may be owned by its &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <classes name="Featuring" label="Featuring" comment="&lt;p>Featuring is a Relationship between a Type and a Feature that is featured by that Type. Every instance in the domain of the &lt;code>feature&lt;/code> must be classified by the &lt;code>type&lt;/code>. This means that sequences that are classified by the &lt;code>feature&lt;/code> must have a prefix subsequence that is classified by the &lt;code>type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Featuring is abstract and does not commit to which of &lt;code>feature&lt;/code> or &lt;code>type&lt;/code> are the source or target. This commitment is made in the subclasses of Featuring, TypeFeaturing and FeatureMembership, which are directed differently.&lt;/p>"/>
    <classes name="Type" label="Type" comment="&lt;p>A Type is a Namespace that is the most general kind of Element supporting the semantics of classification. A Type may be a Classifier or a Feature, defining conditions on what is classified by the Type (see also the description of &lt;code>isSufficient&lt;/code>).&lt;/p>&#xA;&#xA;ownedSpecialization = ownedRelationship->selectByKind(Specialization)->&#xA;    select(g | g.special = self)&#xA;    &#xA;multiplicity = &#xA;    let ownedMultiplicities: Sequence(Multiplicity) =&#xA;        ownedMember->selectByKind(Multiplicity) in&#xA;    if ownedMultiplicities->notEmpty() then &#xA;        ownedMultiplicities->first()&#xA;    else &#xA;        let inheritedMultiplicities: Sequence(Multiplicity) =&#xA;            ownedSpecialization.general.multiplicity in&#xA;        if inheritedMultiplicities->notEmpty() then&#xA;            inheritedMultiplicities->first()&#xA;        endif&#xA;    endif&#xA;ownedFeatureMembership = ownedRelationship->selectByKind(FeatureMembership)&#xA;let ownedConjugators: Sequence(Conjugator) = &#xA;    ownedRelationship->selectByKind(Conjugation) in&#xA;    ownedConjugator = &#xA;        if ownedConjugators->isEmpty() then null &#xA;        else ownedConjugators->at(1) endif&#xA;output =&#xA;    if isConjugated then &#xA;        conjugator.originalType.input&#xA;    else &#xA;        feature->select(direction = out or direction = inout)&#xA;    endif&#xA;input = &#xA;    if isConjugated then &#xA;        conjugator.originalType.output&#xA;    else &#xA;        feature->select(direction = _'in' or direction = inout)&#xA;    endif&#xA;inheritedMembership = inheritedMemberships(Set{})&#xA;disjointType = disjoiningTypeDisjoining.disjoiningType&#xA;specializesFromLibrary(&quot;Base::Anything&quot;)&#xA;directedFeature = feature->select(direction &lt;> null)&#xA;feature = featureMembership.ownedMemberFeature&#xA;featureMembership = ownedMembership->union(&#xA;    inheritedMembership->selectByKind(FeatureMembership))&#xA;ownedFeature = ownedFeatureMembership.ownedMemberFeature&#xA;intersectingType->excludes(self)&#xA;unioningType->excludes(self)&#xA;differencingType->excludes(self)&#xA;differencingType = ownedDifferencing.differencingType&#xA;unioningType = ownedUnioning.unioningType&#xA;intersectingType = ownedIntersecting.intersectingType&#xA;ownedRelationship->selectByKind(Conjugator)->size() &lt;= 1&#xA;ownedMember->selectByKind(Multiplicity)->size() &lt;= 1&#xA;endFeature = feature->select(isEnd)&#xA;not ownedMember->exists(oclIsType(Multiplicity)) implies&#xA;    ownedSpecialization.general.multiplicity->size() &lt;= 1"/>
    <classes name="Specialization" label="Specialization" comment="&lt;p>Specialization is a Relationship between two Types that requires all instances of the &lt;code>specific&lt;/code> type to also be instances of the &lt;code>general&lt;/code> Type (i.e., the set of instances of the &lt;code>specific&lt;/code> Type is a &lt;em>subset&lt;/em> of those of the &lt;code>general&lt;/code> Type, which might be the same set).&lt;/p>&#xA;&#xA;not specific.isConjugated"/>
    <classes name="FeatureMembership" label="FeatureMembership" comment="&lt;p>FeatureMembership is an OwningMembership for a Feature in a Type that is also a Featuring Relationship between the Feature and the Type, in which the &lt;code>featuringType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featureOfType&lt;/code> is the &lt;code>target&lt;/code>. A FeatureMembership is always owned by its &lt;code>owningType&lt;/code>, which is the &lt;code>featuringType&lt;/code> for the FeatureMembership considered as a Featuring.&lt;/p>&#xA;"/>
    <classes name="Feature" label="Feature" comment="&lt;p>A Feature is a Type that classifies sequences of multiple things (in the universe). These must concatenate a sequence drawn from the intersection of the Feature&amp;#39;s &lt;code>featuringTypes&lt;/code> (&lt;em>domain&lt;/em>) with a sequence drawn from the intersection of its &lt;code>types&lt;/code> (&lt;em>co-domain&lt;/em>), treating (co)domains as sets of sequences. The domain of Features that do not have any &lt;code>featuringTypes&lt;/code> is the same as if it were the library Type Anything. A Feature&amp;#39;s &lt;code>types&lt;/code> include at least Anything, which can be narrowed to other Classifiers by Redefinition.&lt;/p>&#xA;&#xA;&lt;p>In the simplest cases, a Feature&amp;#39;s &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> are Classifiers, its sequences being pairs (length = 2), with the first element drawn from the Feature&amp;#39;s domain and the second element from its co-domain (the Feature &amp;quot;value&amp;quot;). Examples include cars paired with wheels, people paired with other people, and cars paired with numbers&amp;nbsp;representing the car length.&lt;/p>&#xA;&#xA;&lt;p>Since Features are Types, their &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> can be Features. When both are, Features classify sequences of at least four elements (length &amp;gt; 3), otherwise at least three (length &amp;gt; 2). The &lt;code>featuringTypes&lt;/code> of &lt;em>nested&lt;/em> Features are Features.&lt;/p>&#xA;&#xA;&lt;p>The values of a Feature with &lt;code>chainingFeatures&lt;/code> are the same as values of the last Feature in the chain, which can be found by starting with values of the first Feature, then from those values to values of the second feature, and so on, to values of the last feature.&lt;/p>&#xA;&#xA;ownedRedefinition = ownedSubsetting->selectByKind(Redefinition)&#xA;ownedTypeFeaturing = ownedRelationship->selectByKind(TypeFeaturing)->&#xA;    select(tf | tf.featureOfType = self)&#xA;ownedSubsetting = ownedGeneralization->selectByKind(Subsetting)&#xA;isComposite = owningFeatureMembership &lt;> null and owningFeatureMembership.isComposite&#xA;ownedTyping = ownedGeneralization->selectByKind(FeatureTyping)&#xA;type =&#xA;    if chainingFeature->notEmpty() then&#xA;        chainingFeature->last().type&#xA;    else&#xA;        ownedTyping.type->&#xA;            union(ownedSubsetting.subsettedFeature.type)->&#xA;            asOrderedSet()&#xA;    endif&#xA;isEnd = owningFeatureMembership &lt;> null and owningFeatureMembership.oclIsKindOf(EndFeatureMembership)&#xA;multiplicity &lt;> null implies multiplicity.featuringType = featuringType &#xA;specializesFromLibrary(&quot;Base::things&quot;)&#xA;chainingFeatures->excludes(self)&#xA;ownedFeatureChaining = ownedRelationship->selectByKind(FeatureChaining)&#xA;chainingFeature = ownedFeatureChaining.chainingFeature&#xA;chainingFeatures->size() &lt;> 1&#xA;inverseFeature = invertingFeatureInverting.featureInverse&#xA;invertedFeature = invertedFeatureInverting.featureInverted&#xA;ownedTyping.type->exists(selectByKind(DataType)) implies&#xA;    specializesFromLibary(&quot;Base::dataValues&quot;)&#xA;ownedTyping.type->exists(selectByKind(Class)) implies&#xA;    specializesFromLibrary(&quot;Occurrences::occurrences&quot;)&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary(&quot;Occurrence::Occurrence::suboccurrences&quot;)&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Structure)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.type->includes(oclIsKindOf(Structure))) implies&#xA;    specializesFromLibrary(&quot;Occurrence::Occurrence::suboccurrences&quot;)&#xA;isEnd and owningType &lt;> null and&#xA;owningType.oclIsKindOf(Association) implies&#xA;    specializesFromLibrary(&quot;Links::Link::participants&quot;)&#xA;isEnd and owningType &lt;> null implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(isEnd) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedEndFeatures : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(isEnd) in&#xA;            ownedEndFeatures->size() >= i implies&#xA;                redefines(ownedEndFeatures->at(i))&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Behavior) or&#xA; owningType.oclIsKindOf(Step)) implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(direction &lt;> null) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedParameters : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(direction &lt;> null) in&#xA;            ownedParameters->size() >= i implies&#xA;                redefines(ownedParameters->at(i))&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(LiteralExpression) or&#xA; owningType.oclIsKindOf(FeatureReferenceExpression)) implies&#xA;    if owningType.oclIsKindOf(LiteralString) then&#xA;        specializesFromLibrary(&quot;ScalarValues::String&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Boolean&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralInteger) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Rational&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Rational&quot;)&#xA;    else if owningType.oclIsKindOf(LiteralBoolean) then&#xA;        specializesFromLibrary(&quot;ScalarValues::Real&quot;)&#xA;    else specializes(&#xA;        owningType.oclAsType(FeatureReferenceExpression).referent)&#xA;    endif endif endif endif endif&#xA;&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(ItemFlowEnd) and&#xA;owningType.ownedFeature->at(1) = self implies&#xA;    let flowType : Type = owningType.owningType in&#xA;    flowType &lt;> null implies&#xA;        let i : Integer = &#xA;            flowType.ownedFeature.indexOf(owningType) in&#xA;        (i = 1 implies &#xA;            redefinesFromLibrary(&quot;Transfers::Transfer::source::sourceOutput&quot;)) and&#xA;        (i = 2 implies&#xA;            redefinesFromLibrary(&quot;Transfers::Transfer::source::targetInput&quot;))&#xA;                 &#xA;ownedMembership->&#xA;    selectByKind(FeatureValue)->&#xA;    forAll(fv | specializes(fv.value.result))&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Function) and&#xA;    self = owningType.oclAsType(Function).result or&#xA; owningType.oclIsKindOf(Expression) and&#xA;    self = owningType.oclAsType(Expression).result) implies&#xA;    owningType.ownedSpecialization.general->&#xA;        select(oclIsKindOf(Function) or oclIsKindOf(Expression))->&#xA;        forAll(supertype |&#xA;            redefines(&#xA;                if superType.oclIsKindOf(Function) then&#xA;                    superType.oclAsType(Function).result&#xA;                else&#xA;                    superType.oclAsType(Expression).result&#xA;                endif)&#xA;ownedTyping.type->exists(selectByKind(Structure)) implies&#xA;    specializesFromLibary(&quot;Objects::objects&quot;)"/>
    <classes name="Redefinition" label="Redefinition" comment="&lt;p>Redefinition specializes&amp;nbsp;Subsetting to require&amp;nbsp;the &lt;code>redefinedFeature&lt;/code> and the&amp;nbsp;&lt;code>redefiningFeature&lt;/code> to have the same values (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>). This means any restrictions on the &lt;code>redefiningFeature&lt;/code>, such as &lt;code>type&lt;/code> or &lt;code>multiplicity&lt;/code>, also apply to the &lt;code>redefinedFeature&lt;/code> (on each instance of the &lt;code>owningType&lt;/code> of the redefining Feature), and vice versa. The &lt;code>redefinedFeature&lt;/code> might have&amp;nbsp;values for instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefiningFeature&lt;/code>, but only as instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefinedFeature&lt;/code> that happen to also be instances of the &lt;code>owningType&lt;/code> of the &lt;code>redefiningFeature&lt;/code>. This is supported by the constraints inherited from&amp;nbsp;Subsetting on the domains of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code>. However, these constraints are narrowed for Redefinition to require the &lt;code>owningTypes&lt;/code> of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code> to be different and the &lt;code>redefinedFeature&lt;/code> to&amp;nbsp;not be imported into the &lt;code>owningNamespace&lt;/code> of the &lt;code>redefiningFeature&lt;/code>.&amp;nbsp;This&amp;nbsp;enables&amp;nbsp;the &lt;code>redefiningFeature&lt;/code> to have the same name as the &lt;code>redefinedFeature&lt;/code> if desired.&lt;/p>&#xA;"/>
    <classes name="Subsetting" label="Subsetting" comment="&lt;p>Subsetting is Generalization in which the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> Types that are Features. This means all values of the &lt;code>subsettingFeature&lt;/code> (on instances of its domain, i.e., the intersection of its &lt;code>featuringTypes&lt;/code>) are values of the &lt;code>subsettedFeature&lt;/code> on instances of its domain.&amp;nbsp; To support this,&amp;nbsp;the domain&amp;nbsp;of the &lt;code>subsettingFeature&lt;/code> must be the same or specialize (at least indirectly) the&amp;nbsp;domain&amp;nbsp;of the &lt;code>subsettedFeature&lt;/code> (via Generalization), and the range (intersection of a Feature&amp;#39;s &lt;code>types&lt;/code>) of the &lt;code>subsettingFeature&lt;/code> must specialize the range of the &lt;code>subsettedFeature&lt;/code>.&amp;nbsp;The &lt;code>subsettedFeature&lt;/code> is imported into the &lt;code>owningNamespace&lt;/code> of the &lt;code>subsettingFeature&lt;/code> (if it is not already in that namespace), requiring the names of the &lt;code>subsettingFeature&lt;/code> and &lt;code>subsettedFeature&lt;/code> to be different.&lt;/p>&#xA;"/>
    <classes name="FeatureTyping" label="FeatureTyping" comment="&lt;p>FeatureTyping is Specialization in which the &lt;code>specific&lt;/code> Type is a Feature. This means the set of instances of the (specific) &lt;code>typedFeature&lt;/code> is a subset of the set of instances of the (general) &lt;code>type&lt;/code>. In the simplest case, the &lt;code>type&lt;/code> is a Classifier, whereupon the &lt;code>typedFeature&lt;/code> subset has instances interpreted as sequences ending in things (in the modeled universe) that are instances of the Classifier.&lt;/p>&#xA;"/>
    <classes name="FeatureInverting" label="FeatureInverting" comment="&lt;p>A FeatureInverting is a Relationship between Features asserting that their interpretations (sequences) are the reverse of each other, identified as &lt;code>featureInverted&lt;/code> and &lt;code>invertingFeature&lt;/code>. For example, a Feature identifying each person's parents is the inverse of a Feature identifying each person's children.  A person identified as a parent of another will identify that other as one of their children.&lt;/p>"/>
    <classes name="FeatureChaining" label="FeatureChaining" comment="&lt;p>FeatureChaining is a Relationship that makes its target Feature one of the &lt;code>chainingFeatures&lt;/code> of its owning Feature.&lt;/p>"/>
    <classes name="ReferenceSubsetting" label="ReferenceSubsetting" comment="&lt;p>ReferenceSubsetting is a kind of Subsetting in which the &lt;code>referencedFeature&lt;/code> is syntactically distinguished from other Features subsetted by the &lt;code>referencingFeature&lt;/code>. ReferenceSubsetting has the same semantics as Subsetting, but the &lt;code>referenceFeature&lt;/code> may have a special purpose relative to the &lt;code>referencingFeature&lt;/code>. For instance, ReferenceSubsetting is used to identify the &lt;code>relatedFeatures&lt;/code> of a Connector.&lt;/p>&#xA;&#xA;&lt;p>ReferenceSubsetting is always an &lt;code>ownedRelationship&lt;/code> of its &lt;code>referencingFeature&lt;/code>. A Feature can have at most one &lt;code>ownedReferenceSubsetting&lt;/code>.&lt;p>&#xA;"/>
    <classes name="Conjugation" label="Conjugation" comment="&lt;p>Conjugation is a Relationship between two types in which the &lt;code>conjugatedType&lt;/code> inherits all the Features of the &lt;code>originalType&lt;/code>, but with all &lt;code>input&lt;/code> and &lt;code>output&lt;/code> Features reversed. That is, any Features with a FeatureMembership with &lt;code>direction&lt;/code> &lt;em>in&lt;/em> relative to the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>out&lt;/em> relative to the &lt;code>conjugatedType&lt;/code> and, similarly, Features with &lt;code>direction&lt;/code> &lt;em>out&lt;/em> in the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>in&lt;/em> in the &lt;code>originalType&lt;/code>. Features with &lt;code>direction&lt;/code> &lt;em>inout&lt;/em>, or with no &lt;code>direction&lt;/code>, in the &lt;code>originalType&lt;/code>, are inherited without change.&lt;/p>&#xA;&#xA;&lt;p>A Type may participate as a &lt;code>conjugatedType&lt;/code> in at most one Conjugation relationship, and such a Type may not also be the &lt;code>specific&lt;/code> Type in any Generalization relationship.&lt;/p>&#xA;"/>
    <classes name="Multiplicity" label="Multiplicity" comment="&lt;p>A Multiplicity is a Feature whose co-domain is a set of natural numbers that includes the number&amp;nbsp;of sequences determined below, based on the kind of&amp;nbsp;typeWithMultiplicity:&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Classifiers: minimal sequences (the single length sequences of the Classifier).&lt;/li>&#xA;&#x9;&lt;li>Features: sequences with the same feature-pair head.&amp;nbsp; In the case of Features with Classifiers as domain and co-domain, these sequences are pairs, with the first element in&amp;nbsp;a single-length sequence of the domain Classifier (head of the pair), and the number of pairs with the same first element being among the Multiplicity co-domain numbers.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>Multiplicity co-domains (in models) can be specified by Expression that might vary in their results. If the &lt;code>typeWithMultiplicity&lt;/code> is a Classifier, the domain of the Multiplicity shall be &lt;em>Anything&lt;/em>.  If the &lt;code>typeWithMultiplicity&lt;/code> is a Feature,  the Multiplicity shall have the same domain as the &lt;code>typeWithMultiplicity&lt;/code>.&lt;/p>&#xA;&#xA;if typeWithMultiplicity.oclIsKindOf(Feature) then&#xA;    featuringType = &#xA;        typeWithMultiplicity.oclAsType(Feature).featuringType&#xA;else&#xA;    featuringType = Sequence{resolveGlobal(&quot;Base::Anything&quot;))}&#xA;endif&#xA;specializesFromLibrary(&quot;Base::naturals&quot;)&#xA;owningNamespace.oclIsKindOf(Type) implies&#xA;    owningNamespace.oclAsType(Type).ownedSpecialization.general.multiplicity->&#xA;        forAll(m | redefines(m))&#xA;"/>
    <classes name="Intersecting" label="Intersecting" comment="&lt;p>Intersecting is a Relationship that makes its &lt;code>intersectingType&lt;/code> one of the &lt;code>intersectingTypes&lt;/code> of its &lt;code>typeIntersected&lt;/code>.&lt;/p>"/>
    <classes name="Unioning" label="Unioning" comment="&lt;p>Unioning is a Relationship that makes its &lt;code>unioningType&lt;/code> one of the &lt;code>unioningTypes&lt;/code> of its &lt;code>typeUnioned&lt;/code>.&lt;/p>"/>
    <classes name="Disjoining" label="Disjoining" comment="&lt;p>A Disjoining is a Relationship between Types asserted to have interpretations that are not shared (disjoint) between them, identified as &lt;code>typeDisjoined&lt;/code> and &lt;code>disjoiningType&lt;/code>. For example, a Classifier for mammals is disjoint from a Classifier for minerals, and a Feature for people&amp;#39;s parents is disjoint from a Feature for their children. &lt;/code>&lt;/p>&#xA;"/>
    <classes name="Differencing" label="Differencing" comment="&lt;p>Differencing is a Relationship that makes its &lt;code>differencingType&lt;/code> one of the &lt;code>differencingTypes&lt;/code> of its &lt;code>typeDifferenced&lt;/code>.&lt;/p>"/>
    <classes name="EndFeatureMembership" label="EndFeatureMembership" comment="&lt;p>EndFeatureMembership is a FeatureMembership that requires its &lt;code>memberFeature&lt;/code> be owned and have &lt;code>isEnd = true&lt;/code>.&lt;/p>&#xA;ownedMemberFeature.isEnd"/>
    <classes name="Subclassification" label="Subclassification" comment="&lt;p>Subclassification is Specialization in which both the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> Types are Classifiers. This means all instances of the specific Classifier are also instances of the general Classifier.&lt;/p>&#xA;"/>
    <classes name="Classifier" label="Classifier" comment="&lt;p>A Classifier is a Type for model elements that classify:&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Things&amp;nbsp;(in the universe) regardless of how Features relate them.&amp;nbsp; These are&amp;nbsp;sequences of exactly one&amp;nbsp;thing (sequence of length 1).&lt;/li>&#xA;&#x9;&lt;li>How the above&amp;nbsp;things are related by Features. These are sequences of multiple things (length &amp;gt; 1).&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>Classifiers that classify relationships (sequence length &amp;gt; 1) must also classify the things at the end of those&amp;nbsp;sequences (sequence length =1).&amp;nbsp; Because of this, Classifiers specializing Features cannot classify anything (any sequences).&lt;/p>&#xA;&#xA;ownedSubclassification = &#xA;    ownedSpecialization->selectByKind(Superclassification)&#xA;multiplicity &lt;> null implies multiplicity.featuringType->isEmpty()"/>
    <classes name="DataType" label="DataType" comment="&lt;p>A DataType is a Classifier of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same DataType&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.&lt;/li>&#xA;&#x9;&lt;li>Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;specializesFromLibrary(&quot;Base::DataValue&quot;)&#xA;ownedGeneralization.general->&#xA;    forAll(not oclIsKindOf(Class))"/>
    <classes name="ItemFlow" label="ItemFlow" comment="&lt;p>An ItemFlow is a Step that represents the transfer of objects or values from one Feature to another. ItemFlows can take non-zero time to complete.&lt;/p>&#xA;&#xA;&lt;p>An ItemFlow must be typed by the Interaction &lt;em>&lt;code>Transfer&lt;/code>&lt;/em> from the Kernel Semantic Library, or a specialization of it.&lt;/p>&#xA;&#xA;if itemFlowEnds->isEmpty() then&#xA;    specializesFromLibrary(&quot;Transfers::transfers&quot;)&#xA;else&#xA;    specializesFromLibrary(&quot;Transfers::flowTransfers&quot;)&#xA;endif"/>
    <classes name="Connector" label="Connector" comment="&lt;p>A Connector is a usage of Associations, with links restricted according to instances of the Type in which they are used (domain of the Connector). Associations restrict what kinds of things might be linked. The Connector further restricts these links to between values of two Features on instances of its domain.&lt;/p>&#xA;&#xA;relatedFeature = connectorEnd.ownedReferenceSubsetting.subsettedFeature&#xA;relatedFeature->forAll(f | &#xA;    if featuringType->isEmpty() then f.isFeaturedWithin(null)&#xA;    else featuringType->exists(t | f.isFeaturedWithin(t))&#xA;    endif)&#xA;sourceFeature = &#xA;    if relatedFeature->size() = 2 then relatedFeature->at(1) &#xA;    else null &#xA;    endif&#xA;targetFeature =&#xA;    if sourceFeature = null then relatedFeature&#xA;    else relatedFeature->excluding(sourceFeature)&#xA;    endif&#xA;connectorEnd = feature->select(isEnd)&#xA;not isAbstract implies relatedFeature->size() >= 2&#xA;specializesFromLibrary(&quot;Links::links&quot;)&#xA;connectorEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::binaryLinks')&#xA;association->exists(oclIsKindOf(AssociationStructure)) implies&#xA;    specializesFromLibrary(&quot;Objects::linkObjects&quot;)&#xA;connectorEnds->size() = 2 and&#xA;association->exists(oclIsKindOf(AssocationStructure)) implies&#xA;    specializesFromLibrary(&quot;Objects::binaryLinkObjects&quot;)&#xA;connectorEnds->size() > 2 implies&#xA;    not specializesFromLibrary(&quot;Links::BinaryLink&quot;)"/>
    <classes name="Association" label="Association" comment="&lt;p>An Association is a Relationship and a Classifier to enable classification of links between things (in the universe). The co-domains (&lt;code>types&lt;/code>) of the &lt;code>associationEnd&lt;/code> Features are the &lt;code>relatedTypes&lt;/code>, as co-domain and participants (linked things) of an Association identify each other.&lt;/p>&#xA;&#xA;relatedTypes = associationEnd.type&#xA;specializesFromLibrary(&quot;Links::Link&quot;)&#xA;oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Links::BinaryLink)&#xA;not isAbstract implies relatedType->size() >= 2&#xA;associationEnds->size() > 2 implies&#xA;    not specializesFromLibrary(&quot;Links::BinaryLink&quot;)"/>
    <classes name="Step" label="Step" comment="&lt;p>A Step is a Feature that is typed by one or more Behaviors. Steps may be used by one Behavior to coordinate the performance of other Behaviors, supporting the steady refinement of behavioral descriptions. Steps can be ordered in time and can be connected using ItemFlows to specify things flowing between their parameters.&lt;/p>&#xA;&#xA;allSupertypes()->includes(resolveGlobal(&quot;Performances::performances&quot;))&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) implies&#xA;    specializesFromLibrary('Performances::Performance::enclosedPerformance')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) and&#xA;    self.isComposite implies&#xA;    specializesFromLibrary('Performances::Performance::subperformance')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.oclIsKindOf(Feature) and&#xA; owningType.oclAsType(Feature).type->&#xA;    exists(oclIsKindOf(Structure)) implies&#xA;    specializesFromLibrary('Objects::Object::ownedPerformance')"/>
    <classes name="Behavior" label="Behavior" comment="&lt;p>A Behavior coordinates occurrences of other Behaviors, as well as&amp;nbsp;changes in objects. Behaviors can be decomposed into Steps and be characterized by &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::Performance&quot;)"/>
    <classes name="Class" label="Class" comment="&lt;p>A Class is a Classifier of things (in the universe) that can be distinguished without regard to how they are related to other things (via Features). This means multiple things classified by the same Class can be distinguished, even&amp;nbsp;when they are related&amp;nbsp;other things in exactly the same way.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Occurrences::Occurrence&quot;)&#xA;ownedGeneralization.general->&#xA;    forAll(not oclIsKindOf(DataType) and &#xA;           not oclIsKindOf(Association))"/>
    <classes name="ItemFlowEnd" label="ItemFlowEnd" comment="&lt;p>An ItemFlowEnd is a Feature that is one of the &lt;code>endFeatures&lt;/code> giving the &lt;code>&lt;em>source&lt;/em>&lt;/code> or &lt;code>&lt;em>target&lt;/em>&lt;/code> of an ItemFlow. For ItemFlows typed by FlowTransfer or its specializations, ItemFlowEnds must have exactly one &lt;code>ownedFeature&lt;/code>, which redefines &lt;code>&lt;em>Transfer::source::sourceOutput&lt;/em>&lt;/code> or &lt;code>&lt;em>Transfer::target::targetInput&lt;/em>&lt;/code> and redefines the corresponding feature of the &lt;code>relatedElement&lt;/code> for its end.&lt;/p>"/>
    <classes name="ItemFeature" label="ItemFeature" comment="&lt;p>An ItemFeature is the &lt;code>ownedFeature&lt;/code> of an ItemFlow that identifies the things carried by the kinds of transfers that are instances of the ItemFlow. It must redefine &lt;code>&lt;em>Transfer::item&lt;/em>&lt;/code>.&lt;/p>&#xA;ownedRedefinition.redefinedFeature->&#xA;    redefinesFromLibrary(&quot;Transfers::Transfer::item&quot;)"/>
    <classes name="Interaction" label="Interaction" comment="&lt;p>An Interaction is a Behavior that is also an Association, providing a context for multiple objects that have behaviors that impact one another.&lt;/p>&#xA;"/>
    <classes name="SuccessionItemFlow" label="SuccessionItemFlow" comment="&lt;p>A SuccessionItemFlow is an ItemFlow that also provides temporal ordering. It classifies &lt;em>Transfers&lt;/em> that cannot start until the source &lt;em>Occurrence&lt;/em> has completed and that must complete before the target &lt;em>Occurrence&lt;/em> can start.&lt;/p>&#xA;&#xA;&lt;p>A SuccessionItemFlow must be typed by the Interaction &lt;em>TransferBefore&lt;/em> from the Kernel Library, or a specialization of it.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Transfers::flowTransfersBefore&quot;)"/>
    <classes name="Succession" label="Succession" comment="&lt;p>A Succession is a binary&amp;nbsp;Connector that requires its &lt;code>relatedFeatures&lt;/code> to happen separately in time. A Succession must be typed by the Association &lt;em>HappensBefore&lt;/em> from the Kernel Model Library (or a specialization of it).&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Occurences::happensBeforeLinks&quot;)"/>
    <classes name="Expression" label="Expression" comment="&lt;p>An Expression is a Step that is typed by a Function. An Expression that also has a Function as its &lt;code>featuringType&lt;/code> is a computational step within that Function. An Expression always has a single &lt;code>result&lt;/code> parameter, which redefines the &lt;code>result&lt;/code> parameter of its defining &lt;code>function&lt;/code>. This allows Expressions to be interconnected in tree structures, in which inputs to each Expression in the tree are determined as the results of other Expressions in the tree.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})&#xA;specializesFromLibrary(&quot;Performances::evaluations&quot;)&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;owningMembership &lt;> null and &#xA;owningMembership.oclIsKindOf(FeatureValue) implies&#xA;    let featureWithValue : Feature = &#xA;        owningMembership.oclAsType(FeatureValue).featureWithValue in&#xA;    featuringType = featureWithValue.featuringType"/>
    <classes name="Function" label="Function" comment="&lt;p>A Function is a Behavior that has a single &lt;code>out&lt;/code> &lt;code>parameter&lt;/code> that is identified as its &lt;code>result&lt;/code>. Any other &lt;code>parameters&lt;/code> of a Function than the &lt;code>result&lt;/code> must have direction &lt;code>in&lt;/code>. A Function represents the performance of a calculation that produces the values of its &lt;code>result&lt;/code> parameter. This calculation may be decomposed into Expressions that are &lt;code>steps&lt;/code> of the Function.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::Evaluation&quot;)&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))"/>
    <classes name="BindingConnector" label="BindingConnector" comment="&lt;p>A Binding Connector is a binary Connector that requires its &lt;code>relatedFeatures&lt;/code> to identify the same things (have the same values). &#xA;&#xA;&lt;p> A BindingConnector must be directly or indirectly typed by the &lt;em>&lt;code>SelfLink&lt;/code>&lt;/em> Association from the &lt;em>&lt;code>Links&lt;/code&lt;/em> library model. Both end multiplicities must be 1..1 when the &lt;code>relatedFeatures&lt;/code> have unique values.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Links::selfLinks&quot;)"/>
    <classes name="Structure" label="Structure" comment="&lt;p>A Structure is a Class of objects in the modeled universe that are primarily structural in nature. While an Object is not itself behavioral, it may be involved in and acted on by Behaviors, and it may be the performer of some of them.&lt;/p>&#xA;&#xA;specializesFromLibrary&quot;Objects::Object&quot;)"/>
    <classes name="FeatureValue" label="FeatureValue" comment="&lt;p>A FeatureValue is a Membership that identifies a particular member Expression that provides the value of the Feature that owns the FeatureValue. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A Feature can have at most one FeatureValue.&lt;/p>&#xA;&#xA;&lt;p>The result of the &lt;code>value&lt;/code> expression is bound to the &lt;code>featureWithValue&lt;/code> using a BindingConnector. If &lt;code>isInitial = false&lt;/code>, then the &lt;code>featuringType&lt;/code> of the BindingConnector is the same as the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>. If &lt;code>isInitial = true&lt;/code>, then the &lt;code>featuringType&lt;/code> of the BindingConnector is restricted to its &lt;code>startShot&lt;/code>.&#xA;&#xA;&lt;p>If &lt;code>isDefault = false&lt;/code>, then the above semantics of the FeatureValue are realized for the given &lt;code>featureWithValue&lt;/code>. Otherwise, the semantics are realized for any individual of the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>, unless another value is explicitly given for the &lt;code>featureWithValue&lt;/code> for that individual.&lt;/p>&#xA;&#xA;not isDefault implies&#xA;    featureWithValue.ownedMember->&#xA;        selectByKind(BindingConnector)->exists(b |&#xA;            b.relatedFeature->includes(featureWithValue) and&#xA;            b.relatedFeature->includes(value.result) and&#xA;            if not isInitial then &#xA;                b.featuringType = featureWithValue.featuringType&#xA;            else &#xA;                b.featuringType->exists(t |&#xA;                    t.oclIsKindOf(Feature) and&#xA;                    t.oclAsType(Feature).chainingFeature =&#xA;                        Sequence{&#xA;                            resolveGlobal(&quot;Base::things::that&quot;),&#xA;                            resolveGlobal(&quot;Occurrences::Occurrence::startShot&quot;)&#xA;                        }&#xA;                )&#xA;            endif)"/>
    <classes name="MultiplicityRange" label="MultiplicityRange" comment="&lt;p>A MultiplicityRange is a Multiplicity whose value is defined to be the (inclusive) range of natural numbers given by the result of a &lt;code>lowerBound&lt;/code> Expression and the result of an &lt;code>upperBound&lt;/code> Expression. The result of the &lt;code>lowerBound&lt;/code> Expression shall be of type &lt;em>Natural&lt;/em>, while the result of the &lt;code>upperBound&lt;/code> Expression shall be of type &lt;em>UnlimitedNatural&lt;/em>. If the result of the &lt;code>upperBound&lt;/code> Expression is the unbounded value &lt;code>*&lt;/code>, then the specified range includes all natural numbers greater than or equal to the &lt;code>lowerBound&lt;/code> value.&lt;/p>&#xA;&#xA;bound->forAll(b | b.featuringType = self.featuringType)"/>
    <classes name="ElementFilterMembership" label="ElementFilterMembership" comment="&lt;p>ElementFilterMembership is a Mambership between a Namespace and a model-level evaluable Boolean Expression, asserting that imported &lt;code>members&lt;/code> of the Namespace should be filtered using the &lt;code>condition&lt;/code> Expression. A general Namespace does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of Namespaces.&lt;/p>&#xA;condition.isModelLevelEvaluable"/>
    <classes name="Package" label="Package" comment="&lt;p>A Package is a Namespace used to group Elements, without any instance-level semantics. It may have one or more model-level evaluable &lt;code>filterCondition&lt;/code> Expressions used to filter its &lt;code>importedMemberships&lt;/code>. Any imported &lt;code>member&lt;/code> must meet all of the &lt;code>filterConditions&lt;/code>.&lt;/p>"/>
    <classes name="LibraryPackage" label="LibraryPackage" comment="&lt;p>A LibraryPackage is a Package that is the container for a model library. A LibraryPackage is itself a library Element as are all Elements that are directly or indirectly contained in it.&lt;/p>"/>
    <classes name="Metaclass" label="Metaclass" comment="&lt;p>A Metaclass is a Structure used to type MetadataFeatures. It must subclassify, directly or indirectly, the base type &lt;em>&lt;code>Metadata&lt;/code>&lt;/em> from the Kernel Library.&lt;/p>&#xA;specializesFromLibrary(&quot;Metaobjects::Metaobject&quot;)"/>
    <classes name="MetadataFeature" label="MetadataFeature" comment="&lt;p>A MetadataFeature is a Feature that is an AnnotatingElement used to annotate another Element with metadata. It is typed by a Metaclass. All its &lt;code>ownedFeatures&lt;/code> must redefine &lt;code>features&lt;/code> of its &lt;code>metaclass&lt;/code> and any feature bindings must be model-level evaluable.&lt;/p>&#xA;&#xA;&lt;p>A MetadataFeature must subset, directly or indirectly, the base MetadataFeature &lt;em>&lt;code>metadata&lt;/code>&lt;/em> from the Kernel Library.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary(&quot;Metaobjects::metaobjects&quot;)&#xA;isSemantic() implies&#xA;    let annotatedTypes : Sequence(Type) = &#xA;        annotatedElement->selectAsKind(Type) in&#xA;    let baseTypes : Sequence(MetadataFeature) = &#xA;        evaluateFeature(resolveGlobal(&#xA;            'Metaobjects::SemanticMetadata::baseType').&#xA;            oclAsType(Feature))->&#xA;        selectAsKind(MetadataFeature) in&#xA;    annotatedTypes->notEmpty() and &#xA;    baseTypes()->notEmpty() and &#xA;    baseTypes()->first().isSyntactic() implies&#xA;        let annotatedType : Type = annotatedTypes->first() in&#xA;        let baseType : Element = baseTypes->first().syntaxElement() in&#xA;        if annotatedType.oclIsKindOf(Classifier) and &#xA;            baseType.oclIsKindOf(Feature) then&#xA;            baseType.oclAsType(Feature).type->&#xA;                forAll(t | annotatedType.specializes(t))&#xA;        else if baseType.oclIsKindOf(Type) then&#xA;            annotatedType.specializes(baseType.oclAsType(Type))&#xA;        else&#xA;            true&#xA;        endif"/>
    <classes name="ParameterMembership" label="ParameterMembership" comment="&lt;p>A ParameterMembership is a FeatureMembership that identifies its &lt;code>memberFeature&lt;/code> as a parameter, which is always owned, and must have a &lt;code>direction&lt;/code>. A ParameterMembership must be owned by a Behavior or a Step.&lt;/p>"/>
    <classes name="BooleanExpression" label="BooleanExpression" comment="&lt;p>A BooleanExpression is a Boolean-valued Expression whose type is a Predicate. It represents a logical condition resulting from the evaluation of the Predicate.&lt;/p>&#xA;&#xA;&lt;p>A BooleanExpression must subset, directly or indirectly, the Expression &lt;em>booleanEvaluations&lt;/em> from the Base model library, which is typed by the base Predicate &lt;em>BooleanEvaluation&lt;/em>. As a result, a BooleanExpression must always be typed by BooleanEvaluation or a subclass of BooleanEvaluation.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::booleanEvaluations&quot;)"/>
    <classes name="Predicate" label="Predicate" comment="&lt;p>A Predicate is a Function whose &lt;code>result&lt;/code> Parameter has type &lt;em>Boolean&lt;/em> and multiplicity 1..1.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::BooleanEvaluation&quot;)"/>
    <classes name="Invariant" label="Invariant" comment="&lt;p>An Invariant is a BooleanExpression that is asserted to have a specific Boolean result value. If &lt;code>isNegated = false&lt;/code>, then the Invariant must subset, directly or indirectly, the BooleanExpression &lt;em>trueEvaluations&lt;/em> from the Kernel library, meaning that the result is asserted to be true. If &lt;code>isNegated = true&lt;/code>, then the Invariant must subset, directly or indirectly, the BooleanExpression &lt;em>falseEvaluations&lt;/em> from the Kernel library, meaning that the result is asserted to be false.&lt;/p>&#xA;&#xA;if isNegated then&#xA;    specializesFromLibrary(&quot;Performances::falseEvaluations&quot;)&#xA;else&#xA;    specializesFromLibrary(&quot;Performances::trueEvaluations&quot;)&#xA;endif"/>
    <classes name="ResultExpressionMembership" label="ResultExpressionMembership" comment="&lt;p>A ResultExpressionMembership is a FeatureMembership that indicates that the &lt;code>ownedResultExpression&lt;/code> provides the result values for the Function or Expression that owns it. The owning Function or Expression must contain a BindingConnector between the &lt;code>result&lt;/code> parameter of the &lt;code>ownedResultExpression&lt;/code> and the &lt;code>result&lt;/code> parameter of the Function or Expression.&lt;/p>&#xA;"/>
    <classes name="ReturnParameterMembership" label="ReturnParameterMembership" comment="&lt;p>A ReturnParameterMembership is a ParameterMembership that indicates that the &lt;code>memberParameter&lt;/code> is the &lt;code>result&lt;/code> parameter of a Function or Expression. The &lt;code>direction&lt;/code> of the &lt;code>memberParameter&lt;/code> must be &lt;code>out&lt;/code>.&lt;/p>"/>
    <classes name="LiteralInfinity" label="LiteralInfinity" comment="&lt;p>A LiteralInfinity is a LiteralExpression that provides the positive infinity value (&lt;code>*&lt;/code>). It's &lt;code>result&lt;/code> must have the type &lt;code>&lt;em>Positive&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralExpression" label="LiteralExpression" comment="&lt;p>A LiteralExpression is an Expression that provides a basic value as a result. It must directly or indirectly specialize the Function &lt;code>&lt;em>LiteralEvaluation&lt;/em>&lt;/code> from the &lt;code>&lt;em>Base&lt;/em>&lt;/code> model library, which has no parameters other than its result, which is a single &lt;code>&lt;em>DataValue&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = true&#xA;specializesFromLibrary(&quot;Performances::literalEvaluations&quot;)"/>
    <classes name="MetadataAccessExpression" label="MetadataAccessExpression" comment="&lt;p>A MetadataAccessExpression is an Expression whose &lt;code>result&lt;/code> is a sequence of instances of Metaclasses representing all the MetadataFeature annotations of the &lt;code>referencedElement&lt;/code>. In addition, the sequence includes an instance of the reflective Metaclass corresponding to the MOF class of the &lt;code>referencedElement&lt;/code>, with values for all the abstract syntax properties of the Element.&lt;/p>&#xA;specializesFromLibrary(&quot;Performances::metadataAccessEvaluations&quot;)"/>
    <classes name="InvocationExpression" label="InvocationExpression" comment="&lt;p>An InvocationExpression is an Expression each of whose input &lt;code>parameters&lt;/code> are bound to the &lt;code>result&lt;/code> of an owned &lt;code>argument&lt;/code> Expression. Each input &lt;code>parameter&lt;/code> may be bound to the &lt;code>result&lt;/code> of at most one &lt;code>argument&lt;/code>.&lt;/p>&#xA;&#xA;TBD&#xA;not ownedTyping->exists(oclIsKindOf(Behavior)) and&#xA;not ownedSubsetting.subsettedFeature.type->exists(oclIsKindOf(Behavior)) implies&#xA;    ownedFeature.selectByKind(BindingConnector)->exists(&#xA;        relatedFeature->includes(self) and&#xA;        relatedFeature->includes(result))&#xA;            "/>
    <classes name="CollectExpression" label="CollectExpression" comment="&lt;p>A CollectExpression is an OperatorExpression whose operator is &lt;code>&quot;collect&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::collect&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="OperatorExpression" label="OperatorExpression" comment="&lt;p>An OperatorExpression is an InvocationExpression whose &lt;code>function&lt;/code> is determined by resolving its &lt;code>operator&lt;/code> in the context of one of the standard Function packages from the Kernel Model Library.&lt;/p>&#xA;let libFunctions : Sequence(Element) = &#xA;    Sequence{&quot;BaseFunctions&quot;, &quot;DataFunctions&quot;, &quot;ControlFunctions&quot;}->&#xA;    collect(ns | resolveGlobal(ns + &quot;::'&quot; + operator + &quot;'&quot;)) in&#xA;libFunctions->includes(function)&#xA;    &#xA;"/>
    <classes name="LiteralBoolean" label="LiteralBoolean" comment="&lt;p>LiteralBoolean is a LiteralExpression that provides a &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralRational" label="LiteralRational" comment="&lt;p>A LiteralRational is a LiteralExpression that provides a &lt;code>&lt;em>Rational&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>Rational&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="FeatureReferenceExpression" label="FeatureReferenceExpression" comment="&lt;p>A FeatureReferenceExpression is an Expression whose &lt;code>result&lt;/code> is bound a &lt;code>referent&lt;/code> Feature. The only &lt;code>members&lt;/code> allowed for a FeatureReferenceExpression are the &lt;code>referent&lt;/code>, the &lt;code>result&lt;/code> and the BindingConnector between them.&lt;/p>"/>
    <classes name="SelectExpression" label="SelectExpression" comment="&lt;p>A SelectExpression is an OperatorExpression whose operator is &lt;code>&quot;select&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::select&lt;/code>&lt;/em>.&lt;/p>"/>
    <classes name="NullExpression" label="NullExpression" comment="&lt;p>A NullExpression is an Expression that results in a null value. It must be typed by a &lt;code>&lt;em>NullEvaluation&lt;/em>&lt;/code> that results in an empty value.&lt;/p>&#xA;&#xA;specializesFromLibrary(&quot;Performances::nullEvaluations&quot;)"/>
    <classes name="FeatureChainExpression" label="FeatureChainExpression" comment="&lt;p>A FeatureChainExpression is an OperatorExpression whose operator is &lt;code>&quot;.&quot;&lt;/code>, which resolves to the library Function &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em>. It evaluates to the result of chaining the &lt;code>result&lt;/code> Feature of its single &lt;code>argument&lt;/code> Expression with its &lt;code>targetFeature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The first two &lt;code>members&lt;/code> of a FeatureChainExpression must be its single &lt;code>argument&lt;/code> Expression and its &lt;code>targetFeature&lt;/code>. Its only other &lt;code>members&lt;/code> shall be those necessary to complete it as an InvocationExpression.&lt;/p>"/>
    <classes name="LiteralInteger" label="LiteralInteger" comment="&lt;p>A LiteralInteger is a LiteralExpression that provides an &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>Integer&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="LiteralString" label="LiteralString" comment="&lt;p>A LiteralString is a LiteralExpression that provides a &lt;code>&lt;em>String&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> parameter must have the type &lt;code>&lt;em>String&lt;/em>&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="AssociationStructure" label="AssociationStructure" comment="specializesFromLibrary(&quot;Objects::ObjectLink&quot;)&#xA;endFeature->size() = 2 implies&#xA;    specializesFromLibrary(&quot;Objects::BinaryLinkObject&quot;)"/>
    <properties name="connectorIsDirected" label="connectorIsDirected" comment="&lt;p>For a binary Connector, whether or not the Connector should be considered to have a direction from &lt;code>source&lt;/code> to &lt;code>target&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorRelatedFeature" label="connectorRelatedFeature" comment="&lt;p>The Features that are related by this Connector considered as a Relationship and restrict the links it identifies, derived as the referenced Features of the &lt;code>connectorEnds&lt;/code> of the Connector.&lt;/p>&#xA;"/>
    <properties name="connectorAssociation" label="connectorAssociation" comment="&lt;p>The Associations that type the Connector.&lt;/p>&#xA;"/>
    <properties name="connectorConnectorEnd" label="connectorConnectorEnd" comment="&lt;p>The &lt;code>endFeatures&lt;/code> of a Connector, which redefine the &lt;code>endFeatures&lt;code> of the &lt;code>associations&lt;/code> of the Connector. The &lt;code>connectorEnds&lt;/code> determine via ReferenceSubsetting Relationships which Features are related by the Connector.&lt;/p>"/>
    <properties name="connectorSourceFeature" label="connectorSourceFeature" comment="&lt;p>The source &lt;code>relatedFeature&lt;/code> for this Connector. It is  derived as the first &lt;code>relatedFeature&lt;/code>.&lt;/p>"/>
    <properties name="connectorTargetFeature" label="connectorTargetFeature" comment="&lt;p>The target &lt;code>relatedFeatures&lt;/code> for this Connector. This includes all the &lt;code>relatedFeatures&lt;/code> other than the &lt;code>sourceFeature&lt;/code>.&lt;/p>"/>
    <properties name="associationRelatedType" label="associationRelatedType" comment="&lt;p>The &lt;code>types&lt;/code> of the &lt;code>associationEnds&lt;/code> of the Association, which are the &lt;code>relatedElements&lt;/code> of the Association considered as a Relationship.&lt;/p>&#xA;"/>
    <properties name="associationSourceType" label="associationSourceType" comment="&lt;p>The source &lt;code>relatedType&lt;/code> for this Association. It is the first &lt;code>relatedType&lt;/code> of the Association.&lt;/p>&#xA;"/>
    <properties name="associationTargetType" label="associationTargetType" comment="&lt;p>The target &lt;code>relatedTypes&lt;/code> for this Association. This includes all the &lt;code>relatedTypes&lt;/code> other than the &lt;code>sourceType&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="associationAssociationEnd" label="associationAssociationEnd" comment="&lt;p>The &lt;code>features&lt;/code> of the Association that identify the things that can be related by it. A concrete Association must have at least two &lt;code>associationEnds&lt;/code>. When it has exactly two, the Association is called a &lt;em>binary&lt;/em> Association.&lt;/p> &#xA;&#xA;&lt;p>The ends of the Association determine which elements are eligible to be related by instances of the Association.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwnedMemberFeature" label="featureMembershipOwnedMemberFeature" comment="&lt;p>The Feature that this FeatureMembership relates to its &lt;code>owningType&lt;/code>, making it an &lt;code>ownedFeature&lt;/code> of the &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="featureMembershipOwningType" label="featureMembershipOwningType" comment="&lt;p>The Type that owns this FeatureMembership.&lt;/p>"/>
    <properties name="libraryPackageIsStandard" label="libraryPackageIsStandard" comment="&lt;p>Whether this LibraryPackage contains a standard library model. This should only be set to true for LibraryPackage in the standard Kernel Libraries or in normative model libraries for a language built on KerML.&lt;/p>"/>
    <properties name="subsettingSubsettedFeature" label="subsettingSubsettedFeature" comment="&lt;p>The Feature that is subsetted by the &lt;code>subsettingFeature&lt;/code> of this Subsetting.&lt;/p>&#xA;"/>
    <properties name="subsettingSubsettingFeature" label="subsettingSubsettingFeature" comment="&lt;p>The Feature that is a subset of the &lt;code>subsettedFeature&lt;/code> of this Subsetting.&lt;/p>&#xA;"/>
    <properties name="subsettingOwningFeature" label="subsettingOwningFeature" comment="&lt;p>The Feature that owns this Subsetting relationship, which must also be its &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementAliasIds" label="elementAliasIds" comment="&lt;p>Various alternative identifiers for this Element. Generally, these will be set by tools.&lt;/p>"/>
    <properties name="elementDeclaredShortName" label="elementDeclaredShortName" comment="&lt;p>An optional alternative name for the &lt;code>Element&lt;/code> that is intended to be shorter or in some way more succinct than its primary &lt;code>name&lt;/code>. It may act as a modeler-specified identifier for the &lt;code>Element&lt;/code>, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.&lt;/p> &#xA;"/>
    <properties name="elementDeclaredName" label="elementDeclaredName" comment="&lt;p>The declared name of this &lt;code>Element&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementShortName" label="elementShortName" comment="&lt;p>The short name to be used for this &lt;code>Element&lt;/code> during name resolution within its &lt;code>owningNamespace&lt;/code>. This is derived using the &lt;code>effectiveShortName()&lt;/code> operation. By default, it is the same as the &lt;code>declaredShortName&lt;/code>, but this is overridden for certain kinds of &lt;code>Elements&lt;/code> to compute a &lt;code>shortName&lt;/code> even when the &lt;code>declaredName&lt;/code> is null.&lt;/p>"/>
    <properties name="elementQualifiedName" label="elementQualifiedName" comment="&lt;p>The full ownership-qualified name of this &lt;code>Element&lt;/code>, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The &lt;code>qualifiedName&lt;/code> is null if this &lt;code>Element&lt;/code> has no &lt;code>owningNamespace&lt;/code> or if there is not a complete ownership chain of named &lt;code>Namespaces&lt;/code> from a root &lt;code>Namespace&lt;/code> to this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="elementIsImpliedIncluded" label="elementIsImpliedIncluded" comment="&lt;p>Whether all necessary implied Relationships have been included in the &lt;code>ownedRelationships&lt;/code> of this Element. This property may be true, even if there are not actually any &lt;code>ownedRelationships&lt;/code> with &lt;code>isImplied = true&lt;/code>, meaning that no such Relationships are actually implied for this Element. However, if it is false, then &lt;code>ownedRelationships&lt;/code> may &lt;em>not&lt;/em> contain any implied Relationships. That is, either &lt;em>all&lt;/em> required implied Relationships must be included, or none of them.&lt;/p>"/>
    <properties name="elementIsLibraryElement" label="elementIsLibraryElement" comment="&lt;p>Whether this Element is contained in the ownership tree of a library model.&lt;/p>"/>
    <properties name="elementOwningMembership" label="elementOwningMembership" comment="&lt;p>The &lt;code>owningRelationship&lt;/code> of this Element, if that Relationship is a Membership.&lt;/p>&#xA;"/>
    <properties name="elementOwningNamespace" label="elementOwningNamespace" comment="&lt;p>The Namespace that owns this Element, derived as the &lt;code>membershipOwningNamespace&lt;/code> of the &lt;code>owningMembership&lt;/code> of this Element, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwningRelationship" label="elementOwningRelationship" comment="&lt;p>The Relationship for which this Element is an &lt;tt>ownedRelatedElement&lt;/tt>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwnedRelationship" label="elementOwnedRelationship" comment="&lt;p>The Relationships for which this Element is the &lt;tt>owningRelatedElement&lt;/tt>.&lt;/p>"/>
    <properties name="elementOwner" label="elementOwner" comment="&lt;p>The owner of this Element, derived as the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>owningRelationship&lt;/code> of this Element, if any.&lt;/p>"/>
    <properties name="elementOwnedElement" label="elementOwnedElement" comment="&lt;p>The Elements owned by this Element, derived as the &lt;tt>ownedRelatedElements&lt;/tt> of the &lt;tt>ownedRelationships&lt;/tt> of this Element.&lt;/p>&#xA;"/>
    <properties name="elementDocumentation" label="elementDocumentation" comment="&lt;p>The Documentation owned by this Element.&lt;/p>"/>
    <properties name="elementOwnedAnnotation" label="elementOwnedAnnotation" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Element that are Annotations, for which this Element is the &lt;code>annotatedElement&lt;/code>.&lt;/code>"/>
    <properties name="elementTextualRepresentation" label="elementTextualRepresentation" comment="&lt;p>The &lt;code>textualRepresentations&lt;/code> that annotate this Element.&lt;/p>"/>
    <properties name="namespaceMembership" label="namespaceMembership" comment="&lt;p>All Memberships in this Namespace, including (at least) the union of &lt;code>ownedMemberships&lt;/code> and &lt;code>importedMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedImport" label="namespaceOwnedImport" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Namespace that are Imports, for which the Namespace is the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceMember" label="namespaceMember" comment="&lt;p>The set of all member Elements of this Namespace, derived as the &lt;code>memberElements&lt;/code> of all &lt;code>memberships&lt;/code> of the Namespace.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMember" label="namespaceOwnedMember" comment="&lt;p>The owned &lt;code>members&lt;/code> of this Namespace, derived as the &lt;cpde>ownedMemberElements&lt;/code> of the &lt;code>ownedMemberships&lt;/code> of the Namespace.&lt;/p>&#xA;"/>
    <properties name="namespaceImportedMembership" label="namespaceImportedMembership" comment="&lt;p>The Memberships in this Namespace that result from Import Relationships between the Namespace and other Namespaces.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMembership" label="namespaceOwnedMembership" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Namespace that are Memberships, for which the Namespace is the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="operatorExpressionOperator" label="operatorExpressionOperator" comment="&lt;p>An operator symbol that names a corresponding Function from one of the standard Function packages from the Kernel Model Library .&lt;/p>"/>
    <properties name="operatorExpressionOperand" label="operatorExpressionOperand"/>
    <properties name="resultExpressionMembershipOwnedResultExpression" label="resultExpressionMembershipOwnedResultExpression" comment="&lt;p>The Expression that provides the result for the owner of the ResultExpressionMembership.&lt;/p>"/>
    <properties name="classifierOwnedSubclassification" label="classifierOwnedSubclassification" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this Classifier that are Subclassifications, for which this Classifier is the &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="stepBehavior" label="stepBehavior" comment="&lt;p>The Behaviors that type this Step.&lt;/p>&#xA;"/>
    <properties name="stepParameter" label="stepParameter" comment="&lt;p>The parameters of this Expression, which are all its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the Behavior.&lt;/p>&#xA;"/>
    <properties name="featureValueIsInitial" label="featureValueIsInitial" comment="&lt;p>Whether this FeatureValue specifies a bound value or an initial value for the &lt;code>featureWithValue&lt;/code>.&lt;/p>"/>
    <properties name="featureValueIsDefault" label="featureValueIsDefault" comment="&lt;p>Whether this FeatureValue is a concrete specification of the bound of initial value of the &lt;code>featureWithValue&lt;/code>, or just a default value that may be overridden.&lt;/p>"/>
    <properties name="featureValueFeatureWithValue" label="featureValueFeatureWithValue" comment="&lt;p>The Feature to be provided a value.&lt;/p>&#xA;&#xA;&lt;p>The Feature to be provided a value.&lt;/p>"/>
    <properties name="featureValueValue" label="featureValueValue" comment="&lt;p>The Expression that provides the value of the &lt;code>featureWithValue&lt;/code> as its &lt;code>result&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Expression that provides the value as a result.&lt;/p>"/>
    <properties name="metadataFeatureMetaclass" label="metadataFeatureMetaclass" comment="&lt;p>The &lt;code>type&lt;/code> of this AnnotatingFeature, which must be a DataType.&lt;/p>"/>
    <properties name="featuringType" label="featuringType" comment="&lt;p>The Type that features the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featuringFeature" label="featuringFeature" comment="&lt;p>The Feature that is featured by the &lt;code>featuringType&lt;/code>.&lt;/p>"/>
    <properties name="metadataAccessExpressionReferencedElement" label="metadataAccessExpressionReferencedElement" comment="&lt;p> The Element whose metadata is being accessed.&lt;/p>"/>
    <properties name="annotatingElementAnnotation" label="annotatingElementAnnotation" comment="&lt;p>The Annotations that relate this AnnotatingElement to its &lt;code>annotatedElements&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotatedElement" label="annotatingElementAnnotatedElement" comment="&lt;p>The Elements that are annotated by this AnnotatingElement. If &lt;code>annotation&lt;/code&lt;> is not empty, this is derived as the &lt;code>annotatedElements&lt;/code> of the &lt;code>annotations&lt;/code>. If &lt;code>annotation&lt;/code>, then it is derived as the &lt;code>owningNamespace&lt;/code> of the AnnotatingElement.&lt;/p>&#xA;"/>
    <properties name="featureInvertingFeatureInverted" label="featureInvertingFeatureInverted" comment="&lt;p>Feature that is an the inverse of &lt;code>invertingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingInvertingFeature" label="featureInvertingInvertingFeature" comment="&lt;p>Feature that is an inverse of &lt;code>invertedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingOwningFeature" label="featureInvertingOwningFeature" comment="&lt;p>A &lt;code>featureInverted&lt;/code> that is also an &lt;code>owningRelatedElement&lt;code>.&lt;/p>"/>
    <properties name="multiplicityRangeLowerBound" label="multiplicityRangeLowerBound" comment="&lt;p>The Expression whose result provides the lower bound of MultiplicityRange. If no &lt;code>lowerBound&lt;/code> Expression is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (&lt;code>*&lt;/code>), in which case the lower bound shall be 0.&lt;/p>&#xA;"/>
    <properties name="multiplicityRangeUpperBound" label="multiplicityRangeUpperBound" comment="The Expression whose result is the upper bound of the MultiplicityRange."/>
    <properties name="multiplicityRangeBound" label="multiplicityRangeBound" comment="&lt;p>The bound Expressions of the MultiplicityRange. These shall be the only &lt;code>ownedMembers&lt;/code> of the MultiplicityRange.&lt;/p>"/>
    <properties name="elementFilterMembershipCondition" label="elementFilterMembershipCondition" comment="&lt;p>The model-level evaluable Boolean Expression used to filter the &lt;code>members&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> of this ElementFilterMembership.&lt;/p>"/>
    <properties name="parameterMembershipOwnedMemberParameter" label="parameterMembershipOwnedMemberParameter" comment="&lt;p>The Feature that is identified as a parameter by this ParameterMembership, which is always owned by the ParameterMembership.&lt;/p>&#xA;"/>
    <properties name="literalIntegerValue" label="literalIntegerValue" comment="&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="successionTransitionStep" label="successionTransitionStep" comment="&lt;p>A Step that is typed by the Behavior &lt;em>TransitionPerformance&lt;/em> (from the Model Library) that has this Succession as its &lt;em>&lt;code>transitionLink&lt;/code>&lt;/em>.&lt;/p>&#xA;"/>
    <properties name="successionTriggerStep" label="successionTriggerStep" comment="&lt;p>Steps that map incoming events to the timing of occurrences of the &lt;code>transitionStep&lt;/code>. The values of &lt;code>triggerStep&lt;/code> subset the list of acceptable events to be received by a Behavior or the object that performs it.&lt;/p>&#xA;"/>
    <properties name="successionEffectStep" label="successionEffectStep" comment="&lt;p>Steps that represent occurrences that are side effects of the &lt;code>transitionStep&lt;/code> occurring.&lt;/p>&#xA;"/>
    <properties name="successionGuardExpression" label="successionGuardExpression" comment="&lt;p>Expressions that must evaluate to true before the &lt;code>transitionStep&lt;/code> can occur.&lt;/p>&#xA;"/>
    <properties name="literalBooleanValue" label="literalBooleanValue" comment="&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="relationshipIsImplied" label="relationshipIsImplied" comment="&lt;p>Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.&lt;/p>"/>
    <properties name="relationshipOwnedRelatedElement" label="relationshipOwnedRelatedElement" comment="&lt;p>The &lt;tt>relatedElements&lt;/tt> of this Relationship that are owned by the Relationship.&lt;/p>"/>
    <properties name="relationshipOwningRelatedElement" label="relationshipOwningRelatedElement" comment="&lt;p>The &lt;tt>relatedElement&lt;/tt> of this Relationship that owns the Relationship, if any.&lt;/p>"/>
    <properties name="relationshipRelatedElement" label="relationshipRelatedElement" comment="&lt;p>The Elements that are related by this Relationship, derived as the union of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code> Elements of the Relationship.&lt;/p>"/>
    <properties name="relationshipTarget" label="relationshipTarget" comment="&lt;p>The &lt;code>relatedElements&lt;/code> to which this Relationship is considered to be directed.&lt;/p>&#xA;"/>
    <properties name="relationshipSource" label="relationshipSource" comment="&lt;p>The &lt;code>relatedElements&lt;/c ode> from which this Relationship is considered to be directed.&lt;/p>"/>
    <properties name="typeFeaturingOwningFeatureOfType" label="typeFeaturingOwningFeatureOfType" comment="&lt;p>The Feature that owns this TypeFeaturing and is also the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingFeatureOfType" label="typeFeaturingFeatureOfType" comment="&lt;p>The Feature that is featured by the &lt;code>featuringType&lt;/code>. It is the &lt;code>source&lt;/code> of the Relationship.&lt;/p>"/>
    <properties name="typeFeaturingFeaturingType" label="typeFeaturingFeaturingType" comment="&lt;p>The Type that features the &lt;code>featureOfType&lt;/code>. It is the &lt;code>target&lt;/code> of the Relationship.&lt;/p>"/>
    <properties name="redefinitionRedefiningFeature" label="redefinitionRedefiningFeature" comment="&lt;p>The Feature that is redefining the &lt;code>redefinedFeature&lt;/code> of this Redefinition.&lt;/p>&#xA;"/>
    <properties name="redefinitionRedefinedFeature" label="redefinitionRedefinedFeature" comment="&lt;p>The Feature that is redefined by the &lt;code>redefiningFeature&lt;/code> of this Redefinition.&lt;/p>&#xA;"/>
    <properties name="membershipMemberElementId" label="membershipMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>memberElement&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberShortName" label="membershipMemberShortName" comment="&lt;p>The short name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberName" label="membershipMemberName" comment="&lt;p>The name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipVisibility" label="membershipVisibility" comment="&lt;p>Whether or not the Membership of the &lt;code>memberElement&lt;/code> in the &lt;code>membershipOwningNamespace&lt;/code> is publicly visible outside that Namespace.&lt;/p>&#xA;"/>
    <properties name="membershipMembershipOwningNamespace" label="membershipMembershipOwningNamespace" comment="&lt;p>The Namespace of which the &lt;code>memberElement&lt;/code> becomes a &lt;cpde>member&lt;/code> due to this Membership.&lt;/p>&#xA;"/>
    <properties name="membershipMemberElement" label="membershipMemberElement" comment="&lt;p>The Element that becomes a &lt;code>member&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this Membership.&lt;/p>&#xA;"/>
    <properties name="literalRationalValue" label="literalRationalValue" comment="&lt;p>The value whose rational approximation is the result of evaluating this Expression.&lt;/p>&#xA;&#xA;&lt;p>The Real value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="documentationDocumentedElement" label="documentationDocumentedElement" comment="&lt;p>The Element that is documented by this Documentation.&lt;/p>"/>
    <properties name="featureIsUnique" label="featureIsUnique" comment="&lt;p>Whether or not values for this Feature must have no duplicates or not.&lt;/p>&#xA;"/>
    <properties name="featureIsOrdered" label="featureIsOrdered" comment="&lt;p>Whether an order exists for the values of this Feature or not.&lt;/p>"/>
    <properties name="featureIsComposite" label="featureIsComposite" comment="&lt;p>Whether the Feature is a composite &lt;code>feature&lt;/code> of its &lt;code>featuringType&lt;/code>. If so, the values of the Feature cannot exist after the instance of the &lt;code>featuringType&lt;/code> no longer does.&lt;/p>&#xA;"/>
    <properties name="featureIsEnd" label="featureIsEnd" comment="&lt;p>Whether or not the this Feature is an end Feature, requiring a different interpretation of the &lt;code>multiplicity&lt;/code> of the Feature.&lt;/p>&#xA;&#xA;&lt;p>An end Feature is always considered to map each domain entity to a single co-domain entity, whether or not a Multiplicity is given for it. If a Multiplicity is given for an end Feature, rather than giving the co-domain cardinality for the Feature as usual, it specifies a cardinality constraint for &lt;em>navigating&lt;/em> across the &lt;code>endFeatures&lt;/code> of the &lt;code>featuringType&lt;/code> of the end Feature. That is, if a Type has &lt;em>n&lt;/em> &lt;code>endFeatures&lt;/code>, then the Multiplicity of any one of those end Features constrains the cardinality of the set of values of that Feature when the values of the other &lt;em>n-1&lt;/em> end Features are held fixed.&lt;/p>&#xA;"/>
    <properties name="featureIsDerived" label="featureIsDerived" comment="&lt;p>Whether the values of this Feature&amp;nbsp;can always be computed from the values of other Features.&lt;/p>&#xA;"/>
    <properties name="featureIsReadOnly" label="featureIsReadOnly" comment="&lt;p>Whether the values of this Feature can change over the lifetime of an instance of the domain.&lt;/p>&#xA;"/>
    <properties name="featureIsPortion" label="featureIsPortion" comment="&lt;p>Whether the values of this Feature are contained in the space and time of instances of the Feature&amp;#39;s domain.&lt;/p>&#xA;"/>
    <properties name="featureDirection" label="featureDirection" comment="&lt;p>Determines how values of this Feature are determined or used (see FeatureDirectionKind).&lt;/p>&#xA;"/>
    <properties name="featureIsNonunique" label="featureIsNonunique"/>
    <properties name="featureOwningType" label="featureOwningType" comment="&lt;p>The Type that is the &lt;code>owningType&lt;/code> of the &lt;code>owningFeatureMembership&lt;/code> of this Type.&lt;/p>"/>
    <properties name="featureType" label="featureType" comment="&lt;p>Types that restrict the values of this Feature, such that the values must be instances of all the types. The types of a Feature are derived from its &lt;code>ownedFeatureTypings&lt;/code> and the &lt;code>types&lt;/code> of its &lt;code>ownedSubsettings&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwnedRedefinition" label="featureOwnedRedefinition" comment="&lt;p>The &lt;code>ownedSubsettings&lt;/code> of this Feature that are Redefinitions, for which the Feature is the &lt;code>redefiningFeature&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="featureOwnedSubsetting" label="featureOwnedSubsetting" comment="&lt;p>The &lt;code>ownedGeneralizations&lt;/code> of this Feature that are Subsettings, for which the Feature is the &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureEndOwningType" label="featureEndOwningType" comment="&lt;p>The Type that is related to this Feature by an EndFeatureMembership in which the Feature is an &lt;code>ownedMemberFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTyping" label="featureOwnedTyping" comment="&lt;p>The &lt;code>ownedGeneralizations&lt;/code> of this Feature that are FeatureTypings, for which the Feature is the &lt;code>typedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureFeaturingType" label="featureFeaturingType" comment="&lt;p>Types that feature this Feature, such that any instance in the domain of the Feature must be classified by all of these Types, including at least all the &lt;code>featuringTypes&lt;/code> of its &lt;code>ownedTypeFeaturings&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTypeFeaturing" label="featureOwnedTypeFeaturing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Feature that are TypeFeaturings, for which the Feature is the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeature" label="featureChainingFeature" comment="&lt;p>The Features that are chained together to determine the values of this Feature, derived from the &lt;code>chainingFeatures&lt;/code> of the &lt;code>ownedFeatureChainings&lt;/code> of this Feature, in the same order. The values of a Feature with chainingFeatures are the same as values of the last Feature in the chain, which can be found by starting with the values of the first Feature (for each instance of the original Feature's domain), then on each of those to the values of the second Feature in chainingFeatures, and so on, to values of the last Feature. The Features related to a Feature by a FeatureChaining are identified as its chainingFeatures.&lt;/p>"/>
    <properties name="featureOwnedFeatureInverting" label="featureOwnedFeatureInverting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Feature that are FeatureInvertings, for which the Feature is the &lt;code>featureInverted&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureChaining" label="featureOwnedFeatureChaining" comment="&lt;p>The FeatureChainings that are among the &lt;code>ownedRelationships&lt;/owned> of this Feature (identify their &lt;code>featureChained&lt;/code> also as an &lt;code>owningRelatedElement&lt;/code>).&lt;/p>"/>
    <properties name="featureOwnedReferenceSubsetting" label="featureOwnedReferenceSubsetting" comment="&lt;p>The one &lt;code>ownedSubsetting&lt;/code> of this Feature, if any, that is a ReferenceSubsetting, for which the Feature is the &lt;code>referencingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwningFeatureMembership" label="featureOwningFeatureMembership" comment="&lt;p>The FeatureMembership that owns this Feature as an &lt;code>ownedMemberFeature&lt;/code>, determining its &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="subclassificationSuperclassifier" label="subclassificationSuperclassifier" comment="&lt;p>The more general Classifier in this Subclassification.&lt;/p>"/>
    <properties name="subclassificationOwningClassifier" label="subclassificationOwningClassifier" comment="&lt;p>The Classfier that owns this Subclassification relationship, which must also be its &lt;code>subclassifier&lt;/code>.&lt;/p>"/>
    <properties name="subclassificationSubclassifier" label="subclassificationSubclassifier" comment="&lt;p>The more specific Classifier in this Subclassification.&lt;/p>"/>
    <properties name="disjoiningTypeDisjoined" label="disjoiningTypeDisjoined" comment="&lt;p>Type asserted to be disjoint with the &lt;code>disjoiningType&lt;/code>.&lt;p>"/>
    <properties name="disjoiningDisjoiningType" label="disjoiningDisjoiningType" comment="&lt;p>Type asserted to be disjoint with the &lt;code>typeDisjoined&lt;/code>.&lt;p>"/>
    <properties name="disjoiningOwningType" label="disjoiningOwningType" comment="&lt;p>A &lt;code>typeDisjoined&lt;/code> that is also an &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="booleanExpressionPredicate" label="booleanExpressionPredicate" comment="&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;"/>
    <properties name="dependencyClient" label="dependencyClient" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> dependent on the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>"/>
    <properties name="dependencySupplier" label="dependencySupplier" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> on which the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> depend in some respect.&lt;/p>"/>
    <properties name="itemFlowItemType" label="itemFlowItemType" comment="&lt;p>The type of  items transferred, derived as the &lt;code>type&lt;/code> of the &lt;code>itemFeature&lt;/code> of the ItemFlow.&lt;/p>&#xA;&#xA;"/>
    <properties name="itemFlowTargetInputFeature" label="itemFlowTargetInputFeature" comment="&lt;p>The Feature that receives the items carried by the ItemFlow. It must be an owned &lt;code>output&lt;/code> of the target participant of the ItemFlow.&lt;/p>"/>
    <properties name="itemFlowSourceOutputFeature" label="itemFlowSourceOutputFeature" comment="&lt;p>The Feature that provides the items carried by the ItemFlow. It must be an owned &lt;code>output&lt;/code> of the &lt;code>source&lt;/code> of the ItemFlow.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFlowEnd" label="itemFlowItemFlowEnd" comment="&lt;p>The &lt;code>connectorEnds&lt;/code> of this ItemFlow that are ItemFlowEnds.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFeature" label="itemFlowItemFeature" comment="&lt;p>The Feature of the ItemFlow that is an ItemFeature.&lt;/p>&#xA;"/>
    <properties name="itemFlowInteraction" label="itemFlowInteraction" comment="&lt;p>The Interactions that type this ItemFlow. Interactions are both Associations and Behaviors, which can type Connectors and Steps, respectively.&lt;/p>"/>
    <properties name="referenceSubsettingReferencedFeature" label="referenceSubsettingReferencedFeature" comment="&lt;p>The Feature that is referenced by the &lt;code>referencingFeature&lt;/code> of this ReferenceSubsetting.&lt;/p>"/>
    <properties name="referenceSubsettingReferencingFeature" label="referenceSubsettingReferencingFeature" comment="&lt;p>The Feature that owns this ReferenceSubsetting relationship, which is also its &lt;code>subsettingFeature&lt;/code>.&lt;/p>"/>
    <properties name="membershipImportImportedMembership" label="membershipImportImportedMembership" comment="&lt;p>The Membership to be imported.&lt;/p>"/>
    <properties name="annotationAnnotatingElement" label="annotationAnnotatingElement" comment="&lt;p>The AnnotatingElement that annotates the &lt;code>annotatedElement&lt;/code> of this Annotation.&lt;/p>&#xA;"/>
    <properties name="annotationOwningAnnotatedElement" label="annotationOwningAnnotatedElement" comment="&lt;p>The &lt;code>annotatedElement&lt;/code> of this Annotation, when it is also its &lt;code>owningRelatedElement&lt;/code>."/>
    <properties name="annotationAnnotatedElement" label="annotationAnnotatedElement" comment="&lt;p>The Element that is annotated by the &lt;code>annotatingElement&lt;/code> of this Annotation.&lt;/p>"/>
    <properties name="featureChainExpressionTargetFeature" label="featureChainExpressionTargetFeature" comment="&lt;p>The Feature that is accessed by this FeatureChainExpression, derived as its second &lt;code>member&lt;/code> Feature (the first being its one &lt;code>argument&lt;/code> Expression). This Feature must redefine the &lt;em>&lt;code>target&lt;/code> Feature of the Function &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em>.&lt;/p>"/>
    <properties name="packageFilterCondition" label="packageFilterCondition" comment="&lt;p>The model-level evaluable Boolean Expressions used to filter the &lt;code>members&lt;/code> of this Package, derived as those &lt;code>ownedMembers&lt;/code> of the Package that are owned via ElementFilterMembership.&lt;/p>"/>
    <properties name="behaviorStep" label="behaviorStep" comment="&lt;p>The Steps that make up this Behavior.&lt;/p>&#xA;"/>
    <properties name="behaviorParameter" label="behaviorParameter" comment="&lt;p>The parameters of this Behavior, which are all its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the Behavior.&lt;/p>&#xA;"/>
    <properties name="functionIsModelLevelEvaluable" label="functionIsModelLevelEvaluable" comment="&lt;p>Whether this Function can be used as the &lt;code>function&lt;/code> of a model-level evaluable InvocationExpression.&lt;/p>"/>
    <properties name="functionExpression" label="functionExpression" comment="&lt;p>The Expressions that are steps in the calculation of the &lt;code>result&lt;/code> of this Function.&lt;/p>&#xA;&#xA;&lt;p>The set of expressions that represent computational steps or parts of a system of equations within the Function.&lt;/p>&#xA;"/>
    <properties name="functionResult" label="functionResult" comment="&lt;p>The &lt;code>result&lt;/code> parameter of the Function, derived as the single &lt;code>parameter&lt;/code> of the Function with direction &lt;code>out&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The object or value that is the result of evaluating the Function.&lt;/p>"/>
    <properties name="invariantIsNegated" label="invariantIsNegated" comment="&lt;p>Whether this Invariant is asserted to be false rather than true.&lt;/p>"/>
    <properties name="featureReferenceExpressionReferent" label="featureReferenceExpressionReferent" comment="&lt;p>The Feature that is referenced by this FeatureReferenceExpression, derived as its first &lt;code>member&lt;/code> Feature.&lt;/p>"/>
    <properties name="invocationExpressionArgument" label="invocationExpressionArgument" comment="&lt;p>The &lt;code>value&lt;/code> &lt;code>Expressions&lt;/code> of the &lt;code>FeatureValues&lt;/code> of the input &lt;code>parameters&lt;/code> of the &lt;code>InvocationExpression&lt;/code>."/>
    <properties name="namespaceImportImportedNamespace" label="namespaceImportImportedNamespace" comment="&lt;p>The Namespace whose visible Memberships are imported by this NamespaceImport.&lt;/p>&#xA;"/>
    <properties name="importVisibility" label="importVisibility" comment="&lt;p>The visibility level of the imported &lt;code>members&lt;/code> from this Import relative to the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="importIsRecursive" label="importIsRecursive" comment="&lt;p>Whether to recursively import Memberships from visible, owned sub-Namespaces.&lt;/p>"/>
    <properties name="importIsImportAll" label="importIsImportAll" comment="&lt;p>Whether to import memberships without regard to declared visibility.&lt;/p>&#xA;"/>
    <properties name="importImportedElement" label="importImportedElement" comment="&lt;p>The effectively imported Element for this Import. For a MembershipImport, this is the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code>. For a NamespaceImport, it is the &lt;code>importedNamespace&lt;/code>.&lt;/p>"/>
    <properties name="importImportOwningNamespace" label="importImportOwningNamespace" comment="&lt;p>The Namespace into which Memberships are imported by this Import, which must be the &lt;code>owningRelatedElement&lt;/code> of the Import.&lt;/p> &#xA;"/>
    <properties name="differencingDifferencingType" label="differencingDifferencingType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeDifferenced&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>"/>
    <properties name="differencingTypeDifferenced" label="differencingTypeDifferenced" comment="&lt;p>Type with interpretations partly determined by &lt;code>differencingType&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberElementId" label="owningMembershipOwnedMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberShortName" label="owningMembershipOwnedMemberShortName" comment="&lt;p>The &lt;code>shortName&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberName" label="owningMembershipOwnedMemberName" comment="&lt;p>The &lt;code>name&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElement" label="owningMembershipOwnedMemberElement" comment="&lt;p>The Element that becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this OwningMembership. Derived as the first &lt;code>ownedRelatedElement&lt;/code> of the OwningRelationship.&lt;/p>&#xA;&#xA;"/>
    <properties name="specializationGeneral" label="specializationGeneral" comment="&lt;p>A Type with a superset of all instances of the &lt;code>specific&lt;/code> Type, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationSpecific" label="specializationSpecific" comment="&lt;p>A Type with a subset of all instances of the &lt;code>general&lt;/code> Type, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationOwningType" label="specializationOwningType" comment="&lt;p>The Type that is the &lt;code>specific&lt;/code> Type of this Specialization and owns it as its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="commentLocale" label="commentLocale" comment="&lt;p>Identification of the language of the &lt;code>body&lt;/code> text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format &lt;code>[language[_territory][.codeset][@modifier]]&lt;/code>.&lt;/p>"/>
    <properties name="commentBody" label="commentBody" comment="&lt;p>The annotation text for the Comment.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationLanguage" label="textualRepresentationLanguage" comment="&lt;p>The natural or artifical language in which the &lt;code>body&lt;/code> text is written.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationBody" label="textualRepresentationBody" comment="&lt;p>The textual representation of the &lt;code>representedElement&lt;/code> in the given &lt;code>language&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationRepresentedElement" label="textualRepresentationRepresentedElement" comment="&lt;p>The Element that is represented by this TextualRepresentation.&lt;/p>"/>
    <properties name="expressionIsModelLevelEvaluable" label="expressionIsModelLevelEvaluable" comment="&lt;p>Whether this Expression meets the constraints necessary to be evaluated at &lt;em>model level&lt;/em>, that is, using metadata within the model.&lt;/p>"/>
    <properties name="expressionFunction" label="expressionFunction" comment="&lt;p>The Function that types this Expression.&lt;/p>&#xA;&#xA;&lt;p>This is the Function that types the Expression.&lt;/p>&#xA;"/>
    <properties name="expressionResult" label="expressionResult" comment="&lt;p>&lt;p>The &lt;code>result&lt;/code> parameter of the Expression, derived as the single &lt;code>parameter&lt;/code> of the Expression with direction &lt;code>out&lt;/code>. The result of an Expression must either be inherited from its &lt;code>function&lt;/code> or (directly or indirectly) redefine the &lt;code>result&lt;/code> parameter of its &lt;code>function&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="unioningUnioningType" label="unioningUnioningType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeUnioned&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>"/>
    <properties name="unioningTypeUnioned" label="unioningTypeUnioned" comment="&lt;p>Type with interpretations partly determined by &lt;code>unioningType&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>"/>
    <properties name="conjugationOriginalType" label="conjugationOriginalType" comment="&lt;p>The Type to be conjugated.&lt;/P>"/>
    <properties name="conjugationConjugatedType" label="conjugationConjugatedType" comment="&lt;p>The Type that is the result of applying Conjugation to the &lt;code>originalType&lt;/code>.&lt;/p>"/>
    <properties name="conjugationOwningType" label="conjugationOwningType" comment="&lt;p>The &lt;code>conjugatedType&lt;/code> of this Type that is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="literalStringValue" label="literalStringValue" comment="&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>&#xA;&#xA;&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="featureTypingTypedFeature" label="featureTypingTypedFeature" comment="&lt;p>The Feature that has its Type determined by this FeatureTyping.&lt;/p>"/>
    <properties name="featureTypingType" label="featureTypingType" comment="&lt;p>The Type that is being applied by this FeatureTyping.&lt;/p>&#xA;"/>
    <properties name="featureTypingOwningFeature" label="featureTypingOwningFeature" comment="&lt;p>The Feature that owns this FeatureTyping (which must also be the &lt;code>typedFeature&lt;/code>).&lt;/p>"/>
    <properties name="featureChainingChainingFeature" label="featureChainingChainingFeature" comment="&lt;p>The Feature whose values partly determine values of &lt;code>featureChained&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeatureChained" label="featureChainingFeatureChained" comment="&lt;p>The Feature whose values are partly determined by values of the &lt;code>chainingFeature&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>"/>
    <properties name="typeIsAbstract" label="typeIsAbstract" comment="&lt;p>Indicates whether instances of this Type must also be instances of at least one of its specialized Types.&lt;/p>&#xA;"/>
    <properties name="typeIsSufficient" label="typeIsSufficient" comment="&lt;p>Whether all things that meet the classification conditions of this Type must be classified by the Type.&lt;/p>&#xA;&#xA;&lt;p>(A Type&amp;nbsp;gives conditions that must be met by whatever it classifies, but when &lt;code>isSufficient&lt;/code> is false, things may meet those conditions but still not be classified by the Type. For example, a Type &lt;code>&lt;em>Car&lt;/em>&lt;/code> that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would need to be cars. However, if the type &lt;code>&lt;em>Car&lt;/em>&lt;/code> were sufficient, it would classify all four-wheeled things.)&lt;/p>&#xA;"/>
    <properties name="typeIsConjugated" label="typeIsConjugated" comment="&lt;p>Indicates whether this Type has an &lt;code>ownedConjugator&lt;/code>. (See Conjugation.)&lt;/p>&#xA;"/>
    <properties name="typeOwnedSpecialization" label="typeOwnedSpecialization" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Specializations, for which the Type is the &lt;code>specific&lt;/code> Type.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeatureMembership" label="typeOwnedFeatureMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this Type that are FeatureMemberships, for which the Type is the &lt;code>owningType&lt;/code>. Each such FeatureMembership identifies an &lt;code>ownedFeature&lt;/code> of the Type.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeature" label="typeOwnedFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>ownedFeatureMemberships&lt;/code> of this Type.&lt;/code>&#xA;"/>
    <properties name="typeOwnedEndFeature" label="typeOwnedEndFeature" comment="&lt;p>All &lt;code>endFeatures&lt;/code> of this Type that are &lt;code>ownedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeFeature" label="typeFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>featureMemberships&lt;/code> of this Type.&lt;/p>&#xA;"/>
    <properties name="typeInput" label="typeInput" comment="&lt;p>All &lt;code>features&lt;/code> related to this Type by FeatureMemberships that have &lt;code>direction&lt;/code> &lt;code>in&lt;code> or &lt;code>inout&lt;code>.&lt;/p>&#xA;"/>
    <properties name="typeOutput" label="typeOutput" comment="&lt;p>All &lt;code>features&lt;/code> related to this Type by FeatureMemberships that have &lt;code>direction&lt;/code> &lt;code>out&lt;code> or &lt;code>inout&lt;code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedMembership" label="typeInheritedMembership" comment="&lt;p>All Memberships inherited by this Type via Generalization or Conjugation. These are included in the derived union for the &lt;code>memberships&lt;/code> of the Type.&lt;/p>"/>
    <properties name="typeEndFeature" label="typeEndFeature" comment="&lt;p>All &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> with &lt;code>isEnd = true&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedConjugator" label="typeOwnedConjugator" comment="&lt;p>A Conjugation owned by this Type for which the Type is the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedFeature" label="typeInheritedFeature" comment="&lt;p>All the &lt;code>memberFeatures&lt;/code> of the &lt;code>inheritedMemberships&lt;/code> of this Type.&lt;/p>&#xA;"/>
    <properties name="typeMultiplicity" label="typeMultiplicity" comment="&lt;p>The one &lt;code>member&lt;/code> (at most) of this Type that is a Multiplicity, which constrains the cardinality of the Type. A &lt;code>multiplicity&lt;/code> can be owned or inherited. If it is owned, the &lt;code>multiplicity&lt;/code> must redefine the &lt;code>multiplicity&lt;/code> (if it has one) of any &lt;code>general&lt;/code> Type of an &lt;code>ownedSpecialization&lt;/code> of this Type.&lt;/p>"/>
    <properties name="typeUnioningType" label="typeUnioningType" comment="&lt;p>The interpretations of a Type with code>unioningTypes&lt;/code> are asserted to be the same as those of all the &lt;code>unioningTypes&lt;/code> together, which are the Types  derived from the &lt;code>unioningType&lt;/code> of the &lt;code>ownedUnionings&lt;/code> of this Type.  For example, a Classifier for people might be the union of Classifiers for all the sexes. Similarly, a feature for people's children might be the union of features dividing them in the same ways as people in general.&lt;/p>"/>
    <properties name="typeOwnedIntersecting" label="typeOwnedIntersecting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Intersectings, have the Type as their &lt;code>typeIntersected&lt;/code>.&lt;/p>"/>
    <properties name="typeIntersectingType" label="typeIntersectingType" comment="&lt;p>The interpretations of a Type with code>intersectingTypes&lt;/code> are asserted to be those in common among the &lt;code>intersectingTypes&lt;/code>, which are the Types derived from the &lt;code>intersectingType&lt;/code> of the &lt;code>ownedIntersectings&lt;/code> of this Type.  For example, a Classifier might be an intersection of Classifiers for people of a particular sex and of a particular nationality.  Similarly, a feature for people's children of a particular sex might be the intersection of a feature for their children and a Classifier for people of that sex (because the interpretations of the children feature that identify those of that sex are also interpretations of the Classifier for that sex).&lt;p>"/>
    <properties name="typeOwnedUnioning" label="typeOwnedUnioning" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Unionings, having the Type as their &lt;code>typeUnioned&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedDisjoining" label="typeOwnedDisjoining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Disjoinings, for which the Type is the &lt;code>typeDisjoined&lt;/code> Type.&lt;/p>"/>
    <properties name="typeFeatureMembership" label="typeFeatureMembership" comment="&lt;p>The FeatureMemberships for &lt;code>features&lt;/code> of this Type, which include all &lt;code>ownedFeatureMemberships&lt;/code> and those &lt;code>inheritedMemberships&lt;/code> that are FeatureMemberships (but does &lt;em>not&lt;/em> include any &lt;code>importedMemberships&lt;/code>).&lt;/p>"/>
    <properties name="typeDifferencingType" label="typeDifferencingType" comment="&lt;p>The interpretations of a Type with &lt;code>differencingTypes&lt;/code> are asserted to be those of the first of those Types, but not including those of the remaining types. For example, a Classifier might be the difference of a Classifier for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a Classifier for people of a particular sex, identifying their children not of that sex (because the interpretations of the children feature that identify those of that sex are also interpretations of the Classifier for that sex).&lt;p>"/>
    <properties name="typeOwnedDifferencing" label="typeOwnedDifferencing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this Type that are Differencings, having this Type as their &lt;code>typeDifferenced&lt;/code>.&lt;/p>"/>
    <properties name="typeDirectedFeature" label="typeDirectedFeature" comment="&lt;p>The &lt;code>features&lt;/code> of this Type that have a non-null &lt;code>direction&lt;/code>.&lt;/p>"/>
    <properties name="intersectingIntersectingType" label="intersectingIntersectingType" comment="&lt;p>Type that partly determines interpretations of &lt;code>typeIntersected&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>"/>
    <properties name="intersectingTypeIntersected" label="intersectingTypeIntersected" comment="&lt;p>Type with interpretations partly determined by &lt;code>intersectingType&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>"/>
  </vocabularies>
</oscl4j_vocabulary:Vocabularies>
