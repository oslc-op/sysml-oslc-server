<?xml version="1.0" encoding="ASCII"?>
<oscl4j_vocabulary:Vocabularies xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:oscl4j_vocabulary="http://org.eclipse.lyo/oslc4j/vocabulary">
  <vocabularies namespaceURI="http://purl.org/dc/terms/" label="Dublin Core" preferredNamespacePrefix="dcterms">
    <properties name="title"/>
    <properties name="identifier"/>
    <properties name="description"/>
  </vocabularies>
  <vocabularies namespaceURI="https://www.omg.org/spec/SysML/20230201/vocab#" label="SysML Vocabulary" preferredNamespacePrefix="sysml_vocab">
    <classes name="ItemDefinition" label="ItemDefinition" comment="&lt;p>An &lt;code>ItemDefinition&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code> of the &lt;code>Structure&lt;/code> of things that may themselves be systems or parts of systems, but may also be things that are acted on by a system or parts of a system, but which do not necessarily perform actions themselves. This includes items that can be exchanged between parts of a system, such as water or electrical signals.&lt;/p>&#xA;&#xA;specializesFromLibrary('Items::Item')"/>
    <classes name="Structure" label="Structure" comment="&lt;p>A &lt;code>Structure&lt;/code> is a &lt;code>Class&lt;/code> of objects in the modeled universe that are primarily structural in nature. While such an object is not itself behavioral, it may be involved in and acted on by &lt;code>Behaviors&lt;/code>, and it may be the performer of some of them.&lt;/p>&#xA;&#xA;specializesFromLibrary('Objects::Object')&#xA;ownedSpecialization.general->forAll(not oclIsKindOf(Behavior))"/>
    <classes name="Class" label="Class" comment="&lt;p>A &lt;code>Class&lt;/code> is a &lt;code>Classifier&lt;/code> of things (in the universe) that can be distinguished without regard to how they are related to other things (via &lt;code>Features&lt;/code>). This means multiple things classified by the same &lt;code>Class&lt;/code> can be distinguished, even when they are related other things in exactly the same way.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurrences::Occurrence')&#xA;ownedSpecialization.general->&#xA;    forAll(not oclIsKindOf(DataType)) and&#xA;not oclIsKindOf(Association) implies&#xA;    ownedSpecialization.general->&#xA;        forAll(not oclIsKindOf(Association))"/>
    <classes name="Classifier" label="Classifier" comment="&lt;p>A &lt;code>Classifier&lt;/code> is a &lt;code>Type&lt;/code> that classifies:&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Things (in the universe) regardless of how &lt;code>Features&lt;/code> relate them. (These are interpreted semantically as sequences of exactly one thing.)&lt;/li>&#xA;&#x9;&lt;li>How the above things are related by &lt;code>Features.&lt;/code> (These are interpreted semantically as sequences of multiple things, such that the last thing in the sequence is also classified by the &lt;code>Classifier&lt;/code>. Note that this means that a &lt;code>Classifier&lt;/code> modeled as specializing a &lt;code>Feature&lt;/code> cannot classify anything.)&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&#xA;ownedSubclassification = &#xA;    ownedSpecialization->selectByKind(Subclassification)&#xA;multiplicity &lt;> null implies multiplicity.featuringType->isEmpty()"/>
    <classes name="Type" label="Type" comment="&lt;p>A &lt;code>Type&lt;/code> is a &lt;code>Namespace&lt;/code> that is the most general kind of &lt;code>Element&lt;/code> supporting the semantics of classification. A &lt;code>Type&lt;/code> may be a &lt;code>Classifier&lt;/code> or a &lt;code>Feature&lt;/code>, defining conditions on what is classified by the &lt;code>Type&lt;/code> (see also the description of &lt;code>isSufficient&lt;/code>).&lt;/p>&#xA;&#xA;ownedSpecialization = ownedRelationship->selectByKind(Specialization)->&#xA;    select(s | s.special = self)&#xA;    &#xA;multiplicity = &#xA;    let ownedMultiplicities: Sequence(Multiplicity) =&#xA;        ownedMember->selectByKind(Multiplicity) in&#xA;    if ownedMultiplicities->isEmpty() then null&#xA;    else ownedMultiplicities->first()&#xA;    endif&#xA;ownedFeatureMembership = ownedRelationship->selectByKind(FeatureMembership)&#xA;ownedConjugator =&#xA;    let ownedConjugators: Sequence(Conjugator) = &#xA;        ownedRelationship->selectByKind(Conjugation) in&#xA;    if ownedConjugators->isEmpty() then null &#xA;    else ownedConjugators->at(1) endif&#xA;output = feature->select(f | &#xA;    let direction: FeatureDirectionKind = directionOf(f) in&#xA;    direction = FeatureDirectionKind::out or&#xA;    direction = FeatureDirectionKind::inout)&#xA;input = feature->select(f | &#xA;    let direction: FeatureDirectionKind = directionOf(f) in&#xA;    direction = FeatureDirectionKind::_'in' or&#xA;    direction = FeatureDirectionKind::inout)&#xA;inheritedMembership = inheritedMemberships(Set{})&#xA;specializesFromLibrary('Base::Anything')&#xA;directedFeature = feature->select(f | directionOf(f) &lt;> null)&#xA;feature = featureMembership.ownedMemberFeature&#xA;featureMembership = ownedFeatureMembership->union(&#xA;    inheritedMembership->selectByKind(FeatureMembership))&#xA;ownedFeature = ownedFeatureMembership.ownedMemberFeature&#xA;differencingType = ownedDifferencing.differencingType&#xA;intersectingType->excludes(self)&#xA;differencingType->excludes(self)&#xA;unioningType = ownedUnioning.unioningType&#xA;unioningType->excludes(self)&#xA;intersectingType = ownedIntersecting.intersectingType&#xA;ownedRelationship->selectByKind(Conjugation)->size() &lt;= 1&#xA;ownedMember->selectByKind(Multiplicity)->size() &lt;= 1&#xA;endFeature = feature->select(isEnd)&#xA;ownedDisjoining =&#xA;    ownedRelationship->selectByKind(Disjoining)&#xA;ownedUnioning =&#xA;    ownedRelationship->selectByKind(Unioning)&#xA;ownedRelationship->selectByKind(Intersecting)&#xA;ownedDifferencing =&#xA;    ownedRelationship->selectByKind(Differencing)&#xA;ownedEndFeature = ownedFeature->select(isEnd)&#xA;inheritedFeature = inheritedMemberships->&#xA;    selectByKind(FeatureMembership).memberFeature&#xA;ownedUnioning->size() &lt;> 1&#xA;ownedIntersecting->size() &lt;> 1&#xA;ownedDifferencing->size() &lt;> 1"/>
    <classes name="Namespace" label="Namespace" comment="&lt;p>A &lt;code>Namespace&lt;/code> is an &lt;code>Element&lt;/code> that contains other &lt;code>Elements&lt;/code>, known as its &lt;code>members&lt;/code>, via &lt;code>Membership&lt;/code> &lt;code>Relationships&lt;/code> with those &lt;code>Elements&lt;/code>. The &lt;code>members&lt;/code> of a &lt;code>Namespace&lt;/code> may be owned by the &lt;code>Namespace&lt;/code>, aliased in the &lt;code>Namespace&lt;/code>, or imported into the &lt;code>Namespace&lt;/code> via &lt;code>Import&lt;/code> &lt;code>Relationships&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Namespace&lt;/code> can provide names for its &lt;code>members&lt;/code> via the &lt;code>memberNames&lt;/code> and &lt;code>memberShortNames&lt;/code> specified by the &lt;code>Memberships&lt;/code> in the &lt;code>Namespace&lt;/code>. If a &lt;code>Membership&lt;/code> specifies a &lt;code>memberName&lt;/code> and/or &lt;code>memberShortName&lt;/code>, then those are names of the corresponding &lt;code>memberElement&lt;/code> relative to the &lt;code>Namespace&lt;/code>. For an &lt;code>OwningMembership&lt;/code>, the &lt;code>owningMemberName&lt;/code> and &lt;code>owningMemberShortName&lt;/code> are given by the &lt;code>Element&lt;/code> &lt;code>name&lt;/code> and &lt;code>shortName&lt;/code>. Note that the same &lt;code>Element&lt;/code> may be the &lt;code>memberElement&lt;/code> of multiple &lt;code>Memberships&lt;/code> in a &lt;code>Namespace&lt;/code> (though it may be owned at most once), each of which may define a separate alias for the &lt;code>Element&lt;/code> relative to the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;membership->forAll(m1 | &#xA;    membership->forAll(m2 | &#xA;        m1 &lt;> m2 implies m1.isDistinguishableFrom(m2)))&#xA;member = membership.memberElement&#xA;ownedMember = ownedMembership->selectByKind(OwningMembership).ownedMemberElement&#xA;importedMembership = importedMemberships(Set{})&#xA;ownedImport = ownedRelationship->selectByKind(Import)&#xA;ownedMembership = ownedRelationship->selectByKind(Membership)"/>
    <classes name="Element" label="Element" comment="&lt;p>An &lt;code>Element&lt;/code> is a constituent of a model that is uniquely identified relative to all other &lt;code>Elements&lt;/code>. It can have &lt;code>Relationships&lt;/code> with other &lt;code>Elements&lt;/code>. Some of these &lt;code>Relationships&lt;/code> might imply ownership of other &lt;code>Elements&lt;/code>, which means that if an &lt;code>Element&lt;/code> is deleted from a model, then so are all the &lt;code>Elements&lt;/code> that it owns.&lt;/p>&#xA;&#xA;ownedElement = ownedRelationship.ownedRelatedElement&#xA;owner = owningRelationship.owningRelatedElement&#xA;qualifiedName =&#xA;    if owningNamespace = null then null&#xA;    else if owningNamespace.owner = null then escapedName()&#xA;    else if owningNamespace.qualifiedName = null or &#xA;            escapedName() = null then null&#xA;    else owningNamespace.qualifiedName + '::' + escapedName()&#xA;    endif endif endif&#xA;documentation = ownedElement->selectByKind(Documentation)&#xA;ownedAnnotation = ownedRelationship->&#xA;    selectByKind(Annotation)->&#xA;    select(a | a.annotatedElement = self)&#xA;name = effectiveName()&#xA;ownedRelationship->exists(isImplied) implies isImpliedIncluded&#xA;isLibraryElement = libraryNamespace() &lt;> null&#xA;&#xA;shortName = effectiveShortName()&#xA;owningNamespace =&#xA;    if owningMembership = null then null&#xA;    else owningMembership.membershipOwningNamespace&#xA;    endif&#xA;textualRepresentation = ownedElement->selectByKind(TextualRepresentation)"/>
    <classes name="OwningMembership" label="OwningMembership" comment="&lt;p>An &lt;code>OwningMembership&lt;/code> is a &lt;code>Membership&lt;/code> that owns its &lt;code>memberElement&lt;/code> as a &lt;code>ownedRelatedElement&lt;/code>. The &lt;code>ownedMemberElement&lt;/code> becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;&#xA;ownedMemberName = ownedMemberElement.name&#xA;ownedMemberShortName = ownedMemberElement.shortName"/>
    <classes name="Membership" label="Membership" comment="&lt;p>A &lt;code>Membership&lt;/code> is a &lt;code>Relationship&lt;/code> between a &lt;code>Namespace&lt;/code> and an &lt;code>Element&lt;/code> that indicates the &lt;code>Element&lt;/code> is a &lt;code>member&lt;/code> of (i.e., is contained in) the Namespace. Any &lt;code>memberNames&lt;/code> specify how the &lt;code>memberElement&lt;/code> is identified in the &lt;code>Namespace&lt;/code> and the &lt;code>visibility&lt;/code> specifies whether or not the &lt;code>memberElement&lt;/code> is publicly visible from outside the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If a &lt;code>Membership&lt;/code> is an &lt;code>OwningMembership&lt;/code>, then it owns its &lt;code>memberElement&lt;/code>, which becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>. Otherwise, the &lt;code>memberNames&lt;/code> of a &lt;code>Membership&lt;/code> are effectively aliases within the &lt;code>membershipOwningNamespace&lt;/code> for an &lt;code>Element&lt;/code> with a separate &lt;code>OwningMembership&lt;/code> in the same or a different &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&amp;nbsp;&lt;/p>&#xA;&#xA;memberElementId = memberElement.elementId"/>
    <classes name="Relationship" label="Relationship" comment="&lt;p>A &lt;code>Relationship&lt;/code> is an &lt;code>Element&lt;/code> that relates other &lt;code>Element&lt;/code>. Some of its &lt;code>relatedElements&lt;/code> may be owned, in which case those &lt;code>ownedRelatedElements&lt;/code> will be deleted from a model if their &lt;code>owningRelationship&lt;/code> is. A &lt;code>Relationship&lt;/code> may also be owned by another &lt;code>Element&lt;/code>, in which case the &lt;code>ownedRelatedElements&lt;/code> of the &lt;code>Relationship&lt;/code> are also considered to be transitively owned by the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The &lt;code>relatedElements&lt;/code> of a &lt;code>Relationship&lt;/code> are divided into &lt;code>source&lt;/code> and &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. The &lt;code>Relationship&lt;/code> is considered to be directed from the &lt;code>source&lt;/code> to the &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. An undirected &lt;code>Relationship&lt;/code> may have either all &lt;code>source&lt;/code> or all &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &amp;quot;relationship &lt;code>Element&lt;/code>&amp;quot; in the abstract syntax is generically any &lt;code>Element&lt;/code> that is an instance of either &lt;code>Relationship&lt;/code> or a direct or indirect specialization of &lt;code>Relationship&lt;/code>. Any other kind of &lt;code>Element&lt;/code> is a &amp;quot;non-relationship &lt;code>Element&lt;/code>&amp;quot;. It is a convention of that non-relationship &lt;code>Elements&lt;/code> are &lt;em>only&lt;/em> related via reified relationship &lt;code>Elements&lt;/code>. Any meta-associations directly between non-relationship &lt;code>Elements&lt;/code> must be derived from underlying reified &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;relatedElement = source->union(target)"/>
    <classes name="Documentation" label="Documentation" comment="&lt;p>&lt;code>Documentation&lt;/code> is a &lt;code>Comment&lt;/code> that specifically documents a &lt;code>documentedElement&lt;/code>, which must be its &lt;code>owner&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Comment" label="Comment" comment="&lt;p>A &lt;code>Comment&lt;/code> is an &lt;code>AnnotatingElement&lt;/code> whose &lt;code>body&lt;/code> in some way describes its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="AnnotatingElement" label="AnnotatingElement" comment="&lt;p>An &lt;code>AnnotatingElement&lt;/code> is an &lt;code>Element&lt;/code> that provides additional description of or metadata on some other &lt;code>Element&lt;/code>. An &lt;code>AnnotatingElement&lt;/code> is either attached to its &lt;code>annotatedElements&lt;/code> by &lt;code>Annotation&lt;/code> &lt;code>Relationships&lt;/code>, or it implicitly annotates its &lt;code>owningNamespace&lt;/code>.&lt;/p>&#xA;&#xA;annotatedElement = &#xA; if annotation->notEmpty() then annotation.annotatedElement&#xA; else Sequence{owningNamespace} endif&#xA;ownedAnnotatingRelationship = ownedRelationship->&#xA;    selectByKind(Annotation)->&#xA;    select(a | a.annotatingElement = self)"/>
    <classes name="Annotation" label="Annotation" comment="&lt;p>An &lt;code>Annotation&lt;/code> is a Relationship between an &lt;code>AnnotatingElement&lt;/code> and the &lt;code>Element&lt;/code> that is annotated by that &lt;code>AnnotatingElement&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="TextualRepresentation" label="TextualRepresentation" comment="&lt;p>A &lt;code>TextualRepresentation&lt;/code> is an &lt;code>AnnotatingElement&lt;/code> whose &lt;code>body&lt;/code> represents the &lt;code>representedElement&lt;/code> in a given &lt;code>language&lt;/code>. The &lt;code>representedElement&lt;/code> must be the &lt;code>owner&lt;/code> of the &lt;code>TextualRepresentation&lt;/code>. The named &lt;code>language&lt;/code> can be a natural language, in which case the &lt;code>body&lt;/code> is an informal representation, or an artificial language, in which case the &lt;code>body&lt;/code> is expected to be a formal, machine-parsable representation.&lt;/p>&#xA;&#xA;&lt;p>If the named &lt;code>language&lt;/code> of a &lt;code>TextualRepresentation&lt;/code> is machine-parsable, then the &lt;code>body&lt;/code> text should be legal input text as defined for that &lt;code>language&lt;/code>. The interpretation of the named language string shall be case insensitive. The following &lt;code>language&lt;/code> names are defined to correspond to the given standard languages:&lt;/p>&#xA;&#xA;&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; width=&quot;498&quot;>&#xA;&#x9;&lt;thead>&#xA;&#x9;&lt;/thead>&#xA;&#x9;&lt;tbody>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>kerml&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Kernel Modeling Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>ocl&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Object Constraint Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>alf&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Action Language for fUML&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&lt;/tbody>&#xA;&lt;/table>&#xA;&#xA;&lt;p>Other specifications may define specific &lt;code>language&lt;/code> strings, other than those shown above, to be used to indicate the use of languages from those specifications in KerML &lt;code>TextualRepresentation&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>language&lt;/code> of a &lt;code>TextualRepresentation&lt;/code> is &amp;quot;&lt;code>kerml&lt;/code>&amp;quot;, then the &lt;code>body&lt;/code> text shall be a legal representation of the &lt;code>representedElement&lt;/code> in the KerML textual concrete syntax. A conforming tool can use such a &lt;code>TextualRepresentation&lt;/code> &lt;code>Annotation&lt;/code> to record the original KerML concrete syntax text from which an &lt;code>Element&lt;/code> was parsed. In this case, it is a tool responsibility to ensure that the &lt;code>body&lt;/code> of the &lt;code>TextualRepresentation&lt;/code> remains correct (or the Annotation is removed) if the annotated &lt;code>Element&lt;/code> changes other than by re-parsing the &lt;code>body&lt;/code> text.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>Element&lt;/code> with a &lt;code>TextualRepresentation&lt;/code> in a language other than KerML is essentially a semantically &amp;quot;opaque&amp;quot; &lt;code>Element&lt;/code> specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.&lt;/p>&#xA;"/>
    <classes name="Import" label="Import" comment="&lt;p>An &lt;code>Import&lt;/code> is an &lt;code>Relationship&lt;/code> between its &lt;code>importOwningNamespace&lt;/code> and either a &lt;code>Membership&lt;/code> (for a &lt;code>MembershipImport&lt;/code>) or another &lt;code>Namespace&lt;/code> (for a &lt;code>NamespaceImport&lt;/code>), which determines a set of &lt;code>Memberships&lt;/code> that become &lt;code>importedMemberships&lt;/code> of the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isImportAll = false&lt;/code> (the default), then only public &lt;code>Memberships&lt;/code> are considered &amp;quot;visible&amp;quot;. If &lt;code>isImportAll = true&lt;/code>, then all &lt;code>Memberships&lt;/code> are considered &amp;quot;visible&amp;quot;, regardless of their declared &lt;code>visibility&lt;/code>. If &lt;code>isRecursive = true&lt;/code>, then visible &lt;code>Memberships&lt;/code> are also recursively imported from owned sub-&lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <classes name="Specialization" label="Specialization" comment="&lt;p>&lt;code>Specialization&lt;/code> is a &lt;code>Relationship&lt;/code> between two &lt;code>Types&lt;/code> that requires all instances of the &lt;code>specific&lt;/code> type to also be instances of the &lt;code>general&lt;/code> Type (i.e., the set of instances of the &lt;code>specific&lt;/code> Type is a &lt;em>subset&lt;/em> of those of the &lt;code>general&lt;/code> Type, which might be the same set).&lt;/p>&#xA;&#xA;not specific.isConjugated"/>
    <classes name="FeatureMembership" label="FeatureMembership" comment="&lt;p>A &lt;code>FeatureMembership&lt;/code> is an &lt;code>OwningMembership&lt;/code> between a &lt;code>Feature&lt;/code> in an &lt;code>owningType&lt;/code> that is also a &lt;code>Featuring&lt;/code> &lt;code>Relationship&lt;code> between the &lt;code>Feature&lt;/code> and the &lt;code>Type&lt;/code>, in which the &lt;code>featuringType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featureOfType&lt;/code> is the &lt;code>target&lt;/code>. A &lt;code>FeatureMembership&lt;/code> is always owned by its &lt;code>owningType&lt;/code>, which is the &lt;code>featuringType&lt;/code> for the &lt;code>FeatureMembership&lt;/code> considered as a &lt;code>Featuring&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Featuring" label="Featuring" comment="&lt;p>&lt;code>Featuring&lt;/code> is a &lt;code>Relationship&lt;/code> between a &lt;code>Type&lt;/code> and a &lt;code>Feature&lt;/code> that is featured by that &lt;code>Type&lt;/code>. It asserts that every instance in the domain of the &lt;code>feature&lt;/code> must be classified by the &lt;code>type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;code>Featuring&lt;/code> is abstract and does not commit to which of &lt;code>feature&lt;/code> or &lt;code>type&lt;/code> are the &lt;code>source&lt;/code> or &lt;code>target&lt;/code> of the &lt;code>Relationship&lt;/code>. This commitment is made in the subclasses of &lt;code>Featuring&lt;/code>, &lt;code>TypeFeaturing&lt;/code> and &lt;code>FeatureMembership&lt;/code>, which have opposite directions.&lt;/p>"/>
    <classes name="Feature" label="Feature" comment="&lt;p>A &lt;code>Feature&lt;/code> is a &lt;code>Type&lt;/code> that classifies relations between multiple things (in the universe). The domain of the relation is the intersection of the &lt;code>featuringTypes&lt;/code> of the &lt;code>Feature&lt;/code>. (The domain of a &lt;code>Feature&lt;/code> with no &lt;code>featuringTyps&lt;/code> is implicitly the most general &lt;code>Type&lt;/code> &lt;em>&lt;code>Base::Anything&lt;/code>&lt;/em> from the Kernel Semantic Library.) The co-domain of the relation is the intersection of the &lt;code>types&lt;/code> of the &lt;code>Feature&lt;/code>.&#xA;&#xA;&lt;p>In the simplest cases, the &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> are &lt;code>Classifiers&lt;/code> and the &lt;code>Feature&lt;/code> relates two things, one from the domain and one from the range. Examples include cars paired with wheels, people paired with other people, and cars paired with numbers representing the car length.&lt;/p>&#xA;&#xA;&lt;p>Since &lt;code>Features&lt;/code> are &lt;code>Types&lt;/code>, their &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> can be &lt;code>Features&lt;/code>. In this case, the &lt;code>Feature&lt;/code> effectively classifies relations between relations, which can be interpreted as the sequence of things related by the domain &lt;code>Feature&lt;/code> concatenated with the sequence of things related by the co-domain &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The &lt;em>values&lt;/em> of a &lt;code>Feature&lt;/code> for a given instance of its domain are all the instances of its co-domain that are related to that domain instance by the &lt;code>Feature&lt;/code>. The values of a &lt;code>Feature&lt;/code> with &lt;code>chainingFeatures&lt;/code> are the same as values of the last &lt;code>Feature&lt;/code> in the chain, which can be found by starting with values of the first &lt;code>Feature&lt;/code>, then using those values as domain instances to obtain valus of the second &lt;code>Feature&lt;/code>, and so on, to values of the last &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;ownedRedefinition = ownedSubsetting->selectByKind(Redefinition)&#xA;ownedTypeFeaturing = ownedRelationship->selectByKind(TypeFeaturing)->&#xA;    select(tf | tf.featureOfType = self)&#xA;ownedSubsetting = ownedSpecialization->selectByKind(Subsetting)&#xA;ownedTyping = ownedGeneralization->selectByKind(FeatureTyping)&#xA;type = &#xA;    let types : OrderedSet(Types) = OrderedSet{self}->&#xA;        -- Note: The closure operation automatically handles circular relationships.&#xA;        closure(typingFeatures()).typing.type->asOrderedSet() in&#xA;    types->reject(t1 | types->exist(t2 | t2 &lt;> t1 and t2.specializes(t1)))&#xA;multiplicity &lt;> null implies multiplicity.featuringType = featuringType &#xA;specializesFromLibrary('Base::things')&#xA;chainingFeature->excludes(self)&#xA;ownedFeatureChaining = ownedRelationship->selectByKind(FeatureChaining)&#xA;chainingFeature = ownedFeatureChaining.chainingFeature&#xA;chainingFeature->size() &lt;> 1&#xA;isEnd and owningType &lt;> null implies&#xA;    let i : Integer = &#xA;        owningType.ownedEndFeature->indexOf(self) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;             supertype.endFeature->size() >= i implies&#xA;                redefines(supertype.endFeature->at(i))&#xA;direction = null and&#xA;ownedSpecializations->forAll(isImplied) implies&#xA;    ownedMembership->&#xA;        selectByKind(FeatureValue)->&#xA;        forAll(fv | specializes(fv.value.result))&#xA;isEnd and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Association) or&#xA; owningType.oclIsKindOf(Connector)) implies&#xA;    specializesFromLibrary('Links::Link::participant')&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Structure)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.type->includes(oclIsKindOf(Structure))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(FeatureReferenceExpression) and&#xA;self = owningType.oclAsType(FeatureReferenceExpression).result implies&#xA;    specializes(owningType.oclAsType(FeatureReferenceExpression).referent)&#xA;&#xA;ownedTyping.type->exists(selectByKind(Class)) implies&#xA;    specializesFromLibrary('Occurrences::occurrences')&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')&#xA;ownedTyping.type->exists(selectByKind(DataType)) implies&#xA;    specializesFromLibrary('Base::dataValues')&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(ItemFlowEnd) and&#xA;owningType.ownedFeature->at(1) = self implies&#xA;    let flowType : Type = owningType.owningType in&#xA;    flowType &lt;> null implies&#xA;        let i : Integer = &#xA;            flowType.ownedFeature.indexOf(owningType) in&#xA;        (i = 1 implies &#xA;            redefinesFromLibrary('Transfers::Transfer::source::sourceOutput')) and&#xA;        (i = 2 implies&#xA;            redefinesFromLibrary('Transfers::Transfer::source::targetInput'))&#xA;                 &#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Behavior) or&#xA; owningType.oclIsKindOf(Step)) implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(direction &lt;> null) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedParameters : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(direction &lt;> null) in&#xA;            ownedParameters->size() >= i implies&#xA;                redefines(ownedParameters->at(i))&#xA;ownedTyping.type->exists(selectByKind(Structure)) implies&#xA;    specializesFromLibary('Objects::objects')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Function) and&#xA;    self = owningType.oclAsType(Function).result or&#xA; owningType.oclIsKindOf(Expression) and&#xA;    self = owningType.oclAsType(Expression).result) implies&#xA;    owningType.ownedSpecialization.general->&#xA;        select(oclIsKindOf(Function) or oclIsKindOf(Expression))->&#xA;        forAll(supertype |&#xA;            redefines(&#xA;                if superType.oclIsKindOf(Function) then&#xA;                    superType.oclAsType(Function).result&#xA;                else&#xA;                    superType.oclAsType(Expression).result&#xA;                endif)&#xA;ownedFeatureInverting = ownedRelationship->selectByKind(FeatureInverting)->&#xA;    select(fi | fi.featureInverted = self)&#xA;featuringType =&#xA;    let featuringTypes : OrderedSet(Type) = &#xA;        featuring.type->asOrderedSet() in&#xA;    if chainingFeature->isEmpty() then featuringTypes&#xA;    else&#xA;        featuringTypes->&#xA;            union(chainingFeature->first().featuringType)->&#xA;            asOrderedSet()&#xA;    endif&#xA;ownedReferenceSubsetting =&#xA;    let referenceSubsettings : OrderedSet(ReferenceSubsetting) =&#xA;        ownedSubsetting->selectByKind(ReferenceSubsetting) in&#xA;    if referenceSubsettings->isEmpty() then null&#xA;    else referenceSubsettings->first() endif&#xA;ownedSubsetting->selectByKind(ReferenceSubsetting)->size() &lt;= 1&#xA;Sequence{1..chainingFeature->size() - 1}->forAll(i |&#xA;    chainingFeature->at(i + 1).featuringType->forAll(t | &#xA;        chainingFeature->at(i).specializes(t)))&#xA;&#xA;isPortion and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::portions')"/>
    <classes name="Redefinition" label="Redefinition" comment="&lt;p>&lt;code>Redefinition&lt;/code> is a kind of &lt;code>Subsetting&lt;/code> that requires the &lt;code>redefinedFeature&lt;/code> and the &lt;code>redefiningFeature&lt;/code> to have the same values (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>). This means any restrictions on the &lt;code>redefiningFeature&lt;/code>, such as &lt;code>type&lt;/code> or &lt;code>multiplicity&lt;/code>, also apply to the &lt;code>redefinedFeature&lt;/code> (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>), and vice versa. The &lt;code>redefinedFeature&lt;/code> might have values for instances of the domain of the &lt;code>redefiningFeature&lt;/code>, but only as instances of the domain of the &lt;code>redefinedFeature&lt;/code> that happen to also be instances of the domain of the &lt;code>redefiningFeature&lt;/code>. This is supported by the constraints inherited from &lt;code>Subsetting&lt;/code> on the domains of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code>. However, these constraints are narrowed for &lt;code>Redefinition&lt;/code> to require the &lt;code>owningTypes&lt;/code> of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code> to be different and the &lt;code>redefinedFeature&lt;/code> to not be inherited into the &lt;code>owningNamespace&lt;/code> of the &lt;code>redefiningFeature&lt;/code>.This enables the &lt;code>redefiningFeature&lt;/code> to have the same name as the &lt;code>redefinedFeature&lt;/code>, if desired.&lt;/p>&#xA;&#xA;let anythingType: Type =&#xA;    redefiningFeature.resolveGlobal('Base::Anything').modelElement.oclAsType(Type) in &#xA;-- Including &quot;Anything&quot; accounts for implicit featuringType of Features&#xA;-- with no explicit featuringType.&#xA;let redefiningFeaturingTypes: Set(Type) =&#xA;    redefiningFeature.featuringTypes->asSet()->including(anythingType) in&#xA;let redefinedFeaturingTypes: Set(Type) =&#xA;    redefinedFeature.featuringTypes->asSet()->including(anythingType) in&#xA;redefiningFeaturingTypes &lt;> redefinedFeaturingType&#xA;featuringType->forAll(t |&#xA;    let direction : FeatureDirectionKind = t.directionOf(redefinedFeature) in&#xA;    ((direction = FeatureDirectionKind::_'in' or &#xA;      direction = FeatureDirectionKind::out) implies&#xA;         redefiningFeature.direction = direction)&#xA;    and &#xA;    (direction = FeatureDirectionKind::inout implies&#xA;        redefiningFeature.direction &lt;> null))"/>
    <classes name="Subsetting" label="Subsetting" comment="&lt;p>&lt;code>Subsetting&lt;/code> is &lt;code>Specialization&lt;/code> in which the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> &lt;code>Types&lt;/code> are &lt;code>Features&lt;/code>. This means all values of the &lt;code>subsettingFeature&lt;/code> (on instances of its domain, i.e., the intersection of its &lt;code>featuringTypes&lt;/code>) are values of the &lt;code>subsettedFeature&lt;/code> on instances of its domain. To support this the domain of the &lt;code>subsettingFeature&lt;/code> must be the same or specialize (at least indirectly) the domain of the &lt;code>subsettedFeature&lt;/code> (via &lt;code>Specialization&lt;/code>), and the co-domain (intersection of the &lt;code>types&lt;/code>) of the &lt;code>subsettingFeature&lt;/code> must specialize the co-domain of the &lt;code>subsettedFeature&lt;/code>.&lt;/p>&#xA;&#xA;let subsettingFeaturingTypes: OrderedSet(Type) =&#xA;    subsettingFeature.featuringTypes in&#xA;let subsettedFeaturingTypes: OrderedSet(Type) =&#xA;    subsettedFeature.featuringTypes in&#xA;let anythingType: Element =&#xA;    subsettingFeature.resolveGlobal('Base::Anything').memberElement in &#xA;subsettedFeaturingTypes->forAll(t |&#xA;    subsettingFeaturingTypes->isEmpty() and t = anythingType or&#xA;    subsettingFeaturingTypes->exists(specializes(t))&#xA;subsettedFeature.isUnique implies subsettingFeature.isUnique"/>
    <classes name="FeatureTyping" label="FeatureTyping" comment="&lt;p>&lt;code>FeatureTyping&lt;/code> is &lt;code>Specialization&lt;/code> in which the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> is a &lt;code>Feature&lt;/code>. This means the set of instances of the (specific) &lt;code>typedFeature&lt;/code> is a subset of the set of instances of the (general) &lt;code>type&lt;/code>. In the simplest case, the &lt;code>type&lt;/code> is a &lt;code>Classifier&lt;/code>, whereupon the &lt;code>typedFeature&lt;/code> has values that are instances of the &lt;code>Classifier&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="TypeFeaturing" label="TypeFeaturing" comment="&lt;p>A &lt;code>TypeFeaturing&lt;/code> is a &lt;code>Featuring&lt;/code> &lt;code>Relationship&lt;/code> in which the &lt;code>featureOfType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featuringType&lt;/code> is the &lt;code>target&lt;/code>.&lt;/p>"/>
    <classes name="FeatureInverting" label="FeatureInverting" comment="&lt;p>A &lt;code>FeatureInverting&lt;/code> is a &lt;code>Relationship&lt;/code> between &lt;code>Features&lt;/code> asserting that their interpretations (sequences) are the reverse of each other, identified as &lt;code>featureInverted&lt;/code> and &lt;code>invertingFeature&lt;/code>. For example, a &lt;code>Feature&lt;/code> identifying each person&amp;#39;s parents is the inverse of a &lt;code>Feature&lt;/code> identifying each person&amp;#39;s children. A person identified as a parent of another will identify that other as one of their children.&lt;/p>&#xA;"/>
    <classes name="FeatureChaining" label="FeatureChaining" comment="&lt;p>&lt;code>FeatureChaining&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its target &lt;code>Feature&lt;/code> one of the &lt;code>chainingFeatures&lt;/code> of its owning &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <classes name="ReferenceSubsetting" label="ReferenceSubsetting" comment="&lt;p>&lt;code>ReferenceSubsetting&lt;/code> is a kind of &lt;code>Subsetting&lt;/code> in which the &lt;code>referencedFeature&lt;/code> is syntactically distinguished from other &lt;code>Features&lt;/code> subsetted by the &lt;code>referencingFeature&lt;/code>. &lt;code>ReferenceSubsetting&lt;/code> has the same semantics as &lt;code>Subsetting&lt;/code>, but the &lt;code>referenceFeature&lt;/code> may have a special purpose relative to the &lt;code>referencingFeature&lt;/code>. For instance, &lt;code>ReferenceSubsetting&lt;/code> is used to identify the &lt;code>relatedFeatures&lt;/code> of a &lt;code>Connector&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;code>ReferenceSubsetting&lt;/code> is always an &lt;code>ownedRelationship&lt;/code> of its &lt;code>referencingFeature&lt;/code>. A &lt;code>Feature&lt;/code> can have at most one &lt;code>ownedReferenceSubsetting&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Conjugation" label="Conjugation" comment="&lt;p>&lt;code>Conjugation&lt;/code> is a &lt;code>Relationship&lt;/code> between two types in which the &lt;code>conjugatedType&lt;/code> inherits all the &lt;code>Features&lt;/code> of the &lt;code>originalType&lt;/code>, but with all &lt;code>input&lt;/code> and &lt;code>output&lt;/code> &lt;code>Features&lt;/code> reversed. That is, any &lt;code>Features&lt;/code> with a &lt;code>direction&lt;/code> &lt;em>in&lt;/em> relative to the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>out&lt;/em> relative to the &lt;code>conjugatedType&lt;/code> and, similarly, &lt;code>Features&lt;/code> with &lt;code>direction&lt;/code> &lt;em>out&lt;/em> in the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>in&lt;/em> in the &lt;code>conjugatedType&lt;/code>. &lt;code>Features&lt;/code> with &lt;code>direction&lt;/code> &lt;em>inout&lt;/em>, or with no &lt;code>direction&lt;/code>, in the &lt;code>originalType&lt;/code>, are inherited without change.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Type&lt;/code> may participate as a &lt;code>conjugatedType&lt;/code> in at most one &lt;code>Conjugation&lt;/code> relationship, and such a &lt;code>Type&lt;/code> may not also be the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> in any &lt;code>Specialization&lt;/code> relationship.&lt;/p>&#xA;"/>
    <classes name="Multiplicity" label="Multiplicity" comment="&lt;p>A &lt;code>Multiplicity&lt;/code> is a &lt;code>Feature&lt;/code> whose co-domain is a set of natural numbers giving the allowed cardinalities of each &lt;code>typeWithMultiplicity&lt;/code>. The &lt;em>cardinality&lt;/em> of a &lt;code>Type&lt;/code> is defined as follows, depending on whether the &lt;code>Type&lt;/code> is a &lt;code>Classifier&lt;/code> or &lt;code>Feature&lt;/code>.&#xA;&lt;ul>&#xA;&lt;li>&lt;code>Classifier&lt;/code> &#x2013; The number of basic instances of the &lt;code>Classifier&lt;/code>, that is, those instances representing things, which are not instances of any subtypes of the &lt;code>Classifier&lt;/code> that are &lt;code>Features&lt;/code>.&#xA;&lt;li>&lt;code>Features&lt;/code> &#x2013; The number of instances with the same featuring instances. In the case of a &lt;code>Feature&lt;/code> with a &lt;code>Classifier&lt;/code> as its &lt;code>featuringType&lt;/code>, this is the number of values of &lt;code>Feature&lt;/code> for each basic instance of the &lt;code>Classifier&lt;/code>. Note that, for non-unique &lt;code>Features&lt;/code>, all duplicate values are included in this count.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>&lt;code>Multiplicity&lt;/code> co-domains (in models) can be specified by &lt;code>Expression&lt;/code> that might vary in their results. If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Classifier&lt;/code>, the domain of the &lt;code>Multiplicity&lt;/code> shall be &lt;em>&lt;code>Base::Anything&lt;/code>&lt;/em>.  If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Feature&lt;/code>,  the &lt;code>Multiplicity&lt;/code> shall have the same domain as the &lt;code>typeWithMultiplicity&lt;/code>.&lt;/p>&#xA;&#xA;if owningType &lt;> null and owningType.oclIsKindOf(Feature) then&#xA;    featuringType = &#xA;        owningType.oclAsType(Feature).featuringType&#xA;else&#xA;    featuringType->isEmpty()&#xA;endif&#xA;specializesFromLibrary('Base::naturals')"/>
    <classes name="Intersecting" label="Intersecting" comment="&lt;p>&lt;code>Intersecting&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>intersectingType&lt;/code> one of the &lt;code>intersectingTypes&lt;/code> of its &lt;code>typeIntersected&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Unioning" label="Unioning" comment="&lt;p>&lt;code>Unioning&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>unioningType&lt;/code> one of the &lt;code>unioningTypes&lt;/code> of its &lt;code>typeUnioned&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Disjoining" label="Disjoining" comment="&lt;p>A &lt;code>Disjoining&lt;/code> is a &lt;code>Relationship&lt;/code> between &lt;code>Types&lt;/code> asserted to have interpretations that are not shared (disjoint) between them, identified as &lt;code>typeDisjoined&lt;/code> and &lt;code>disjoiningType&lt;/code>. For example, a &lt;code>Classifier&lt;/code> for mammals is disjoint from a &lt;code>Classifier&lt;/code> for minerals, and a &lt;code>Feature&lt;/code> for people&amp;#39;s parents is disjoint from a &lt;code>Feature&lt;/code> for their children.&lt;/p>&#xA;"/>
    <classes name="Differencing" label="Differencing" comment="&lt;p>&lt;code>Differencing&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>differencingType&lt;/code> one of the &lt;code>differencingTypes&lt;/code> of its &lt;code>typeDifferenced&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Subclassification" label="Subclassification" comment="&lt;p>&lt;code>Subclassification&lt;/code> is &lt;code>Specialization&lt;/code> in which both the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> &lt;code>Types&lt;/code> are &lt;code>Classifier&lt;/code>. This means all instances of the specific &lt;code>Classifier&lt;/code> are also instances of the general &lt;code>Classifier&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="OccurrenceDefinition" label="OccurrenceDefinition" comment="&lt;p>An &lt;code>OccurrenceDefinition&lt;/code> is a &lt;code>Definition&lt;/code> of a &lt;code>Class&lt;/code> of individuals that have an independent life over time and potentially an extent over space. This includes both structural things and behaviors that act on such structures.&lt;/p>&#xA;&#xA;&lt;p>If &lt;code>isIndividual&lt;/code> is true, then the &lt;code>OccurrenceDefinition&lt;/code> is constrained to represent an individual thing. The instances of such an &lt;code>OccurrenceDefinition&lt;/code> include all spatial and temporal portions of the individual being represented, but only one of these can be the complete &lt;code>Life&lt;/code> of the individual. All other instances must be portions of the &amp;quot;maximal portion&amp;quot; that is single &lt;code>Life&lt;/code> instance, capturing the conception that all of the instances represent one individual with a single &amp;quot;identity&amp;quot;.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>OccurrenceDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>Class&lt;/code> &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;&#xA;let n : Integer = ownedMember->selectByKind(LifeClass) in&#xA;if isIndividual then n = 1 else n = 0 endif&#xA;lifeClass =&#xA;    let lifeClasses: OrderedSet(LifeClass) = &#xA;        ownedMember->selectByKind(LifeClass) in&#xA;    if lifeClasses->isEmpty() then null&#xA;    else lifeClasses->first()&#xA;    endif"/>
    <classes name="Definition" label="Definition" comment="&lt;p>A &lt;code>Definition&lt;/code> is a &lt;code>Classifier&lt;/code> of &lt;code>Usages&lt;/code>. The actual kinds of &lt;code>Definition&lt;/code> that may appear in a model are given by the subclasses of &lt;code>Definition&lt;/code> (possibly as extended with user-defined &lt;em>&lt;code>SemanticMetadata&lt;/code>&lt;/em>).&lt;/p>&#xA;&#xA;&lt;p>Normally, a &lt;code>Definition&lt;/code> has owned Usages that model &lt;code>features&lt;/code> of the thing being defined. A &lt;code>Definition&lt;/code> may also have other &lt;code>Definitions&lt;/code> nested in it, but this has no semantic significance, other than the nested scoping resulting from the &lt;code>Definition&lt;/code> being considered as a &lt;code>Namespace&lt;/code> for any nested &lt;code>Definitions&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>However, if a &lt;code>Definition&lt;/code> has &lt;code>isVariation&lt;/code> = &lt;code>true&lt;/code>, then it represents a &lt;em>variation point&lt;/em> &lt;code>Definition&lt;/code>. In this case, all of its &lt;code>members&lt;/code> must be &lt;code>variant&lt;/code> &lt;code>Usages&lt;/code>, related to the &lt;code>Definition&lt;/code> by &lt;code>VariantMembership&lt;/code> &lt;code>Relationships&lt;/code>. Rather than being &lt;code>features&lt;/code> of the &lt;code>Definition&lt;/code>, &lt;code>variant&lt;/code> &lt;code>Usages&lt;/code> model different concrete alternatives that can be chosen to fill in for an abstract &lt;code>Usage&lt;/code> of the variation point &lt;code>Definition&lt;/code>.&lt;/p>&#xA;&#xA;isVariation implies ownedFeatureMembership->isEmpty()&#xA;variant = variantMembership.ownedVariantUsage&#xA;variantMembership = ownedMembership->selectByKind(VariantMembership)&#xA;isVariation implies&#xA;    not ownedSpecialization.specific->exists(&#xA;        oclIsKindOf(Definition) and&#xA;        oclAsType(Definition).isVariation)&#xA;usage = feature->selectByKind(Usage)&#xA;directedUsage = directedFeature->selectByKind(Usage)&#xA;ownedUsage = ownedFeature->selectByKind(Usage)&#xA;ownedAttribute = ownedUsage->selectByKind(AttributeUsage)&#xA;ownedReference = ownedUsage->selectByKind(ReferenceUsage)&#xA;ownedEnumeration = ownedUsage->selectByKind(EnumerationUsage)&#xA;ownedOccurrence = ownedUsage->selectByKind(OccurrenceUsage)&#xA;ownedItem = ownedUsage->selectByKind(ItemUsage)&#xA;ownedPart = ownedUsage->selectByKind(PartUsage)&#xA;ownedPort = ownedUsage->selectByKind(PortUsage)&#xA;ownedConnection = ownedUsage->selectByKind(ConnectorAsUsage)&#xA;ownedFlow = ownedUsage->selectByKind(FlowConnectionUsage)&#xA;ownedInterface = ownedUsage->selectByKind(ReferenceUsage)&#xA;ownedAllocation = ownedUsage->selectByKind(AllocationUsage)&#xA;ownedAction = ownedUsage->selectByKind(ActionUsage)&#xA;ownedState = ownedUsage->selectByKind(StateUsage)&#xA;ownedTransition = ownedUsage->selectByKind(TransitionUsage)&#xA;ownedCalculation = ownedUsage->selectByKind(CalculationUsage)&#xA;ownedConstraint = ownedUsage->selectByKind(ConstraintUsage)&#xA;ownedRequirement = ownedUsage->selectByKind(RequirementUsage)&#xA;ownedConcern = ownedUsage->selectByKind(ConcernUsage)&#xA;ownedCase = ownedUsage->selectByKind(CaseUsage)&#xA;ownedAnalysisCase = ownedUsage->selectByKind(AnalysisCaseUsage)&#xA;ownedVerificationCase = ownedUsage->selectByKind(VerificationCaseUsage)&#xA;ownedUseCase = ownedUsage->selectByKind(UseCaseUsage)&#xA;ownedView = ownedUsage->selectByKind(ViewUsage)&#xA;ownedViewpoint = ownedUsage->selectByKind(ViewpointUsage)&#xA;ownedRendering = ownedUsage->selectByKind(RenderingUsage)&#xA;ownedMetadata = ownedUsage->selectByKind(MetadataUsage)&#xA;isVariation implies isAbstract"/>
    <classes name="Usage" label="Usage" comment="&lt;p>A &lt;code>Usage&lt;/code> is a usage of a &lt;code>Definition&lt;/code>. A &lt;code>Usage&lt;/code> may only be an &lt;code>ownedFeature&lt;/code> of a &lt;code>Definition&lt;/code> or another &lt;code>Usage&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Usage&lt;/code> may have &lt;code>nestedUsages&lt;/code> that model &lt;code>features&lt;/code> that apply in the context of the &lt;code>owningUsage&lt;/code>. A &lt;code>Usage&lt;/code> may also have &lt;code>Definitions&lt;/code> nested in it, but this has no semantic significance, other than the nested scoping resulting from the &lt;code>Usage&lt;/code> being considered as a &lt;code>Namespace&lt;/code> for any nested &lt;code>Definitions&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>However, if a &lt;code>Usage&lt;/code> has &lt;code>isVariation = true&lt;/code>, then it represents a &lt;em>variation point&lt;/em> &lt;code>Usage&lt;/code>. In this case, all of its &lt;code>members&lt;/code> must be &lt;code>variant&lt;/code> &lt;code>Usages&lt;/code>, related to the &lt;code>Usage&lt;/code> by &lt;code>VariantMembership&lt;/code> &lt;code>Relationships&lt;/code>. Rather than being &lt;code>features&lt;/code> of the &lt;code>Usage&lt;/code>, &lt;code>variant&lt;/code> &lt;code>Usages&lt;/code> model different concrete alternatives that can be chosen to fill in for the variation point &lt;code>Usage&lt;/code>.&lt;/p>&#xA;variant = variantMembership.ownedVariantUsage&#xA;variantMembership = ownedMembership->selectByKind(VariantMembership)&#xA;isVariation implies ownedFeatureMembership->isEmpty()&#xA;isReference = not isComposite&#xA;owningVariationUsage &lt;> null implies&#xA;    specializes(owningVariationUsage)&#xA;isVariation implies&#xA;    not ownedSpecialization.specific->exists(&#xA;        oclIsKindOf(Definition) and&#xA;        oclAsType(Definition).isVariation or&#xA;        oclIsKindOf(Usage) and&#xA;        oclAsType(Usage).isVariation)&#xA;owningVariationDefinition &lt;> null implies&#xA;    specializes(owningVariationDefinition)&#xA;directedUsage = directedFeature->selectByKind(Usage)&#xA;nestedAction = nestedUsage->selectByKind(ActionUsage)&#xA;nestedAllocation = nestedUsage->selectByKind(AllocationUsage)&#xA;nestedAnalysisCase = nestedUsage->selectByKind(AnalysisCaseUsage)&#xA;nestedAttribute = nestedUsage->selectByKind(AttributeUsage)&#xA;nestedCalculation = nestedUsage->selectByKind(CalculationUsage)&#xA;nestedCase = nestedUsage->selectByKind(CaseUsage)&#xA;nestedConcern = nestedUsage->selectByKind(ConcernUsage)&#xA;nestedConnection = nestedUsage->selectByKind(ConnectorAsUsage)&#xA;nestedConstraint = nestedUsage->selectByKind(ConstraintUsage)&#xA;ownedNested = nestedUsage->selectByKind(EnumerationUsage)&#xA;nestedFlow = nestedUsage->selectByKind(FlowConnectionUsage)&#xA;nestedInterface = nestedUsage->selectByKind(ReferenceUsage)&#xA;nestedItem = nestedUsage->selectByKind(ItemUsage)&#xA;nestedMetadata = nestedUsage->selectByKind(MetadataUsage)&#xA;nestedOccurrence = nestedUsage->selectByKind(OccurrenceUsage)&#xA;nestedPart = nestedUsage->selectByKind(PartUsage)&#xA;nestedPort = nestedUsage->selectByKind(PortUsage)&#xA;nestedReference = nestedUsage->selectByKind(ReferenceUsage)&#xA;nestedRendering = nestedUsage->selectByKind(RenderingUsage)&#xA;nestedRequirement = nestedUsage->selectByKind(RequirementUsage)&#xA;nestedState = nestedUsage->selectByKind(StateUsage)&#xA;nestedTransition = nestedUsage->selectByKind(TransitionUsage)&#xA;nestedUsage = ownedFeature->selectByKind(Usage)&#xA;nestedUseCase = nestedUsage->selectByKind(UseCaseUsage)&#xA;nestedVerificationCase = nestedUsage->selectByKind(VerificationCaseUsage)&#xA;nestedView = nestedUsage->selectByKind(ViewUsage)&#xA;nestedViewpoint = nestedUsage->selectByKind(ViewpointUsage)&#xA;usage = feature->selectByKind(Usage)&#xA;direction &lt;> null or isEnd or featuringType->isEmpty() implies&#xA;    isReference&#xA;isVariation implies isAbstract"/>
    <classes name="VariantMembership" label="VariantMembership" comment="&lt;p>A &lt;code>VariantMembership&lt;/code> is a &lt;code>Membership&lt;/code> between a variation point &lt;code>Definition&lt;/code> or &lt;code>Usage&lt;/code> and a &lt;code>Usage&lt;/code> that represents a variant in the context of that variation. The &lt;code>membershipOwningNamespace&lt;/code> for the &lt;code>VariantMembership&lt;/code> must be either a Definition or a &lt;code>Usage&lt;/code> with &lt;code>isVariation = true&lt;/code>.&lt;/p>&#xA;membershipOwningNamespace.oclIsKindOf(Definition) and&#xA;    membershipOwningNamespace.oclAsType(Definition).isVariation or&#xA;membershipOwningNamespace.oclIsKindOf(Usage) and&#xA;    membershipOwningNamespace.oclAsType(Usage).isVariation&#xA;"/>
    <classes name="ReferenceUsage" label="ReferenceUsage" comment="&lt;p>A &lt;code>ReferenceUsage&lt;/code> is a &lt;code>Usage&lt;/code> that specifies a non-compositional (&lt;code>isComposite = false&lt;/code>) reference to something. The &lt;code>definition&lt;/code> of a &lt;code>ReferenceUsage&lt;/code> can be any kind of &lt;code>Classifier&lt;/code>, with the default being the top-level &lt;code>Classifier&lt;/code> &lt;code>&lt;em>Base::Anything&lt;/em>&lt;/code> from the Kernel Semantic Library. This allows the specification of a generic reference without distinguishing if the thing referenced is an attribute value, item, action, etc.&lt;/p>&#xA;isReference"/>
    <classes name="AttributeUsage" label="AttributeUsage" comment="&lt;p>An &lt;code>AttributeUsage&lt;/code> is a &lt;code>Usage&lt;/code> whose type is a &lt;code>DataType&lt;/code>. Nominally, if the type is an &lt;code>AttributeDefinition&lt;/code>, an &lt;code>AttributeUsage&lt;/code> is a usage of a &lt;code>AttributeDefinition&lt;/code> to represent the value of some system quality or characteristic. However, other kinds of kernel &lt;code>DataTypes&lt;/code> are also allowed, to permit use of &lt;code>DataTypes&lt;/code> from the Kernel Model Libraries. An &lt;code>AttributeUsage&lt;/code> itself as well as all its nested &lt;code>features&lt;/code> must be referential (non-composite).&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>AttributeUsage&lt;/code> must specialize, directly or indirectly, the base &lt;code>Feature&lt;/code> &lt;code>&lt;em>Base::dataValues&lt;/em>&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;isReference&#xA;feature->forAll(not isComposite)&#xA;specializesFromLibrary('Base::dataValues')"/>
    <classes name="DataType" label="DataType" comment="&lt;p>A &lt;code>DataType&lt;/code> is a &lt;code>Classifier&lt;/code> of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same &lt;code>DataType&lt;/code>&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.&lt;/li>&#xA;&#x9;&lt;li>Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;specializesFromLibrary('Base::DataValue')&#xA;ownedSpecialization.general->&#xA;    forAll(not oclIsKindOf(Class) and &#xA;           not oclIsKindOf(Association))"/>
    <classes name="EnumerationUsage" label="EnumerationUsage" comment="&lt;p>An &lt;code>EnumerationUsage&lt;/code> is an &lt;code>AttributeUsage&lt;/code> whose &lt;code>attributeDefinition&lt;/code> is an &lt;code>EnumerationDefinition&lt;/code>.&lt;/p>"/>
    <classes name="EnumerationDefinition" label="EnumerationDefinition" comment="&lt;p>An &lt;code>EnumerationDefinition&lt;/code> is an &lt;code>AttributeDefinition&lt;/code> all of whose instances are given by an explicit list of &lt;code>enumeratedValues&lt;/code>. This is realized by requiring that the &lt;code>EnumerationDefinition&lt;/code> have &lt;code>isVariation = true&lt;/code>, with the &lt;code>enumeratedValues&lt;/code> being its &lt;code>variants&lt;/code>.&lt;/p> &#xA;isVariation"/>
    <classes name="AttributeDefinition" label="AttributeDefinition" comment="&lt;p>An &lt;code>AttributeDefinition&lt;/code> is a &lt;code>Definition&lt;/code> and a &lt;code>DataType&lt;/code> of information about a quality or characteristic of a system or part of a system that has no independent identity other than its value. All &lt;code>features&lt;/code> of an &lt;code>AttributeDefinition&lt;/code> must be referential (non-composite).&lt;/p>&#xA;&#xA;&lt;p>As a &lt;code>DataType&lt;/code>, an &lt;code>AttributeDefinition&lt;/code> must specialize, directly or indirectly, the base &lt;code>DataType&lt;/code> &lt;code>&lt;em>Base::DataValue&lt;/em>&lt;/code> from the Kernel Semantic Library.&lt;/p>&#xA;feature->forAll(not isComposite)"/>
    <classes name="OccurrenceUsage" label="OccurrenceUsage" comment="&lt;p>An &lt;code>OccurrenceUsage&lt;/code> is a &lt;code>Usage&lt;/code> whose &lt;code>types&lt;/code> are all &lt;code>Classes&lt;/code>. Nominally, if a &lt;code>type&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code>, an &lt;code>OccurrenceUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>OccurrenceDefinition&lt;/code> within a system. However, other types of Kernel &lt;code>Classes&lt;/code> are also allowed, to permit use of &lt;code>Classes&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;individualDefinition =&#xA;    let individualDefinitions : OrderedSet(OccurrenceDefinition) = &#xA;        occurrenceDefinition->&#xA;            selectByKind(OccurrenceDefinition)->&#xA;            select(isIndividual) in&#xA;    if individualDefinitions->isEmpty() then null&#xA;    else individualDefinitions->first() endif&#xA;isIndividual implies individualDefinition &lt;> null&#xA;specializesFromLibrary('Occurrences::occurrences')&#xA;isComposite and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(OccurrenceUsage) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKind(Class))) implies&#xA;    specializesFromLibrary('Occurrences::Occurrence::suboccurrences')&#xA;occurrenceDefinition->&#xA;    selectByKind(OccurrenceDefinition)->&#xA;    select(isIndividual).size() &lt;= 1&#xA;portionKind &lt;> null implies&#xA;    occurrenceDefinition->forAll(occ | &#xA;        featuringType->exists(specializes(occ)))"/>
    <classes name="ItemUsage" label="ItemUsage" comment="&lt;p>An &lt;code>ItemUsage&lt;/code> is a &lt;code>ItemUsage&lt;/code> whose &lt;code>definition&lt;/code> is a &lt;code>Structure&lt;/code>. Nominally, if the &lt;code>definition&lt;/code> is an &lt;code>ItemDefinition&lt;/code>, an &lt;code>ItemUsage&lt;/code> is a &lt;code>ItemUsage&lt;/code> of that &lt;code>ItemDefinition&lt;/code> within a system. However, other kinds of Kernel &lt;code>Structures&lt;/code> are also allowed, to permit use of &lt;code>Structures&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;itemDefinition = occurrenceDefinition->selectByKind(ItemDefinition)&#xA;specializesFromLibrary('Items::items')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary('Items::Item::subitem')"/>
    <classes name="PartUsage" label="PartUsage" comment="&lt;p>A &lt;code>PartUsage&lt;/code> is a usage of a &lt;code>PartDefinition&lt;/code> to represent a system or a part of a system. At least one of the &lt;code>itemDefinitions&lt;/code> of the &lt;code>PartUsage&lt;/code> must be a &lt;code>PartDefinition&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>PartUsage&lt;/code> must subset, directly or indirectly, the base &lt;code>PartUsage&lt;/code> &lt;em>&lt;code>parts&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>&#xA;itemDefinition->selectByKind(PartDefinition)&#xA;partDefinition->notEmpty()&#xA;specializesFromLibrary('Parts::parts')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary('Items::Item::subparts')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(ActorMembership) implies&#xA;    if owningType.oclIsKindOf(RequirementDefinition) or &#xA;       owningType.oclIsKindOf(RequirementUsage)&#xA;    then specializesFromLibrary('Requirements::RequirementCheck::actors')&#xA;    else specializesFromLibrary('Cases::Case::actors')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(StakeholderMembership) implies&#xA;    specializesFromLibrary('Requirements::RequirementCheck::stakeholders')"/>
    <classes name="PartDefinition" label="PartDefinition" comment="&lt;p>A &lt;code>PartDefinition&lt;/code> is an &lt;code>ItemDefinition&lt;/code> of a &lt;code>Class&lt;/code> of systems or parts of systems. Note that all parts may be considered items for certain purposes, but not all items are parts that can perform actions within a system.&lt;/p>&#xA;&#xA;specializesFromLibrary('Parts::Part')"/>
    <classes name="PortUsage" label="PortUsage" comment="&lt;p>A &lt;code>PortUsage&lt;/code> is a usage of a &lt;code>PortDefinition&lt;/code>. A &lt;code>PortUsage&lt;/code> itself as well as all its &lt;code>nestedUsages&lt;/code> must be referential (non-composite).&lt;/p>&#xA;nestedUsage->&#xA;    reject(oclIsKindOf(PortUsage))->&#xA;    forAll(not isComposite)&#xA;specializesFromLibrary('Ports::ports')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PortDefinition) or&#xA; owningType.oclIsKindOf(PortUsage)) implies&#xA;    specializesFromLibrary('Ports::Port::subports')&#xA;owningType = null or&#xA;not owningType.oclIsKindOf(PortDefinition) and&#xA;not owningType.oclIsKindOf(PortUsage) implies&#xA;    isReference"/>
    <classes name="PortDefinition" label="PortDefinition" comment="&lt;p>A &lt;code>PortDefinition&lt;/code> defines a point at which external entities can connect to and interact with a system or part of a system. Any &lt;code>ownedUsages&lt;/code> of a &lt;code>PortDefinition&lt;/code>, other than &lt;code>PortUsages&lt;/code>, must not be composite.&lt;/p>&#xA;&#xA;&#xA;&#xA;conjugatedPortDefinition = &#xA;let conjugatedPortDefinitions : OrderedSet(ConjugatedPortDefinition) =&#xA;    ownedMember->selectByKind(ConjugatedPortDefinition) in&#xA;if conjugatedPortDefinitions->isEmpty() then null&#xA;else conjugatedPortDefinitions->first()&#xA;endif&#xA;ownedUsage->&#xA;    reject(oclIsKindOf(PortUsage))->&#xA;    forAll(not isComposite)&#xA;not oclIsKindOf(ConjugatedPortDefinition) implies&#xA;    ownedMember->&#xA;        selectByKind(ConjugatedPortDefinition)->&#xA;        size() = 1&#xA;specializesFromLibrary('Ports::Port')"/>
    <classes name="ConjugatedPortDefinition" label="ConjugatedPortDefinition" comment="&lt;p>A &lt;code>ConjugatedPortDefinition&lt;/code> is a &lt;code>PortDefinition&lt;/code> that is a &lt;code>PortDefinition&lt;/code> of its original &lt;code>PortDefinition&lt;/code>. That is, a &lt;code>ConjugatedPortDefinition&lt;/code> inherits all the &lt;code>features&lt;/code> of the original &lt;code>PortDefinition&lt;/code>, but input &lt;code>flows&lt;/code> of the original &lt;code>PortDefinition&lt;/code> become outputs on the &lt;code>ConjugatedPortDefinition&lt;/code> and output &lt;code>flows&lt;/code> of the original &lt;code>PortDefinition&lt;/code> become inputs on the &lt;code>ConjugatedPortDefinition&lt;/code>. Every &lt;code>PortDefinition&lt;/code> (that is not itself a &lt;code>&lt;code>ConjugatedPortDefinition&lt;/code>&lt;/code>) has exactly one corresponding &lt;code>ConjugatedPortDefinition&lt;/code>, whose effective name is the name of the &lt;code>originalPortDefinition&lt;/code>, with the character &lt;code>~&lt;/code> prepended.&lt;/p>&#xA;ownedPortConjugator.originalPortDefinition = originalPortDefinition&#xA;conjugatedPortDefinition = null"/>
    <classes name="PortConjugation" label="PortConjugation" comment="&lt;p>A &lt;code>PortConjugation&lt;/code> is a &lt;code>Conjugation&lt;/code> &lt;code>Relationship&lt;/code> between a &lt;code>PortDefinition&lt;/code> and its corresponding &lt;code>ConjugatedPortDefinition&lt;/code>. As a result of this &lt;code>Relationship&lt;/code>, the &lt;code>ConjugatedPortDefinition&lt;/code> inherits all the &lt;code>features&lt;/code> of the original &lt;code>PortDefinition&lt;/code>, but input &lt;code>flows&lt;/code> of the original &lt;code>PortDefinition&lt;/code> become outputs on the &lt;code>ConjugatedPortDefinition&lt;/code> and output &lt;code>flows&lt;/code> of the original &lt;code>PortDefinition&lt;/code> become inputs on the &lt;code>ConjugatedPortDefinition&lt;/code>.&lt;/code>&lt;/p>&#xA;"/>
    <classes name="ConnectorAsUsage" label="ConnectorAsUsage" comment="&lt;p>A &lt;code>ConnectorAsUsage&lt;/code> is both a &lt;code>Connector&lt;/code> and a &lt;code>Usage&lt;/code>. &lt;code>ConnectorAsUsage&lt;/code> cannot itself be instantiated in a SysML model, but it is the base class for the concrete classes &lt;code>BindingConnectorAsUsage&lt;/code>, &lt;code>SuccessionAsUsage&lt;/code> and &lt;code>ConnectionUsage&lt;/code>.&lt;/p>"/>
    <classes name="Connector" label="Connector" comment="&lt;p>A &lt;code>Connector&lt;/code> is a usage of &lt;code>Associations&lt;/code>, with links restricted according to instances of the &lt;code>Type&lt;/code> in which they are used (domain of the &lt;code>Connector&lt;/code>). The &lt;code>associations&lt;/code> of the &lt;code>Connector&lt;/code> restrict what kinds of things might be linked. The &lt;code>Connector&lt;/code> further restricts these links to be between values of &lt;code>Features&lt;/code> on instances of its domain.&lt;/p>&#xA;&#xA;relatedFeature = connectorEnd.ownedReferenceSubsetting->&#xA;    select(s | s &lt;> null).subsettedFeature&#xA;relatedFeature->forAll(f | &#xA;    if featuringType->isEmpty() then f.isFeaturedWithin(null)&#xA;    else featuringType->forAll(t | f.isFeaturedWithin(t))&#xA;    endif)&#xA;sourceFeature = &#xA;    if relatedFeature->isEmpty() then null &#xA;    else relatedFeature->first() &#xA;    endif&#xA;targetFeature =&#xA;    if relatedFeature->size() &lt; 2 then OrderedSet{}&#xA;    else &#xA;        relatedFeature->&#xA;            subSequence(2, relatedFeature->size())->&#xA;            asOrderedSet()&#xA;    endif&#xA;not isAbstract implies relatedFeature->size() >= 2&#xA;specializesFromLibrary('Links::links')&#xA;association->exists(oclIsKindOf(AssociationStructure)) implies&#xA;    specializesFromLibrary('Objects::linkObjects')&#xA;connectorEnds->size() = 2 and&#xA;association->exists(oclIsKindOf(AssocationStructure)) implies&#xA;    specializesFromLibrary('Objects::binaryLinkObjects')&#xA;connectorEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::binaryLinks')&#xA;connectorEnds->size() > 2 implies&#xA;    not specializesFromLibrary('Links::BinaryLink')"/>
    <classes name="Association" label="Association" comment="&lt;p>An &lt;code>Association&lt;/code> is a &lt;code>Relationship&lt;/code> and a &lt;code>Classifier&lt;/code> to enable classification of links between things (in the universe). The co-domains (&lt;code>types&lt;/code>) of the &lt;code>associationEnd&lt;/code> &lt;code>Features&lt;/code> are the &lt;code>relatedTypes&lt;/code>, as co-domain and participants (linked things) of an &lt;code>Association&lt;/code> identify each other.&lt;/p>&#xA;&#xA;relatedType = associationEnd.type&#xA;specializesFromLibrary('Links::Link')&#xA;oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)&#xA;associationEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::BinaryLink')&#xA;not isAbstract implies relatedType->size() >= 2&#xA;associationEnds->size() > 2 implies&#xA;    not specializesFromLibrary('Links::BinaryLink')&#xA;sourceType =&#xA;    if relatedType->isEmpty() then null&#xA;    else relatedType->first() endif&#xA;targetType =&#xA;    if relatedType->size() &lt; 2 then OrderedSet{}&#xA;    else &#xA;        relatedType->&#xA;            subSequence(2, relatedType->size())->&#xA;            asOrderedSet() &#xA;    endif"/>
    <classes name="FlowConnectionUsage" label="FlowConnectionUsage" comment="&lt;p>A &lt;code>FlowConnectionUsage&lt;/code> is a &lt;code>ConnectionUsage&lt;/code> that is also an &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;if ownedEndFeatures->isEmpty() then&#xA;    specializesFromLibrary('Connections::messageConnections')&#xA;else&#xA;    specializesFromLibrary('Connections::flowConnections')&#xA;endif"/>
    <classes name="ConnectionUsage" label="ConnectionUsage" comment="&lt;p>A &lt;code>ConnectionUsage&lt;/code> is a &lt;code>ConnectorAsUsage&lt;/code> that is also a &lt;code>PartUsage&lt;/code>. Nominally, if its type is a &lt;code>ConnectionDefinition&lt;/code>, then a &lt;code>ConnectionUsage&lt;/code> is a Usage of that &lt;code>ConnectionDefinition&lt;/code>, representing a connection between parts of a system. However, other kinds of kernel &lt;code>AssociationStructures&lt;/code> are also allowed, to permit use of &lt;code>AssociationStructures&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;specializesFromLibrary('Connections::connections')&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary('Connections::binaryConnections')"/>
    <classes name="AssociationStructure" label="AssociationStructure" comment="&lt;p>An &lt;code>AssociationStructure&lt;/code> is an &lt;code>Association&lt;/code> that is also a &lt;code>Structure&lt;/code>, classifying link objects that are both links and objects. As objects, link objects can be created and destroyed, and their non-end &lt;code>Features&lt;/code> can change over time. However, the values of the end &lt;code>Features&lt;/code> of a link object are fixed and cannot change over its lifetime.&lt;/p>&#xA;specializesFromLibrary('Objects::LinkObject')&#xA;endFeature->size() = 2 implies&#xA;    specializesFromLibrary('Objects::BinaryLinkObject')"/>
    <classes name="ItemFlow" label="ItemFlow" comment="&lt;p>An &lt;code>ItemFlow&lt;/code> is a &lt;code>Step&lt;/code> that represents the transfer of objects or data values from one &lt;code>Feature&lt;/code> to another. &lt;code>ItemFlows&lt;/code> can take non-zero time to complete.&lt;/p>&#xA;&#xA;if itemFlowEnds->isEmpty() then&#xA;    specializesFromLibrary('Transfers::transfers')&#xA;else&#xA;    specializesFromLibrary('Transfers::flowTransfers')&#xA;endif&#xA;itemType =&#xA;    if itemFeature = null then Sequence{}&#xA;    else itemFeature.type&#xA;    endif&#xA;sourceOutputFeature =&#xA;    if connectorEnd->isEmpty() or &#xA;        connectorEnd.ownedFeature->isEmpty()&#xA;    then null&#xA;    else connectorEnd.ownedFeature->first()&#xA;    endif&#xA;targetInputFeature =&#xA;    if connectorEnd->size() &lt; 2 or &#xA;        connectorEnd->at(2).ownedFeature->isEmpty()&#xA;    then null&#xA;    else connectorEnd->at(2).ownedFeature->first()&#xA;    endif&#xA;itemFlowEnd = connectorEnd->selectByKind(ItemFlowEnd)&#xA;itemFeature =&#xA;    let itemFeatures : Sequence(ItemFeature) = &#xA;        ownedFeature->selectByKind(ItemFeature) in&#xA;    if itemFeatures->isEmpty() then null&#xA;    else itemFeatures->first()&#xA;    endif&#xA;ownedFeature->selectByKind(ItemFeature)->size() &lt;= 1"/>
    <classes name="Step" label="Step" comment="&lt;p>A &lt;code>Step&lt;/code> is a &lt;code>Feature&lt;/code> that is typed by one or more &lt;code>Behaviors&lt;/code>. &lt;code>Steps&lt;/code> may be used by one &lt;code>Behavior&lt;/code> to coordinate the performance of other &lt;code>Behaviors&lt;/code>, supporting a steady refinement of behavioral descriptions. &lt;code>Steps&lt;/code> can be ordered in time and can be connected using &lt;code>ItemFlows&lt;/code> to specify things flowing between their &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::performances')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) implies&#xA;    specializesFromLibrary('Performances::Performance::enclosedPerformance')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.oclIsKindOf(Feature) and&#xA; owningType.oclAsType(Feature).type->&#xA;    exists(oclIsKindOf(Structure)) implies&#xA;    specializesFromLibrary('Objects::Object::ownedPerformance')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) and&#xA;    self.isComposite implies&#xA;    specializesFromLibrary('Performances::Performance::subperformance')&#xA;behavior = type->selectByKind(Behavior)"/>
    <classes name="Behavior" label="Behavior" comment="&lt;p>A &lt;code>Behavior &lt;/code>coordinates occurrences of other &lt;code>Behaviors&lt;/code>, as well as changes in objects. &lt;code>Behaviors&lt;/code> can be decomposed into &lt;code>Steps&lt;/code> and be characterized by &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::Performance')&#xA;step = feature->selectByKind(Step)&#xA;ownedSpecialization.general->forAll(not oclIsKindOf(Structure))"/>
    <classes name="ItemFlowEnd" label="ItemFlowEnd" comment="&lt;p>An &lt;code>ItemFlowEnd&lt;/code> is a &lt;code>Feature&lt;/code> that is one of the &lt;code>connectorEnds&lt;/code> giving the &lt;code>&lt;em>source&lt;/em>&lt;/code> or &lt;code>&lt;em>target&lt;/em>&lt;/code> of an &lt;code>ItemFlow&lt;/code>. For &lt;code>ItemFlows&lt;/code> typed by &lt;code>&lt;em>FlowTransfer&lt;/em>&lt;/code> or its specializations, &lt;code>ItemFlowEnds&lt;/code> must have exactly one &lt;code>ownedFeature&lt;/code>, which redefines &lt;code>&lt;em>Transfer::source::sourceOutput&lt;/em>&lt;/code> or &lt;code>&lt;em>Transfer::target::targetInput&lt;/em>&lt;/code> and redefines the corresponding feature of the &lt;code>relatedElement&lt;/code> for its end.&lt;/p>&#xA;isEnd&#xA;ownedFeature->size() = 1&#xA;owningType &lt;> null and owningType.oclIsKindOf(ItemFlow)"/>
    <classes name="ItemFeature" label="ItemFeature" comment="&lt;p>An &lt;code>ItemFeature&lt;/code> is the &lt;code>ownedFeature&lt;/code> of an &lt;code>ItemFlow&lt;/code> that identifies the things carried by the kinds of transfers that are instances of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;ownedRedefinition.redefinedFeature->&#xA;    redefinesFromLibrary('Transfers::Transfer::item')"/>
    <classes name="Interaction" label="Interaction" comment="&lt;p>An &lt;code>Interaction&lt;/code> is a &lt;code>Behavior&lt;/code> that is also an &lt;code>Association&lt;/code>, providing a context for multiple objects that have behaviors that impact one another.&lt;/p>&#xA;"/>
    <classes name="ActionUsage" label="ActionUsage" comment="&lt;p>An &lt;code>ActionUsage&lt;/code> is a &lt;code>Usage&lt;/code> that is also a &lt;code>Step&lt;/code>, and, so, is typed by a &lt;code>Behavior&lt;/code>. Nominally, if the type is an &lt;code>ActionDefinition&lt;/code>, an &lt;code>ActionUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>ActionDefinition&lt;/code> within a system. However, other kinds of kernel &lt;code>Behaviors&lt;/code> are also allowed, to permit use of &lt;code>Behaviors&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::subactions')&#xA;specializesFromLibrary('Actions::actions')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PartDefinition) or&#xA; owningType.oclIsKindOf(PartUsage)) implies&#xA;    specializesFromLibrary('Parts::Part::ownedActions')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(StateSubactionMembership) implies&#xA;    let kind : StateSubactionKind = &#xA;        owningFeatureMembership.oclAsType(StateSubactionMembership).kind in&#xA;    if kind = StateSubactionKind::entry then&#xA;        redefinesFromLibrary('States::StateAction::entryAction')&#xA;    else if kind = StateSubactionKind::do then&#xA;        redefinesFromLibrary('States::StateAction::doAction')&#xA;    else&#xA;        redefinesFromLibrary('States::StateAction::exitAction')&#xA;    endif endif&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(AnalysisCaseDefinition) and&#xA;        owningType.oclAsType(AnalysisCaseDefinition).analysisAction->&#xA;            includes(self) or&#xA;     owningType.oclIsKindOf(AnalysisCaseUsage) and&#xA;        owningType.oclAsType(AnalysisCaseUsage).analysisAction->&#xA;            includes(self)) implies&#xA;    specializesFromLibrary('AnalysisCases::AnalysisCase::analysisSteps')"/>
    <classes name="Expression" label="Expression" comment="&lt;p>An &lt;code>Expression&lt;/code> is a &lt;code>Step&lt;/code> that is typed by a &lt;code>Function&lt;/code>. An &lt;code>Expression&lt;/code> that also has a &lt;code>Function&lt;/code> as its &lt;code>featuringType&lt;/code> is a computational step within that &lt;code>Function&lt;/code>. An &lt;code>Expression&lt;/code> always has a single &lt;code>result&lt;/code> parameter, which redefines the &lt;code>result&lt;/code> parameter of its defining &lt;code>function&lt;/code>. This allows &lt;code>Expressions&lt;/code> to be interconnected in tree structures, in which inputs to each &lt;code>Expression&lt;/code> in the tree are determined as the results of other &lt;code>Expression&lt;/code> in the tree.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})&#xA;specializesFromLibrary('Performances::evaluations')&#xA;owningMembership &lt;> null and &#xA;owningMembership.oclIsKindOf(FeatureValue) implies&#xA;    let featureWithValue : Feature = &#xA;        owningMembership.oclAsType(FeatureValue).featureWithValue in&#xA;    featuringType = featureWithValue.featuringType&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;result =&#xA;    let resultParams : Sequence(Feature) =&#xA;        ownedFeatureMemberships->&#xA;            selectByKind(ReturnParameterMembership).&#xA;            ownedParameterMember in&#xA;    if resultParams->notEmpty() then resultParams->first()&#xA;    else if function &lt;> null then function.result&#xA;    else null&#xA;    endif endif&#xA;ownedFeatureMembership->&#xA;    selectByKind(ReturnParameterMembership)->&#xA;    size() &lt;= 1&#xA;membership->selectByKind(ResultExpressionMembership)->size() &lt;= 1"/>
    <classes name="Function" label="Function" comment="&lt;p>A &lt;code>Function&lt;/code> is a &lt;code>Behavior&lt;/code> that has an &lt;code>out&lt;/code> &lt;code>parameter&lt;/code> that is identified as its &lt;code>result&lt;/code>. A &lt;code>Function&lt;/code> represents the performance of a calculation that produces the values of its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code>. This calculation may be decomposed into &lt;code>Expressions&lt;/code> that are &lt;code>steps&lt;/code> of the &lt;code>Function&lt;/code>.&lt;/p>&#xA;&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;specializesFromLibrary('Performances::Evaluation')&#xA;result =&#xA;    let resultParams : Sequence(Feature) =&#xA;        ownedFeatureMemberships->&#xA;            selectByKind(ReturnParameterMembership).&#xA;            ownedParameterMember in&#xA;    if resultParams->notEmpty() then resultParams->first()&#xA;    else null&#xA;    endif&#xA;ownedFeatureMembership->&#xA;    selectByKind(ReturnParameterMembership)->&#xA;    size() &lt;= 1&#xA;membership->selectByKind(ResultExpressionMembership)->size() &lt;= 1"/>
    <classes name="InterfaceUsage" label="InterfaceUsage" comment="&lt;p>An &lt;code>InterfaceUsage&lt;/code> is a Usage of an &lt;code>InterfaceDefinition&lt;/code> to represent an interface connecting parts of a system through specific ports.&lt;/p>&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary('Interfaces::binaryInterfaces')&#xA;specializesFromLibrary('Interfaces::interfaces')"/>
    <classes name="InterfaceDefinition" label="InterfaceDefinition" comment="&lt;p>An &lt;code>InterfaceDefinition&lt;/code> is a &lt;code>ConnectionDefinition&lt;/code> all of whose ends are &lt;code>PortUsages&lt;/code>, defining an interface between elements that interact through such ports.&lt;/p>&#xA;specializesFromLibrary('Interfaces::Interface')&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary('Interfaces::BinaryInterface')"/>
    <classes name="ConnectionDefinition" label="ConnectionDefinition" comment="&lt;p>A &lt;code>ConnectionDefinition&lt;/code> is a &lt;code>PartDefinition&lt;/code> that is also an &lt;code>AssociationStructure&lt;/code>. The end &lt;code>Features&lt;/code> of a &lt;code>ConnectionDefinition&lt;/code> must be &lt;code>Usages&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Connections::Connection')&#xA;ownedEndFeature->size() = 2 implies&#xA;    specializesFromLibrary('Connections::BinaryConnections')"/>
    <classes name="AllocationUsage" label="AllocationUsage" comment="&lt;p>An &lt;code>AllocationUsage&lt;/code> is a usage of an &lt;code>AllocationDefinition&lt;/code> asserting the allocation of the &lt;code>source&lt;/code> feature to the &lt;code>target&lt;/code> feature.&lt;/p>&#xA;specializesFromLibrary('Allocations::allocations')"/>
    <classes name="AllocationDefinition" label="AllocationDefinition" comment="&lt;p>An &lt;code>AllocationDefinition&lt;/code> is a &lt;code>ConnectionDefinition&lt;/code> that specifies that some or all of the responsibility to realize the intent of the &lt;code>source&lt;/code> is allocated to the &lt;code>target&lt;/code> instances. Such allocations define mappings across the various structures and hierarchies of a system model, perhaps as a precursor to more rigorous specifications and implementations. An &lt;code>AllocationDefinition&lt;/code> can itself be refined using nested &lt;code>allocations&lt;/code> that give a finer-grained decomposition of the containing allocation mapping.&lt;/p>&#xA;allocation = usage->selectAsKind(AllocationUsage)&#xA;specializesFromLibrary('Allocations::Allocation')"/>
    <classes name="StateUsage" label="StateUsage" comment="&lt;p>A &lt;code>StateUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that is nominally the &lt;code>Usage&lt;/code> of a &lt;code>StateDefinition&lt;/code>. However, other kinds of kernel &lt;code>Behaviors&lt;/code> are also allowed as &lt;code>types&lt;/code>, to permit use of &lt;code>Behaviors&lt;/code from the Kernel Model Libraries.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>StateUsage&lt;/code> may be related to up to three of its &lt;code>ownedFeatures&lt;/code> by &lt;code>StateSubactionMembership&lt;/code> &lt;code>Relationships&lt;/code>, all of different &lt;code>kinds&lt;/code>, corresponding to the entry, do and exit actions of the &lt;code>StateUsage&lt;/code>.&lt;/p>&#xA;&#xA;doAction =&#xA;    let doMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::do) in&#xA;    if doMemberships->isEmpty() then null&#xA;    else doMemberships->at(1)&#xA;    endif&#xA;entryAction =&#xA;    let entryMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::entry) in&#xA;    if entryMemberships->isEmpty() then null&#xA;    else entryMemberships->at(1)&#xA;    endif&#xA;isParallel implies&#xA;    nestedAction.incomingTransition->isEmpty() and&#xA;    nestedAction.outgoingTransition->isEmpty()&#xA;isSubstateUsage(true) implies&#xA;    specializesFromLibrary('States::State::substates')&#xA;exitAction =&#xA;    let exitMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::exit) in&#xA;    if exitMemberships->isEmpty() then null&#xA;    else exitMemberships->at(1)&#xA;    endif&#xA;specializesFromLibrary('States::stateActions')&#xA;ownedMembership->&#xA;    selectByKind(StateSubactionMembership)->&#xA;    isUnique(kind)&#xA;isSubstateUsage(false) implies&#xA;    specializesFromLibrary('States::State::substates')"/>
    <classes name="TransitionUsage" label="TransitionUsage" comment="&lt;p>A &lt;code>TransitionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> representing a triggered transition between &lt;code>ActionUsages&lt;/code> or &lt;code>StateUsages&lt;/code>. When triggered by a &lt;code>triggerAction&lt;/code>, when its &lt;code>guardExpression&lt;/code> is true, the &lt;code>TransitionUsage&lt;/code> asserts that its &lt;code>source&lt;/code> is exited, then its &lt;code>effectAction&lt;/code> (if any) is performed, and then its &lt;code>target&lt;/code> is entered.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>TransitionUsage&lt;/code> can be related to some of its &lt;code>ownedFeatures&lt;/code> using &lt;code>TransitionFeatureMembership&lt;/code> &lt;code>Relationships&lt;/code>, corresponding to the &lt;code>triggerAction&lt;/code>, &lt;code>guardExpression&lt;/code> and &lt;code>effectAction&lt;/code> of the &lt;code>TransitionUsage&lt;/code>.&lt;/p>&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ActionDefinition) or &#xA; owningType.oclIsKindOf(ActionUsage)) and&#xA;not (owningType.oclIsKindOf(StateDefinition) or&#xA;     owningType.oclIsKindOf(StateUsage)) implies&#xA;    specializesFromLibrary('Actions::Action::decisionTransitions')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(StateDefinition) or&#xA; owningType.oclIsKindOf(StateUsage)) implies&#xA;    specializesFromLibrary(&quot;States::State::stateTransitions&quot;)&#xA;specializesFromLibrary('Actions::transitionActions')&#xA;source =&#xA;    if ownedMembership->isEmpty() then null&#xA;    else&#xA;        let member : Element = &#xA;            ownedMembership->at(1).memberElement in &#xA;        if not member.oclIsKindOf(ActionUsage) then null&#xA;        else member.oclAsKindOf(ActionUsage)&#xA;        endif&#xA;    endif&#xA;target =&#xA;    if succession.targetFeature->isEmpty() then null&#xA;    else&#xA;        let targetFeature : Feature = &#xA;            succession.targetFeature->at(1) in&#xA;        if not targetFeature.oclIsKindOf(ActionUsage) then null&#xA;        else targetFeature.oclAsType(ActionUsage)&#xA;        endif&#xA;    endif&#xA;triggerAction = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeature->&#xA;    selectByKind(AcceptActionUsage)&#xA;let successions : Sequence(Successions) = &#xA;    ownedMember->selectByKind(Succession) in&#xA;successions->notEmpty() and&#xA;successions->at(1).targetFeature->&#xA;    forAll(oclIsKindOf(ActionUsage))&#xA;guardExpression = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeature->&#xA;    selectByKind(Expression)&#xA;triggerAction->forAll(specializesFromLibrary('Actions::TransitionAction::accepter') and&#xA;guardExpression->forAll(specializesFromLibrary('Actions::TransitionAction::guard') and&#xA;effectAction->forAll(specializesFromLibrary('Actions::TransitionAction::effect'))&#xA;triggerAction = ownedFeatureMembership->&#xA;    selectByKind(TransitionFeatureMembership)->&#xA;    select(kind = TransitionFeatureKind::trigger).transitionFeatures->&#xA;    selectByKind(AcceptActionUsage)&#xA;succession.sourceFeature = source&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(source) and&#xA;    b.relatedFeatures->includes(inputParameter(1)))&#xA;triggerAction->notEmpty() implies&#xA;    let payloadParameter : Feature = inputParameter(2) in&#xA;    payloadParameter &lt;> null and&#xA;    payloadParameter.subsetsChain(triggerAction->at(1), triggerPayloadParameter())&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(succession) and&#xA;    b.relatedFeatures->includes(resolveGlobal(&#xA;        'TransitionPerformances::TransitionPerformance::transitionLink')))&#xA;if triggerAction->isEmpty() then&#xA;    inputParameters()->size() >= 1&#xA;else&#xA;    inputParameters()->size() >= 2&#xA;endif&#xA;    &#xA;succession = ownedMember->selectByKind(Succession)->at(1)"/>
    <classes name="AcceptActionUsage" label="AcceptActionUsage" comment="&lt;p>An &lt;code>AcceptActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies the acceptance of an &lt;em>&lt;code>incomingTransfer&lt;/code>&lt;/em> from the &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> given by the result of its &lt;code>receiverArgument&lt;/code> Expression. (If no &lt;code>receiverArgument&lt;/code> is provided, the default is the &lt;em>&lt;code>this&lt;/code>&lt;/em> context of the AcceptActionUsage.) The payload of the accepted &lt;em>&lt;code>Transfer&lt;/em>&lt;/code> is output on its &lt;code>payloadParameter&lt;/code>. Which &lt;em>&lt;code>Transfers&lt;/em>&lt;/code> may be accepted is determined by conformance to the typing and (potentially) binding of the &lt;code>payloadParameter&lt;/code>.&lt;/p>&#xA;&#xA;inputParameters()->size() >= 2&#xA;receiverArgument = argument(2)&#xA;payloadArgument = argument(1)&#xA;payloadParameter = &#xA; if parameter->isEmpty() then null&#xA; else parameter->first() endif&#xA;not isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::acceptActions')&#xA;isSubactionUsage() and not isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::Action::acceptSubactions')&#xA;isTriggerAction() implies&#xA;    specializesFromLibrary('Actions::TransitionAction::accepter')&#xA;payloadArgument &lt;> null and&#xA;payloadArgument.oclIsKindOf(TriggerInvocationExpression) implies&#xA;    let invocation : Expression =&#xA;        payloadArgument.oclAsType(Expression) in&#xA;    parameter->size() >= 2 and&#xA;    invocation.parameter->size() >= 2 and        &#xA;    ownedFeature->selectByKind(BindingConnector)->exists(b |&#xA;        b.relatedFeatures->includes(parameter->at(2)) and&#xA;        b.relatedFeatures->includes(invocation.parameter->at(2)))"/>
    <classes name="Succession" label="Succession" comment="&lt;p>A &lt;code>Succession&lt;/code> is a binary &lt;code>Connector&lt;/code> that requires its &lt;code>relatedFeatures&lt;/code> to happen separately in time.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurences::happensBeforeLinks')&#xA;transitionStep =&#xA;    if owningNamespace.oclIsKindOf(Step) and &#xA;        owningNamespace.oclAsType(Step).&#xA;            specializesFromLibrary('TransitionPerformances::TransitionPerformance') then&#xA;        owningNamespace.oclAsType(Step)&#xA;    else null&#xA;    endif&#xA;triggerStep =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 2 or&#xA;       not transitionStep.ownedFeature->at(2).oclIsKindOf(Step) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(2).oclAsType(Step)}&#xA;    endif&#xA;effectStep =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 4 or&#xA;       not transitionStep.ownedFeature->at(4).oclIsKindOf(Step) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(4).oclAsType(Step)}&#xA;    endif&#xA;guardExpression =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 3 or&#xA;       not transitionStep.ownedFeature->at(3).oclIsKindOf(Expression) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(3).oclAsType(Expression)}&#xA;    endif"/>
    <classes name="CalculationUsage" label="CalculationUsage" comment="&lt;p>A &lt;code>CalculationUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that is also an &lt;code>Expression&lt;/code>, and, so, is typed by a &lt;code>Function&lt;/code>. Nominally, if the &lt;code>type&lt;/code> is a &lt;code>CalculationDefinition&lt;/code>, a &lt;code>CalculationUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>CalculationDefinition&lt;/code> within a system. However, other kinds of kernel &lt;code>Functions&lt;/code> are also allowed, to permit use of &lt;code>Functions&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;specializesFromLibrary('Calculations::calculations')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(CalculationDefinition) or&#xA; owningType.oclIsKindOf(CalculationUsage)) implies&#xA;    specializesFromLibrary('Calculations::Calculation::subcalculations')"/>
    <classes name="ConstraintUsage" label="ConstraintUsage" comment="&lt;p>A &lt;code>ConstraintUsage&lt;/code> is an &lt;code>OccurrenceUsage&lt;/code> that is also a &lt;code>BooleanExpression&lt;/code>, and, so, is typed by a &lt;code>Predicate&lt;/code>. Nominally, if the type is a &lt;code>ConstraintDefinition&lt;/code>, a &lt;code>ConstraintUsage&lt;/code> is a &lt;code>Usage&lt;/code> of that &lt;code>ConstraintDefinition&lt;/code>. However, other kinds of kernel &lt;code>Predicates&lt;/code> are also allowed, to permit use of &lt;code>Predicates&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(RequirementConstraintMembership) implies&#xA;    if owningFeatureMembership.oclAsType(RequirementConstraintMembership).kind = &#xA;        RequirementConstraintKind::assumption then&#xA;        specializesFromLibrary('Requirements::RequirementCheck::assumptions')&#xA;    else&#xA;        specializesFromLibrary('Requirements::RequirementCheck::constraints')&#xA;    endif&#xA;specializesFromLibrary('Constraints::constraintChecks')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ItemDefinition) or&#xA; owningType.oclIsKindOf(ItemUsage)) implies&#xA;    specializesFromLibrary('Items::Item::checkedConstraints')"/>
    <classes name="BooleanExpression" label="BooleanExpression" comment="&lt;p>A &lt;code>BooleanExpression&lt;/code> is a &lt;em>&lt;code>Boolean&lt;/code>&lt;/em>-valued &lt;code>Expression&lt;/code> whose type is a &lt;code>Predicate&lt;/code>. It represents a logical condition resulting from the evaluation of the &lt;code>Predicate&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::booleanEvaluations')"/>
    <classes name="Predicate" label="Predicate" comment="&lt;p>A &lt;code>Predicate&lt;/code> is a &lt;code>Function&lt;/code> whose &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> has type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> and multiplicity &lt;code>1..1&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::BooleanEvaluation')"/>
    <classes name="RequirementUsage" label="RequirementUsage" comment="&lt;p>A &lt;code>RequirementUsage&lt;/code> is a &lt;code>Usage&lt;/code> of a &lt;code>RequirementDefinition&lt;/code>.&lt;/p>&#xA;actorParameter = featureMembership->&#xA;    selectByKind(ActorMembership).&#xA;    ownedActorParameter&#xA;assumedConstraint = ownedFeatureMembership->&#xA;    selectByKind(RequirementConstraintMembership)->&#xA;    select(kind = RequirementConstraintKind::assumption).&#xA;    ownedConstraint&#xA;framedConcern = featureMembership->&#xA;    selectByKind(FramedConcernMembership).&#xA;    ownedConcern&#xA;requiredConstraint = ownedFeatureMembership->&#xA;    selectByKind(RequirementConstraintMembership)->&#xA;    select(kind = RequirementConstraintKind::requirement).&#xA;    ownedConstraint&#xA;stakeholderParameter = featureMembership->&#xA;    selectByKind(AStakholderMembership).&#xA;    ownedStakeholderParameter&#xA;subjectParameter =&#xA;    let subjects : OrderedSet(SubjectMembership) = &#xA;        featureMembership->selectByKind(SubjectMembership) in&#xA;    if subjects->isEmpty() then null&#xA;    else subjects->first().ownedSubjectParameter&#xA;    endif&#xA;text = documentation.body&#xA;featureMembership->&#xA;    selectByKind(SubjectMembership)->&#xA;    size() &lt;= 1&#xA;input->notEmpty() and input->first() = subjectParameter&#xA;specializesFromLibrary('Requirements::requirementChecks')&#xA;isComposite and owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(RequirementDefinition) or&#xA;     owningType.oclIsKindOf(RequirementUsage)) implies&#xA;    specializesFromLibrary('Requirements::RequirementCheck::subrequirements')&#xA;owningfeatureMembership &lt;> null and&#xA;owningfeatureMembership.oclIsKindOf(ObjectiveMembership) implies&#xA;    owningType.ownedSpecialization.general->forAll(gen |&#xA;        (gen.oclIsKindOf(CaseDefinition) implies&#xA;            redefines(gen.oclAsType(CaseDefinition).objectiveRequirement)) and&#xA;        (gen.oclIsKindOf(CaseUsage) implies&#xA;            redefines(gen.oclAsType(CaseUsage).objectiveRequirement))&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(RequirementVerificationMembership) implies&#xA;    specializesFromLibrary('VerificationCases::VerificationCase::obj::requirementVerifications')"/>
    <classes name="RequirementDefinition" label="RequirementDefinition" comment="&lt;p>A &lt;code>RequirementDefinition&lt;/code> is a &lt;code>ConstraintDefinition&lt;/code> that defines a requirement used in the context of a specification as a constraint that a valid solution must satisfy. The specification is relative to a specified subject, possibly in collaboration with one or more external actors.&lt;/p>&#xA;text = documentation.body&#xA;assumedConstraint = ownedFeatureMembership->&#xA;    selectByKind(RequirementConstraintMembership)->&#xA;    select(kind = RequirementConstraintKind::assumption).&#xA;    ownedConstraint&#xA;requiredConstraint = ownedFeatureMembership->&#xA;    selectByKind(RequirementConstraintMembership)->&#xA;    select(kind = RequirementConstraintKind::requirement).&#xA;    ownedConstraint&#xA;subjectParameter =&#xA;    let subjects : OrderedSet(SubjectMembership) = &#xA;        featureMembership->selectByKind(SubjectMembership) in&#xA;    if subjects->isEmpty() then null&#xA;    else subjects->first().ownedSubjectParameter&#xA;    endif&#xA;framedConcern = featureMembership->&#xA;    selectByKind(FramedConcernMembership).&#xA;    ownedConcern&#xA;actorParameter = featureMembership->&#xA;    selectByKind(ActorMembership).&#xA;    ownedActorParameter&#xA;stakeholderParameter = featureMembership->&#xA;    selectByKind(StakholderMembership).&#xA;    ownedStakeholderParameter&#xA;featureMembership->&#x9;&#xA;    selectByKind(SubjectMembership)->&#xA;    size() &lt;= 1&#xA;input->notEmpty() and input->first() = subjectParameter&#xA;specializesFromLibrary('Requirements::RequirementCheck')"/>
    <classes name="ConstraintDefinition" label="ConstraintDefinition" comment="&lt;p>A &lt;code>ConstraintDefinition&lt;/code> is an &lt;code>OccurrenceDefinition&lt;/code> that is also a &lt;code>Predicate&lt;/code> that defines a constraint that may be asserted to hold on a system or part of a system.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary('Constraints::ConstraintCheck')"/>
    <classes name="ConcernUsage" label="ConcernUsage" comment="&lt;p>A &lt;code>ConcernUsage&lt;/code> is a &lt;code>Usage&lt;/code> of a &lt;code>ConcernDefinition&lt;/code>.&lt;/p>&#xA;&#xA; The &lt;code>ownedStakeholder&lt;/code> features of the ConcernUsage shall all subset the &lt;em>&lt;code>ConcernCheck::concernedStakeholders&lt;/code> &lt;/em>feature. If the ConcernUsage is an &lt;code>ownedFeature&lt;/code> of a StakeholderDefinition or StakeholderUsage, then the ConcernUsage shall have an &lt;code>ownedStakeholder&lt;/code> feature that is bound to the &lt;em>&lt;code>self&lt;/code>&lt;/em> feature of its owner.&lt;/p>&#xA;&#xA;specializesFromLibrary('Requirements::concernChecks')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(FramedConcernMembership) implies&#xA;    specializesFromLibrary('Requirements::RequirementCheck::concerns')"/>
    <classes name="ConcernDefinition" label="ConcernDefinition" comment="&lt;p>A &lt;code>ConcernDefinition&lt;/code> is a &lt;code>RequirementDefinition&lt;/code> that one or more stakeholders may be interested in having addressed. These stakeholders are identified by the &lt;code>ownedStakeholders&lt;/code>of the &lt;code>ConcernDefinition&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Requirements::ConcernCheck')"/>
    <classes name="CaseUsage" label="CaseUsage" comment="&lt;p>A &lt;code>CaseUsage&lt;/code> is a &lt;code>Usage&lt;/code> of a &lt;code>CaseDefinition&lt;/code>.&lt;/p>&#xA;objectiveRequirement = &#xA;    let objectives: OrderedSet(RequirementUsage) = &#xA;        featureMembership->&#xA;            selectByKind(ObjectiveMembership).&#xA;            ownedRequirement in&#xA;    if objectives->isEmpty() then null&#xA;    else objectives->first().ownedObjectiveRequirement&#xA;    endif&#xA;featureMembership->&#xA;    selectByKind(ObjectiveMembership)->&#xA;    size() &lt;= 1&#xA;featureMembership->&#xA;&#x9;selectByKind(SubjectMembership)->&#xA;&#x9;size() &lt;= 1&#xA;actorParameter = featureMembership->&#xA;    selectByKind(ActorMembership).&#xA;    ownedActorParameter&#xA;subjectParameter =&#xA;    let subjects : OrderedSet(SubjectMembership) = &#xA;        featureMembership->selectByKind(SubjectMembership) in&#xA;    if subjects->isEmpty() then null&#xA;    else subjects->first().ownedSubjectParameter&#xA;    endif&#xA;input->notEmpty() and input->first() = subjectParameter&#xA;specializesFromLibrary('Cases::cases')&#xA;isComposite and owningType &lt;> null and &#xA;    (owningType.oclIsKindOf(CaseDefinition) or&#xA;     owningType.oclIsKindOf(CaseUsage)) implies&#xA;    specializesFromLibrary('Cases::Case::subcases')"/>
    <classes name="CaseDefinition" label="CaseDefinition" comment="&lt;p>A &lt;code>CaseDefinition&lt;/code> is a &lt;code>CalculationDefinition&lt;/code> for a process, often involving collecting evidence or data, relative to a subject, possibly involving the collaboration of one or more other actors, producing a result that meets an objective.&lt;/p>&#xA;objectiveRequirement = &#xA;    let objectives: OrderedSet(RequirementUsage) = &#xA;        featureMembership->&#xA;            selectByKind(ObjectiveMembership).&#xA;            ownedRequirement in&#xA;    if objectives->isEmpty() then null&#xA;    else objectives->first().ownedObjectiveRequirement&#xA;    endif&#xA;featureMembership->&#xA;    selectByKind(ObjectiveMembership)->&#xA;    size() &lt;= 1&#xA;subjectParameter =&#xA;    let subjectMems : OrderedSet(SubjectMembership) = &#xA;        featureMembership->selectByKind(SubjectMembership) in&#xA;    if subjectMems->isEmpty() then null&#xA;    else subjectMems->first().ownedSubjectParameter&#xA;    endif&#xA;actorParameter = featureMembership->&#xA;    selectByKind(ActorMembership).&#xA;    ownedActorParameter&#xA;featureMembership->selectByKind(SubjectMembership)->size() &lt;= 1&#xA;input->notEmpty() and input->first() = subjectParameter&#xA;specializesFromLibrary('Cases::Case')"/>
    <classes name="CalculationDefinition" label="CalculationDefinition" comment="&lt;p>A &lt;code>CalculationDefinition&lt;/code> is an &lt;coed>ActionDefinition&lt;/code> that also defines a &lt;code>Function&lt;/code> producing a &lt;code>result&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Calculations::Calculation')&#xA;calculation = action->selectByKind(CalculationUsage)"/>
    <classes name="ActionDefinition" label="ActionDefinition" comment="&lt;p>An &lt;code>ActionDefinition&lt;/code> is a &lt;code>Definition&lt;/code> that is also a &lt;code>Behavior&lt;/code> that defines an &lt;em>&lt;code>Action&lt;/code>&lt;/em> performed by a system or part of a system.&lt;/p>&#xA;specializesFromLibrary('Actions::Action')&#xA;action = usage->selectByKind(ActionUsage)"/>
    <classes name="AnalysisCaseUsage" label="AnalysisCaseUsage" comment="&lt;p>An &lt;code>AnalysisCaseUsage&lt;/code> is a &lt;code>Usage&lt;/code> of an &lt;code>AnalysisCaseDefinition&lt;/code>.&lt;/p>&#xA;analysisAction = usage->select(&#xA;    isComposite and&#xA;    specializes('AnalysisCases::AnalysisAction'))&#xA;resultExpression =&#xA;    let results : OrderedSet(ResultExpressionMembership) =&#xA;        featureMembersip->&#xA;            selectByKind(ResultExpressionMembership) in&#xA;    if results->isEmpty() then null&#xA;    else results->first().ownedResultExpression&#xA;    endif&#xA;specializesFromLibrary('AnalysisCases::analysisCases')&#xA;isComposite and owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(AnalysisCaseDefinition) or&#xA;     owningType.oclIsKindOf(AnalysisCaseUsage)) implies&#xA;    specializesFromLibrary('AnalysisCases::AnalysisCase::subAnalysisCases')"/>
    <classes name="AnalysisCaseDefinition" label="AnalysisCaseDefinition" comment="&lt;p>An &lt;code>AnalysisCaseDefinition&lt;/code> is a &lt;code>CaseDefinition&lt;/code> for the case of carrying out an analysis.&lt;/p>&#xA;analysisAction = action->select(&#xA;    isComposite and &#xA;    specializes('AnalysisCases::AnalysisAction'))&#xA;resultExpression =&#xA;    let results : OrderedSet(ResultExpressionMembership) =&#xA;        featureMembersip->&#xA;            selectByKind(ResultExpressionMembership) in&#xA;    if results->isEmpty() then null&#xA;    else results->first().ownedResultExpression&#xA;    endif&#xA;specializesFromLibrary('AnalysisCases::AnalysisCase')"/>
    <classes name="VerificationCaseUsage" label="VerificationCaseUsage" comment="&lt;p>A &lt;code>VerificationCaseUsage&lt;/code> is a &lt;/code>Usage&lt;/code> of a &lt;code>VerificationCaseDefinition&lt;/code>.&lt;/p>&#xA;verifiedRequirement =&#xA;    if objectiveRequirement = null then OrderedSet{}&#xA;    else &#xA;        objectiveRequirement.featureMembership->&#xA;            selectByKind(RequirementVerificationMembership).&#xA;            verifiedRequirement->asOrderedSet()&#xA;    endif&#xA;specializesFromLibrary('VerificationCases::verificationCases')&#xA;isComposite and owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(VerificationCaseDefinition) or&#xA;     owningType.oclIsKindOf(VerificationCaseUsage)) implies &#xA;    specializesFromLibrary('VerificationCases::VerificationCase::subVerificationCases')"/>
    <classes name="VerificationCaseDefinition" label="VerificationCaseDefinition" comment="&lt;p>A &lt;code>VerificationCaseDefinition&lt;/code> is a &lt;code>CaseDefinition&lt;/code> for the purpose of verification of the subject of the case against its requirements.&lt;/p>&#xA;verifiedRequirement =&#xA;    if objectiveRequirement = null then OrderedSet{}&#xA;    else &#xA;        objectiveRequirement.featureMembership->&#xA;            selectByKind(RequirementVerificationMembership).&#xA;            verifiedRequirement->asOrderedSet()&#xA;    endif&#xA;specializesFromLibrary('VerificationCases::VerificationCase')"/>
    <classes name="UseCaseUsage" label="UseCaseUsage" comment="&lt;p>A &lt;code>UseCaseUsage&lt;/code> is a &lt;code>Usage&lt;/code> of a &lt;code>UseCaseDefinition&lt;/code>.&lt;/p>&#xA;includedUseCase = ownedUseCase->&#xA;    selectByKind(IncludeUseCaseUsage).&#xA;    useCaseIncluded&#xA;specializesFromLibrary('UseCases::useCases')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(UseCaseDefinition) or&#xA; owningType.oclIsKindOf(UseCaseUsage)) implies&#xA;    specializesFromLibrary('UseCases::UseCase::subUseCases')"/>
    <classes name="UseCaseDefinition" label="UseCaseDefinition" comment="&lt;p>A &lt;code>UseCaseDefinition&lt;/code> is a &lt;code>CaseDefinition&lt;/code> that specifies a set of actions performed by its subject, in interaction with one or more actors external to the subject. The objective is to yield an observable result that is of value to one or more of the actors.&lt;/p>&#xA;&#xA;includedUseCase = ownedUseCase->&#xA;    selectByKind(IncludeUseCaseUsage).&#xA;    useCaseIncluded&#xA;specializesFromLibrary('UseCases::UseCase')"/>
    <classes name="ViewUsage" label="ViewUsage" comment="&lt;p>A &lt;code>ViewUsage&lt;/code> is a usage of a &lt;code>ViewDefinition&lt;/code> to specify the generation of a view of the &lt;code>members&lt;/code> of a collection of &lt;code>exposedNamespaces&lt;/code>. The &lt;code>ViewUsage&lt;/code> can satisfy more &lt;code>viewpoints&lt;/code> than its definition, and it can specialize the &lt;code>viewRendering&lt;/code> specified by its definition.&lt;p>&#xA;exposedElement = ownedImport->selectByKind(Expose).&#xA;    importedMemberships(Set{}).memberElement->&#xA;    select(elm | includeAsExposed(elm))->&#xA;    asOrderedSet()&#xA;satisfiedViewpoint = ownedRequirement->&#xA;    selectByKind(ViewpointUsage)->&#xA;    select(isComposite)&#xA;viewCondition = ownedMembership->&#xA;    selectByKind(ElementFilterMembership).&#xA;    condition&#xA;viewRendering =&#xA;    let renderings: OrderedSet(ViewRenderingMembership) =&#xA;        featureMembership->selectByKind(ViewRenderingMembership) in&#xA;    if renderings->isEmpty() then null&#xA;    else renderings->first().referencedRendering&#xA;    endif&#xA;featureMembership->&#xA;    selectByKind(ViewRenderingMembership)->&#xA;    size() &lt;= 1&#xA;specializesFromLibrary('Views::views')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ViewDefinition) or&#xA; owningType.oclIsKindOf(ViewUsage)) implies&#xA;    specializesFromLibrary('Views::View::subviews')"/>
    <classes name="ViewDefinition" label="ViewDefinition" comment="&lt;p>A &lt;code>ViewDefinition&lt;/code> is a &lt;code>PartDefinition&lt;/code> that specifies how a view artifact is constructed to satisfy a &lt;code>viewpoint&lt;/code>. It specifies a &lt;code>viewConditions&lt;/code> to define the model content to be presented and a &lt;code>viewRendering&lt;/code> to define how the model content is presented.&lt;/p>&#xA;view = usage->selectByKind(ViewUsage)&#xA;satisfiedViewpoint = ownedRequirement->&#xA;    selectByKind(ViewpointUsage)->&#xA;    select(isComposite)&#xA;viewRendering =&#xA;    let renderings: OrderedSet(ViewRenderingMembership) =&#xA;        featureMembership->selectByKind(ViewRenderingMembership) in&#xA;    if renderings->isEmpty() then null&#xA;    else renderings->first().referencedRendering&#xA;    endif&#xA;viewCondition = ownedMembership->&#xA;    selectByKind(ElementFilterMembership).&#xA;    condition&#xA;featureMembership->&#xA;    selectByKind(ViewRenderingMembership)->&#xA;    size() &lt;= 1&#xA;specializesFromLibrary('Views::View')"/>
    <classes name="ViewpointUsage" label="ViewpointUsage" comment="&lt;p>A &lt;code>ViewpointUsage&lt;/code> is a &lt;code>Usage&lt;/code> of a &lt;code>ViewpointDefinition&lt;/code>.&lt;/p>&#xA;&#xA;&#xA;viewpointStakeholder = framedConcern.featureMemberhsip->&#xA;    selectByKind(StakeholderMembership).&#xA;    ownedStakeholderParameter&#xA;specializesFromLibrary('Views::viewpoints')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(ViewDefinition) or&#xA; owningType.oclIsKindOf(ViewUsage)) implies&#xA;    specializesFromLibrary('Views::View::viewpointSatisfactions')"/>
    <classes name="ViewpointDefinition" label="ViewpointDefinition" comment="&lt;p>A &lt;code>ViewpointDefinition&lt;/code> is a &lt;code>RequirementDefinition&lt;/code> that specifies one or more stakeholder concerns that are to be satisfied by creating a view of a model.&lt;/p>&#xA;viewpointStakeholder = framedConcern.featureMemberhsip->&#xA;    selectByKind(StakeholderMembership).&#xA;    ownedStakeholderParameter&#xA;specializesFromLibrary('Views::Viewpoint')"/>
    <classes name="RenderingUsage" label="RenderingUsage" comment="&lt;p>A &lt;code>RenderingUsage&lt;/code> is the usage of a &lt;code>RenderingDefinition&lt;/code> to specify the rendering of a specific model view to produce a physical view artifact.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary('Views::renderings')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(RenderingDefinition) or&#xA; owningType.oclIsKindOf(RenderingUsage)) implies&#xA;    specializesFromLibrary('Views::Rendering::subrenderings')&#xA;owningFeatureMembership &lt;> null and&#xA;owningFeatureMembership.oclIsKindOf(ViewRenderingMembership) implies&#xA;    redefinesFromLibrary('Views::View::viewRendering')"/>
    <classes name="RenderingDefinition" label="RenderingDefinition" comment="&lt;p>A &lt;code>RenderingDefinition&lt;/code> is a &lt;code>PartDefinition&lt;/code> that defines a specific rendering of the content of a model view (e.g., symbols, style, layout, etc.).&lt;/p>&#xA;rendering = usages->selectByKind(RenderingUsage)&#xA;specializesFromLibrary('Views::Rendering')"/>
    <classes name="MetadataUsage" label="MetadataUsage" comment="&lt;p>A  &lt;code>MetadataUsage&lt;/code> is a &lt;code>Usage&lt;/code> and a &lt;code>MetadataFeature&lt;/code>, used to annotate other &lt;code>Elements&lt;/code> in a system model with metadata. As a &lt;code>MetadataFeature&lt;/code>, its type must be a &lt;code>Metaclass&lt;/code>, which will nominally be a &lt;code>MetadataDefinition&lt;/code>. However, any kernel &lt;code>Metaclass&lt;/code> is also allowed, to permit use of &lt;code>Metaclasses&lt;/code> from the Kernel Model Libraries.&lt;/p>&#xA;specializesFromLibrary('Metadata::metadataItems')"/>
    <classes name="MetadataFeature" label="MetadataFeature" comment="&lt;p>A &lt;code>MetadataFeature&lt;/code> is a &lt;code>Feature&lt;/code> that is an &lt;code>AnnotatingElement&lt;/code> used to annotate another &lt;code>Element&lt;/code> with metadata. It is typed by a &lt;code>Metaclass&lt;/code>. All its &lt;code>ownedFeatures&lt;/code> must redefine &lt;code>features&lt;/code> of its &lt;code>metaclass&lt;/code> and any feature bindings must be model-level evaluable.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary('Metaobjects::metaobjects')&#xA;isSemantic() implies&#xA;    let annotatedTypes : Sequence(Type) = &#xA;        annotatedElement->selectAsKind(Type) in&#xA;    let baseTypes : Sequence(MetadataFeature) = &#xA;        evaluateFeature(resolveGlobal(&#xA;            'Metaobjects::SemanticMetadata::baseType').&#xA;            memberElement.&#xA;            oclAsType(Feature))->&#xA;        selectAsKind(MetadataFeature) in&#xA;    annotatedTypes->notEmpty() and &#xA;    baseTypes()->notEmpty() and &#xA;    baseTypes()->first().isSyntactic() implies&#xA;        let annotatedType : Type = annotatedTypes->first() in&#xA;        let baseType : Element = baseTypes->first().syntaxElement() in&#xA;        if annotatedType.oclIsKindOf(Classifier) and &#xA;            baseType.oclIsKindOf(Feature) then&#xA;            baseType.oclAsType(Feature).type->&#xA;                forAll(t | annotatedType.specializes(t))&#xA;        else if baseType.oclIsKindOf(Type) then&#xA;            annotatedType.specializes(baseType.oclAsType(Type))&#xA;        else&#xA;            true&#xA;        endif&#xA;not metaclass.isAbstract&#xA;let baseAnnotatedElementFeature : Feature =&#xA;    resolveGlobal('Metaobjects::Metaobject::annotatedElement').memberElement.&#xA;    oclAsType(Feature) in&#xA;let annotatedElementFeatures : OrderedSet(Feature) = feature->&#xA;    select(specializes(baseAnnotatedElementFeature))->&#xA;    excluding(baseAnnotatedElementFeature) in&#xA;annotatedElementFeatures->notEmpty() implies&#xA;    let annotatedElementTypes : Set(Feature) =&#xA;        annotatedElementFeatures.typing.type->asSet() in&#xA;    let metaclasses : Set(Metaclass) =&#xA;        annotatedElement.oclType().qualifiedName->collect(qn | &#xA;            resolveGlobal(qn).memberElement.oclAsType(Metaclass)) in&#xA;   metaclasses->forAll(m | annotatedElementTypes->exists(t | m.specializes(t)))&#xA;ownedFeature->closure(ownedFeature)->forAll(f |&#xA;    f.declaredName = null and f.declaredShortName = null and&#xA;    f.valuation &lt;> null implies f.valuation.value.isModelLevelEvaluable and&#xA;    f.redefinition.redefinedFeature->size() = 1)&#xA;metaclass = &#xA;    let metaclassTypes : Sequence(Type) = type->selectByKind(Metaclass) in&#xA;    if metaclassTypes->isEmpty() then null&#xA;    else metaClassTypes->first()&#xA;    endif&#xA;type->selectByKind(Metaclass).size() = 1"/>
    <classes name="Metaclass" label="Metaclass" comment="&lt;p>A &lt;code>Metaclass&lt;/code> is a &lt;code>Structure&lt;/code> used to type &lt;code>MetadataFeatures&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Metaobjects::Metaobject')"/>
    <classes name="LifeClass" label="LifeClass" comment="&lt;p>A &lt;code>LifeClass&lt;/code> is a &lt;code>Class&lt;/code> that specializes both the &lt;code>Class&lt;/code> &lt;code>&lt;em>Occurrences::Life&lt;/em>&lt;/code> from the Kernel Semantic Library and a single &lt;code>OccurrenceDefinition&lt;/code>, and has a multiplicity of 0..1. This constrains the &lt;code>OccurrenceDefinition&lt;/code> being specialized to have at most one instance that is a complete &lt;code>Life&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurrences::Life')&#xA;multiplicity &lt;> null and&#xA;multiplicity.specializesFromLibrary('Base::zeroOrOne')&#xA;specializes(individualDefinition)&#xA;isSufficient"/>
    <classes name="ConjugatedPortTyping" label="ConjugatedPortTyping" comment="&lt;p>A &lt;code>ConjugatedPortTyping&lt;/code> is a &lt;code>FeatureTyping&lt;/code> whose &lt;code>type&lt;/code> is a &lt;code>ConjugatedPortDefinition&lt;/code>. (This relationship is intended to be an abstract-syntax marker for a special surface notation for conjugated typing of ports.)&lt;/p>&#xA;portDefinition = conjugatedPortDefinition.originalPortDefinition"/>
    <classes name="SuccessionAsUsage" label="SuccessionAsUsage" comment="&lt;p>A &lt;code>SuccessionAsUsage&lt;/code> is both a &lt;code>ConnectorAsUsage&lt;/code> and a &lt;code>Succession&lt;/code>.&lt;p>"/>
    <classes name="SuccessionFlowConnectionUsage" label="SuccessionFlowConnectionUsage" comment="&lt;p>A &lt;code>SuccessionFlowConnectionUsage&lt;/code> is a &lt;code>FlowConnectionUsage&lt;/code> that is also a &lt;code>SuccessionItemFlow&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Connections::successionFlowConnections')"/>
    <classes name="SuccessionItemFlow" label="SuccessionItemFlow" comment="&lt;p>A &lt;code>SuccessionItemFlow&lt;/code> is an &lt;code>ItemFlow&lt;/code> that also provides temporal ordering. It classifies &lt;code>&lt;em>Transfers&lt;/em>&lt;/code> that cannot start until the source &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> has completed and that must complete before the target &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> can start.&lt;/p>&#xA;specializesFromLibrary('Transfers::flowTransfersBefore')"/>
    <classes name="BindingConnectorAsUsage" label="BindingConnectorAsUsage" comment="&lt;p>A &lt;code>BindingConnectorAsUsage&lt;/code> is both a &lt;code>BindingConnector&lt;/code> and a &lt;code>ConnectorAsUsage&lt;/code>.&lt;/p>"/>
    <classes name="BindingConnector" label="BindingConnector" comment="&lt;p>A &lt;code>BindingConnector&lt;/code> is a binary &lt;code>Connector&lt;/code> that requires its &lt;code>relatedFeatures&lt;/code> to identify the same things (have the same values).&lt;/p>&#xA;&#xA;specializesFromLibrary('Links::selfLinks')&#xA;relatedFeature->size() = 2"/>
    <classes name="FlowConnectionDefinition" label="FlowConnectionDefinition" comment="&lt;p>A &lt;code>FlowConnectionDefinition&lt;/code> is a &lt;code>ConnectionDefinition&lt;/code> and &lt;code>ActionDefinition&lt;/code> that is also an &lt;code>Interaction&lt;/code> representing flows between &lt;code>Usages&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Connections::MessageConnection')"/>
    <classes name="SubjectMembership" label="SubjectMembership" comment="&lt;p>A &lt;code>SubjectMembership&lt;/code> is a &lt;code>ParameterMembership&lt;/code> that indicates that its &lt;code>ownedSubjectParameter&lt;/code> is the subject of its &lt;code>owningType&lt;/code>. The &lt;code>owningType&lt;/code> of a &lt;code>SubjectMembership&lt;/code> must be a &lt;code>RequirementDefinition&lt;/code>, &lt;code>RequirementUsage&lt;/code>, &lt;code>CaseDefinition&lt;/code>, or &lt;code>CaseUsage&lt;/code>.&lt;/p>&#xA;owningType.oclIsType(RequirementDefinition) or&#xA;owningType.oclIsType(RequiremenCaseRequirementDefinition) or&#xA;owningType.oclIsType(CaseDefinition) or&#xA;owningType.oclIsType(CaseUsage)&#xA;"/>
    <classes name="ParameterMembership" label="ParameterMembership" comment="&lt;p>A &lt;code>ParameterMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that identifies its &lt;code>memberFeature&lt;/code> as a parameter, which is always owned, and must have a &lt;code>direction&lt;/code>. A &lt;code>ParameterMembership&lt;/code> must be owned by a &lt;code>Behavior&lt;/code> or a &lt;code>Step&lt;/code>.&lt;/p>&#xA;ownedMemberParameter.direction = parameterDirection()&#xA;owningType.oclIsKindOf(Behavior) or owningType.oclIsKindOf(Step)"/>
    <classes name="StakeholderMembership" label="StakeholderMembership" comment="&lt;p>A &lt;code>StakeholderMembership&lt;/code> is a &lt;code>ParameterMembership&lt;/code> that identifies a &lt;code>PartUsage&lt;/code> as a &lt;code>stakeholderParameter&lt;/code> of a &lt;code>RequirementDefinition&lt;/code> or &lt;code>RequirementUsage&lt;/code>, which specifies a role played by an entity with concerns framed by the &lt;code>owningType&lt;/code>.&lt;/p>&#xA;owningType.oclIsKindOf(RequirementUsage) or&#xA;owningType.oclIsKindOf(RequirementDefinition)"/>
    <classes name="RequirementConstraintMembership" label="RequirementConstraintMembership" comment="&lt;p>A &lt;code>RequirementConstraintMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> for an assumed or required &lt;code>ConstraintUsage&lt;/code> of a &lt;code>RequirementDefinition&lt;/code> or &lt;code>RequirementUsage&lt;code>.&lt;/p>&#xA;referencedConstraint =&#xA;    let reference : ReferenceSubsetting = &#xA;        ownedConstraint.ownedReferenceSubsetting in&#xA;    if reference = null then ownedConstraint&#xA;    else if not reference.referencedFeature.oclIsKindOf(ConstraintUsage) then null &#xA;    else reference.referencedFeature.oclAsType(ConstraintUsage)&#xA;    endif endif&#xA;owningType.oclIsKindOf(RequirementDefinition) or&#xA;owningType.oclIsKindOf(RequirementUsage)&#xA;ownedConstraint.isComposite"/>
    <classes name="ActorMembership" label="ActorMembership" comment="&lt;p>An &lt;code>ActorMembership&lt;/code> is a &lt;code>ParameterMembership&lt;/code> that identifies a &lt;code>PartUsage&lt;/code> as an &lt;em>actor&lt;/em> &lt;code>parameter&lt;/code>, which specifies a role played by an external entity in interaction with the &lt;code>owningType&lt;/code> of the &lt;code>ActorMembership&lt;/code>.&lt;/p>&#xA;owningType.oclIsKindOf(RequirementUsage) or&#xA;owningType.oclIsKindOf(RequirementDefinition) or&#xA;owningType.oclIsKindOf(CaseDefinition) or&#xA;owningType.oclIsKindOf(CaseUsage)&#xA;"/>
    <classes name="SatisfyRequirementUsage" label="SatisfyRequirementUsage" comment="&lt;p>A &lt;code>SatisfyRequirementUsage&lt;/code> is an &lt;code>AssertConstraintUsage&lt;/code> that asserts, by default, that a satisfied &lt;code>RequirementUsage&lt;/code> is true for a specific &lt;code>satisfyingFeature&lt;/code>, or, if &lt;code>isNegated = true&lt;/code>, that the &lt;code>RequirementUsage&lt;/code> is false. The satisfied &lt;code>RequirementUsage&lt;/code> is related to the &lt;code>SatisfyRequirementUsage&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;satisfyingFeature =&#xA;    let bindings: BindingConnector = ownedMember->&#xA;        selectByKind(BindingConnector)->&#xA;        select(b | b.relatedElement->includes(subjectParameter)) in&#xA;    if bindings->isEmpty() or &#xA;       bindings->first().relatedElement->exits(r | r &lt;> subjectParameter) &#xA;    then null&#xA;    else bindings->first().relatedElement->any(r | r &lt;> subjectParameter)&#xA;    endif&#xA;ownedMember->selectByKind(BindingConnector)->&#xA;    select(b |&#xA;        b.relatedElement->includes(subjectParameter) and&#xA;        b.relatedElement->exists(r | r &lt;> subjectParameter))->&#xA;    size() = 1&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(RequirementUsage)"/>
    <classes name="AssertConstraintUsage" label="AssertConstraintUsage" comment="&lt;p>An &lt;code>AssertConstraintUsage&lt;/code> is a &lt;code>ConstraintUsage&lt;/code> that is also an &lt;code>Invariant&lt;/code> and, so, is asserted to be true (by default). Unless it is the &lt;code>AssertConstraintUsage&lt;/code> itself, the asserted &lt;code>ConstraintUsage&lt;/code> is related to the &lt;code>AssertConstraintUsage&lt;/code> by a ReferenceSubsetting &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;assertedConstraint =&#xA;    if ownedReferenceSubsetting = null then self&#xA;    else ownedReferenceSubsetting.referencedFeature.oclAsType(ConstraintUsage)&#xA;    endif&#xA;if isNegated then&#xA;    specializesFromLibrary('Constraints::negatedConstraints')&#xA;else&#xA;    specializesFromLibrary('Constraints::assertedConstraints')&#xA;endif&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(ConstraintUsage)"/>
    <classes name="Invariant" label="Invariant" comment="&lt;p>An &lt;code>Invariant&lt;/code> is a &lt;code>BooleanExpression&lt;/code> that is asserted to have a specific &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> result value. If &lt;code>isNegated = false&lt;/code>, then the result is asserted to be true. If &lt;code>isNegated = true&lt;/code>, then the result is asserted to be false.&lt;/p>&#xA;&#xA;if isNegated then&#xA;    specializesFromLibrary('Performances::falseEvaluations')&#xA;else&#xA;    specializesFromLibrary('Performances::trueEvaluations')&#xA;endif"/>
    <classes name="FramedConcernMembership" label="FramedConcernMembership" comment="&lt;p>A &lt;code>FramedConcernMembership&lt;/code> is a &lt;code>RequirementConstraintMembership&lt;/code> for a framed &lt;code>ConcernUsage&lt;/code> of a &lt;code>RequirementDefinition&lt;/code> or &lt;code>RequirementUsage&lt;/code>.&lt;/p>&#xA;kind = RequirementConstraintKind::requirement"/>
    <classes name="ObjectiveMembership" label="ObjectiveMembership" comment="&lt;p>An &lt;code>ObjectiveMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that indicates that its &lt;code>ownedObjectiveRequirement&lt;/code> is the objective &lt;code>RequirementUsage&lt;/code> for its &lt;code>owningType&lt;/code>, which must be a &lt;code>CaseDefinition&lt;/code> or &lt;code>CaseUsage&lt;/code>.&lt;/p>&#xA;owningType.oclIsType(CaseDefinition) or&#xA;owningType.oclIsType(CaseUsage)&#xA;&#xA;ownedObjectiveRequirement.isComposite"/>
    <classes name="EventOccurrenceUsage" label="EventOccurrenceUsage" comment="&lt;p>An &lt;code>EventOccurrenceUsage&lt;/code> is an &lt;code>OccurrenceUsage&lt;/code> that represents another &lt;code>OccurrenceUsage&lt;/code> occurring as a &lt;code>&lt;em>suboccurrence&lt;/em>&lt;/code> of the containing occurrence of the &lt;code>EventOccurrenceUsage&lt;/code>. Unless it is the &lt;code>EventOccurrenceUsage&lt;/code> itself, the referenced &lt;code>OccurrenceUsage&lt;/code> is related to the &lt;code>EventOccurrenceUsage&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>EventOccurrenceUsage&lt;/code> is owned by an &lt;code>OccurrenceDefinition&lt;/code> or &lt;code>OccurrenceUsage&lt;/code>, then it also subsets the &lt;em>&lt;code>timeEnclosedOccurrences&lt;/code>&lt;/em> property of the &lt;code>Class&lt;/code> &lt;em>&lt;code>Occurrence&lt;/code>&lt;/em> from the Kernel Semantic Library model &lt;em>&lt;code>Occurrences&lt;/code>&lt;/em>.&lt;/p>&#xA;eventOccurrence =&#xA;    if ownedReferenceSubsetting = null then self&#xA;    else if ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage) then &#xA;        ownedReferenceSubsetting.referencedFeature.oclAsType(OccurrenceUsage)&#xA;    else null&#xA;    endif endif&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(OccurrenceDefinition) or&#xA; owningType.oclIsKindOf(OccurrenceUsage)) implies&#xA;    specializesFromLibrary('Occurrences::Occurrence::timeEnclosedOccurrences')&#xA;isReference"/>
    <classes name="IncludeUseCaseUsage" label="IncludeUseCaseUsage" comment="&lt;p>An &lt;code>IncludeUseCaseUsage&lt;/code> is a &lt;code>UseCaseUsage&lt;/code> that represents the inclusion of a &lt;code>UseCaseUsage&lt;/code> by a &lt;code>UseCaseDefinition&lt;/code> or &lt;code>UseCaseUsage&lt;/code>. Unless it is the &lt;code>IncludeUseCaseUsage&lt;/code> itself, the &lt;code>UseCaseUsage&lt;/code> to be included is related to the &lt;code>includedUseCase&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationship&lt;/code>. An &lt;code>IncludeUseCaseUsage&lt;/code> is also a PerformActionUsage, with its &lt;code>useCaseIncluded&lt;/code> as the &lt;code>performedAction&lt;/code>.&lt;/p>&#xA;&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(UseCaseDefinition) or&#xA; owningType.oclIsKindOf(UseCaseUsage) implies&#xA;    specializesFromLibrary('UseCases::UseCase::includedUseCases')&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(UseCaseUsage)"/>
    <classes name="PerformActionUsage" label="PerformActionUsage" comment="&lt;p>A &lt;code>PerformActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that represents the performance of an &lt;code>ActionUsage&lt;/code>. Unless it is the &lt;code>PerformActionUsage&lt;/code> itself, the &lt;code>ActionUsage&lt;/code> to be performed is related to the &lt;code>PerformActionUsage&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> relationship. A &lt;code>PerformActionUsage&lt;/code> is also an &lt;code>EventOccurrenceUsage&lt;/code>, with its &lt;code>performedAction&lt;/code> as the &lt;code>eventOccurrence&lt;/code>.&lt;/p>&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(ActionUsage)&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PartDefinition) or&#xA; owningType.oclIsKindOf(PartUsage)) implies&#xA;    specializesFromLibrary('Parts::Part::performedActions')"/>
    <classes name="MetadataDefinition" label="MetadataDefinition" comment="&lt;p>A &lt;code>MetadataDefinition&lt;/code> is an &lt;code>ItemDefinition&lt;/code> that is also a &lt;code>Metaclass&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Metadata::MetadataItem')"/>
    <classes name="StateSubactionMembership" label="StateSubactionMembership" comment="&lt;p>A &lt;code>StateSubactionMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> for an entry, do or exit &lt;code>ActionUsage&lt;code> of a &lt;code>StateDefinition&lt;/code> or &lt;code>StateUsage&lt;/code>.&lt;/p>&#xA;owningType.oclIsKindOf(StateDefinition) or&#xA;owningType.oclIsKindOf(StateUsage)"/>
    <classes name="StateDefinition" label="StateDefinition" comment="&lt;p>A &lt;code>StateDefinition&lt;/code> is the &lt;code>Definition&lt;/code> of the &lt;/code>Behavior&lt;/code> of a system or part of a system in a certain state condition.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>StateDefinition&lt;/code> may be related to up to three of its &lt;code>ownedFeatures&lt;/code> by &lt;code>StateBehaviorMembership&lt;/code> &lt;code>Relationships&lt;/code>, all of different &lt;code>kinds&lt;/code>, corresponding to the entry, do and exit actions of the &lt;code>StateDefinition&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('States::StateAction')&#xA;ownedMembership->&#xA;    selectByKind(StateSubactionMembership)->&#xA;    isUnique(kind)&#xA;state = action->selectByKind(StateUsage)&#xA;doAction =&#xA;    let doMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::do) in&#xA;    if doMemberships->isEmpty() then null&#xA;    else doMemberships->at(1)&#xA;    endif&#xA;entryAction =&#xA;    let entryMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::entry) in&#xA;    if entryMemberships->isEmpty() then null&#xA;    else entryMemberships->at(1)&#xA;    endif&#xA;isParallel implies&#xA;    ownedAction.incomingTransition->isEmpty() and&#xA;    ownedAction.outgoingTransition->isEmpty()&#xA;exitAction = &#xA;    let exitMemberships : Sequence(StateSubactionMembership) =&#xA;        ownedMembership->&#xA;            selectByKind(StateSubactionMembership)->&#xA;            select(kind = StateSubactionKind::exit) in&#xA;    if exitMemberships->isEmpty() then null&#xA;    else exitMemberships->at(1)&#xA;    endif"/>
    <classes name="TransitionFeatureMembership" label="TransitionFeatureMembership" comment="&lt;p>A &lt;code>TransitionFeatureMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> for a trigger, guard or effect of a &lt;code>TransitionUsage&lt;/code>, whose &lt;code>transitionFeature&lt;/code> is a &lt;code>AcceptActionUsage&lt;/code>, &lt;em>&lt;code>Boolean&lt;/code>&lt;/em>-valued &lt;code>Expression&lt;/code> or &lt;code>ActionUsage&lt;/code>, depending on its &lt;code>kind&lt;/code>. &lt;/p>&#xA;kind = TransitionFeatureKind::trigger implies&#xA;    transitionFeature.oclIsKindOf(AcceptActionUsage)&#xA;owningType.oclIsKindOf(TransitionUsage)&#xA;kind = TransitionFeatureKind::guard implies&#xA;    transitionFeature.oclIsKindOf(Expression) and&#xA;    let guard : Expression = transitionFeature.oclIsKindOf(Expression) in&#xA;    guard.result.specializesFromLibrary('ScalarValues::Boolean') and&#xA;    guard.result.multiplicity &lt;> null and&#xA;    guard.result.multiplicity.hasBounds(1,1)&#xA;kind = TransitionFeatureKind::effect implies&#xA;    transitionFeature.oclIsKindOf(ActionUsage)"/>
    <classes name="ExhibitStateUsage" label="ExhibitStateUsage" comment="&lt;p>An &lt;code>ExhibitStateUsage&lt;/code> is a &lt;code>StateUsage&lt;/code> that represents the exhibiting of a &lt;code>StateUsage&lt;/code>. Unless it is the &lt;code>StateUsage&lt;/code> itself, the &lt;code>StateUsage&lt;/code> to be exhibited is related to the &lt;code>ExhibitStateUsage&lt;/code> by a &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationship&lt;/code>. An &lt;code>ExhibitStateUsage&lt;/code> is also a &lt;code>PerformActionUsage&lt;/code>, with its &lt;code>exhibitedState&lt;/code> as the &lt;code>performedAction&lt;/code>.&lt;/p>&#xA;&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(PartDefinition) or&#xA; owningType.oclIsKindOf(PartUsage)) implies&#xA;    specializesFromLibrary('Parts::Part::exhibitedStates')&#xA;ownedReferenceSubsetting &lt;> null implies&#xA;    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(StateUsage)"/>
    <classes name="RequirementVerificationMembership" label="RequirementVerificationMembership" comment="&lt;p>A &lt;code>RequirementVerificationMembership&lt;/code> is a &lt;code>RequirementConstraintMembership &lt;/code> used in the objective of a &lt;code>VerificationCase&lt;/code> to identify a &lt;code>RequirementUsage&lt;/code> that is verified by the &lt;code>VerificationCase&lt;/code>.&lt;/p>&#xA;kind = RequirementConstraintKind::requirement&#xA;owningType.oclIsKindOf(RequirementUsage) and&#xA;owningType.owningFeatureMembership &lt;> null and&#xA;owningType.owningFeatureMembership.oclIsKindOf(ObjectiveMembership)"/>
    <classes name="SendActionUsage" label="SendActionUsage" comment="&lt;p>A &lt;code>SendActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies the sending of a payload given by the result of its &lt;code>payloadArgument&lt;/code> &lt;code>Expression&lt;/code> via a &lt;em>&lt;code>MessageTransfer&lt;/code>&lt;/em> whose &lt;em>&lt;code>source&lt;/code>&lt;/em> is given by the result of the &lt;code>senderArgument&lt;/code> &lt;code>Expression&lt;/code> and whose &lt;code>target&lt;/code> is given by the result of the &lt;code>receiverArgument&lt;/code> &lt;code>Expression&lt;/code>. If no &lt;code>senderArgument&lt;/code> is provided, the default is the &lt;em>&lt;code>this&lt;/code>&lt;/em> context for the action. If no &lt;code>receiverArgument&lt;/code> is given, then the receiver is to be determined by, e.g., outgoing &lt;em>&lt;code>Connections&lt;/code>&lt;/em> from the sender.&lt;/p> &#xA;&#xA;senderArgument = argument(2)&#xA;payloadArgument = argument(1)&#xA;inputParameters()->size() >= 3&#xA;receiverArgument = argument(3)&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::acceptSubactions')&#xA;specializesFromLibrary('Actions::sendActions')"/>
    <classes name="ForkNode" label="ForkNode" comment="&lt;p>A &lt;code>ForkNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that must be followed by successor &lt;code>Actions&lt;/code> as given by all its outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;targetConnector->selectByKind(Succession)->size() &lt;= 1&#xA;specializesFromLibrary('Actions::Action::forks')"/>
    <classes name="ControlNode" label="ControlNode" comment="&lt;p>A &lt;code>ControlNode&lt;/code> is an &lt;code>ActionUsage&lt;/code> that does not have any inherent behavior but provides constraints on incoming and outgoing &lt;code>Successions&lt;/code> that are used to control other &lt;code>Actions&lt;/code>. A &lt;code>ControlNode&lt;/code> must be a composite owned &lt;code>usage&lt;/code> of an &lt;code>ActionDefinition&lt;/code> or &lt;code>ActionUsage&lt;/code>.&lt;/p>&#xA;&#xA;sourceConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(1).multiplicity)->&#xA;    forAll(sourceMult | &#xA;        multiplicityHasBounds(sourceMult, 1, 1))&#xA;owningType &lt;> null and &#xA;(owningType.oclIsKindOf(ActionDefinition) or&#xA; owningType.oclIsKindOf(ActionUsage))&#xA;targetConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(2).multiplicity)->&#xA;    forAll(targetMult | &#xA;        multiplicityHasBounds(targetMult, 1, 1))&#xA;specializesFromLibrary('Action::Action::controls')"/>
    <classes name="ForLoopActionUsage" label="ForLoopActionUsage" comment="&lt;p>A &lt;code>ForLoopActionUsage&lt;/code> is a &lt;code>LoopActionUsage&lt;/code> that specifies that its &lt;code>bodyAction&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed once for each value, in order, from the sequence of values obtained as the result of the &lt;code>seqArgument&lt;/code> &lt;code>Expression&lt;/code>, with the &lt;code>loopVariable&lt;/code> set to the value for each iteration.&lt;/p>&#xA;seqArgument = argument(1)&#xA;&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::forLoops')&#xA;loopVariable &lt;> null and&#xA;loopVariable.redefinesFromLibrary('Actions::ForLoopAction::var')&#xA;specializesFromLibrary('Actions::forLoopActions')&#xA;loopVariable =&#xA;    if ownedFeature->isEmpty() or &#xA;        not ownedFeature->first().oclIsKindOf(ReferenceUsage) then &#xA;        null&#xA;    else &#xA;        ownedFeature->first().oclAsType(ReferenceUsage)&#xA;    endif&#xA;ownedFeature->notEmpty() and&#xA;ownedFeature->at(1).oclIsKindOf(ReferenceUsage)&#xA;&#xA;inputParameters()->size() = 2"/>
    <classes name="LoopActionUsage" label="LoopActionUsage" comment="&lt;p>A &lt;code>LoopActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies that its &lt;code>bodyAction&lt;/code> should be performed repeatedly. Its subclasses &lt;code>WhileLoopActionUsage&lt;/code> and &lt;code>ForLoopActionUsage&lt;/code> provide different ways to determine how many times the &lt;code>bodyAction&lt;/code> should be performed.&lt;/p>&#xA;bodyAction =&#xA;    let parameter : Feature = inputParameter(2) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Action) then&#xA;        parameter.oclAsType(Action)&#xA;    else&#xA;        null&#xA;    endif&#xA;"/>
    <classes name="DecisionNode" label="DecisionNode" comment="&lt;p>A &lt;code>DecisionNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that makes a selection from its outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;targetConnector->selectByKind(Succession)->size() &lt;= 1&#xA;sourceConnector->selectAsKind(Succession)->&#xA;    collect(connectorEnd->at(2))->&#xA;    forAll(targetMult |&#xA;        multiplicityHasBounds(targetMult, 0, 1))&#xA;specializesFromLibrary('Actions::Action::decisions')&#xA;sourceConnector->selectByKind(Succession)->&#xA;    forAll(subsetsChain(self, &#xA;        resolveGlobal('ControlPerformances::MergePerformance::outgoingHBLink')))"/>
    <classes name="MergeNode" label="MergeNode" comment="&lt;p>A &lt;code>MergeNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that asserts the merging of its incoming &lt;code>Successions&lt;/code>. A &lt;code>MergeNode&lt;/code> may have at most one outgoing &lt;code>Successions&lt;/code>.&lt;/p>&#xA;sourceConnector->selectAsKind(Succession)->size() &lt;= 1&#xA;targetConnector->selectByKind(Succession)->&#xA;    collect(connectorEnd->at(1))->&#xA;    forAll(sourceMult |&#xA;        multiplicityHasBounds(sourceMult, 0, 1))&#xA;targetConnector->selectByKind(Succession)->&#xA;    forAll(subsetsChain(self, &#xA;        resolveGlobal('ControlPerformances::MergePerformance::incomingHBLink')))&#xA;specializesFromLibrary('Actions::Action::merges')"/>
    <classes name="JoinNode" label="JoinNode" comment="&lt;p>A &lt;code>JoinNode&lt;/code> is a &lt;code>ControlNode&lt;/code> that waits for the completion of all the predecessor &lt;code>Actions&lt;/code> given by incoming &lt;code>Successions&lt;/code>.&lt;/p>&#xA;sourceConnector->selectByKind(Succession)->size() &lt;= 1&#xA;specializesFromLibrary('Actions::Action::join')"/>
    <classes name="IfActionUsage" label="IfActionUsage" comment="&lt;p>An &lt;code>IfActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that specifies that the &lt;code>thenAction&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed if the result of the &lt;code>ifArgument&lt;/code> &lt;code>Expression&lt;/code> is true. It may also optionally specify an &lt;code>elseAction&lt;/code> &lt;code>ActionUsage&lt;/code> that is performed if the result of the &lt;code>ifArgument&lt;/code> is false.&lt;/p>&#xA;thenAction = &#xA;    let parameter : Feature = inputParameter(2) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(ActionUsage) then&#xA;        parameter.oclAsType(ActionUsage)&#xA;    else&#xA;        null&#xA;    endif&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::ifSubactions')&#xA;if elseAction = null then&#xA;    specializesFromLibrary('Actions::ifThenActions')&#xA;else&#xA;    specializesFromLibrary('Actions::ifThenElseActions')&#xA;endif&#xA;ifArgument = &#xA;    let parameter : Feature = inputParameter(1) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;elseAction = &#xA;    let parameter : Feature = inputParameter(3) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(ActionUsage) then&#xA;        parameter.oclAsType(ActionUsage)&#xA;    else&#xA;        null&#xA;    endif&#xA;inputParameters()->size() >= 2"/>
    <classes name="TriggerInvocationExpression" label="TriggerInvocationExpression" comment="&lt;p>A &lt;code>TriggerInvocationExpression&lt;/code> is an &lt;code>InvocationExpression&lt;/code> that invokes one of the trigger &lt;code>Functions&lt;/code> from the Kernel Semantic Library &lt;code>&lt;em>Triggers&lt;em>&lt;/code> package, as indicated by its &lt;code>kind&lt;/code>.&lt;/p>&#xA;specializesFromLibrary(&#xA;    if kind = TriggerKind::when then&#xA;        'Triggers::TriggerWhen'&#xA;    else if kind = TriggerKind::at then&#xA;        'Triggers::TriggerAt'&#xA;    else &#xA;        'Triggers::TriggerAfter'&#xA;    endif endif&#xA;)&#xA;kind = TriggerKind::after implies&#xA;    argument->notEmpty() and&#xA;    argument->at(1).result.specializesFromLibrary('Quantities::ScalarQuantityValue') and&#xA;    let mRef : Element = &#xA;        resolveGlobal('Quantities::TensorQuantityValue::mRef').ownedMemberElement in&#xA;    argument->at(1).result.feature->&#xA;        select(ownedRedefinition.redefinedFeature->&#xA;           closure(ownedRedefinition.redefinedFeature)->&#xA;           includes(mRef))->&#xA;        exists(specializesFromLibrary('ISQBase::DurationUnit'))&#xA;kind = TriggerKind::at implies&#xA;    argument->notEmpty() and&#xA;    argument->at(1).result.specializesFromLibrary('Time::TimeInstantValue')&#xA;kind = TriggerKind::when implies&#xA;    argument->notEmpty() and&#xA;    argument->at(1).oclIsKindOf(FeatureReferenceExpression) and&#xA;    let referent : Feature = &#xA;        argument->at(1).oclAsType(FeatureReferenceExpression).referent in&#xA;    referent.oclIsKindOf(Expression) and&#xA;    referent.oclAsType(Expression).result.specializesFromLibrary('ScalarValues::Boolean')"/>
    <classes name="InvocationExpression" label="InvocationExpression" comment="&lt;p>An &lt;code>InvocationExpression&lt;/code> is an &lt;code>Expression&lt;/code> each of whose input &lt;code>parameters&lt;/code> are bound to the &lt;code>result&lt;/code> of an &lt;code>argument&lt;/code> Expression.&lt;/p>&#xA;&#xA;not ownedTyping->exists(oclIsKindOf(Behavior)) and&#xA;not ownedSubsetting.subsettedFeature.type->exists(oclIsKindOf(Behavior)) implies&#xA;    ownedFeature.selectByKind(BindingConnector)->exists(&#xA;        relatedFeature->includes(self) and&#xA;        relatedFeature->includes(result))&#xA;            &#xA;TBD&#xA;ownedFeature->&#xA;    select(direction = _'in').valuation->&#xA;    select(v | v &lt;> null).value&#xA;let features : Set(Feature) = type.feature->asSet() in&#xA;input->forAll(inp | &#xA;    inp.ownedRedefinition.redefinedFeature->&#xA;        intersection(features)->size() = 1)&#xA;let features : Set(Feature) = type.feature->asSet() in&#xA;input->forAll(inp1 | input->forAll(inp2 |&#xA;    inp1 &lt;> inp2 implies&#xA;        inp1.ownedRedefinition.redefinedFeature->&#xA;            intersection(inp2.ownedRedefinition.redefinedFeature)->&#xA;            intersection(features)->isEmpty()))"/>
    <classes name="AssignmentActionUsage" label="AssignmentActionUsage" comment="&lt;p>An &lt;code>AssignmentActionUsage&lt;/code> is an &lt;code>ActionUsage&lt;/code> that is defined, directly or indirectly, by the &lt;code>ActionDefinition&lt;/code> &lt;em>&lt;code>AssignmentAction&lt;/code>&lt;/em> from the Systems Model Library. It specifies that the value of the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>, relative to the target given by the result of the &lt;code>targetArgument&lt;/code> &lt;code>Expression&lt;/code>, should be set to the result of the &lt;code>valueExpression&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Actions::assignmentActions')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter.ownedFeature->first().&#xA;    redefines('AssignmentAction::target::startingAt')&#xA;valueExpression = argument(2)&#xA;targetArgument = argument(1)&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::assignments')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->first().&#xA;    redefines('AssigmentAction::target::startingAt::accessedFeature')&#xA;let targetParameter : Feature = inputParameter(1) in&#xA;targetParameter &lt;> null and&#xA;targetParameter.ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->notEmpty() and&#xA;targetParameter->first().ownedFeature->first().redefines(referent)&#xA;referent =&#xA;    let unownedFeatures : Sequence(Feature) = ownedMembership->&#xA;        reject(oclIsKindOf(FeatureMembership)).memberElement->&#xA;        selectByKind(Feature) in&#xA;    if unownedFeatures->isEmpty() then null&#xA;    else unownedFeatures->first().oclAsType(Feature)&#xA;    endif&#xA;ownedMembership->exists(&#xA;    not oclIsKindOf(OwningMembership) and &#xA;    memberElement.oclIsKindOf(Feature))"/>
    <classes name="WhileLoopActionUsage" label="WhileLoopActionUsage" comment="&lt;p>A &lt;code>WhileLoopActionUsage&lt;/code> is a &lt;code>LoopActionUsage&lt;/code> that specifies that the &lt;code>bodyAction&lt;/code> &lt;code>ActionUsage&lt;/code> should be performed repeatedly while the result of the &lt;code>whileArgument&lt;/code> &lt;code>Expression&lt;/code> is true or until the result of the &lt;code>untilArgument&lt;/code> &lt;code>Expression&lt;/code> (if provided) is true. The &lt;code>whileArgument&lt;/code> &lt;code>Expression&lt;/code> is evaluated before each (possible) performance of the &lt;code>bodyAction&lt;/code>, and the &lt;code>untilArgument&lt;/code> &lt;code>Expression&lt;/code> is evaluated after each performance of the &lt;code>bodyAction&lt;/code>.&lt;/p>&#xA;isSubactionUsage() implies&#xA;    specializesFromLibrary('Actions::Action::whileLoops')&#xA;untilArgument =&#xA;    let parameter : Feature = inputParameter(3) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;&#xA;specializesFromLibrary('Actions::whileLoopActions')&#xA;whileArgument =&#xA;    let parameter : Feature = inputParameter(1) in&#xA;    if parameter &lt;> null and parameter.oclIsKindOf(Expression) then&#xA;        parameter.oclAsType(Expression)&#xA;    else&#xA;        null&#xA;    endif&#xA;&#xA;inputParameters()->size() >= 2"/>
    <classes name="ViewRenderingMembership" label="ViewRenderingMembership" comment="&lt;p>A &lt;code>ViewRenderingMembership&lt;/code> is a &lt;coed>FeatureMembership&lt;/code> that identifies the &lt;code>viewRendering&lt;/code> of a &lt;code>ViewDefinition&lt;/code> or &lt;code>ViewUsage&lt;/code>.&lt;/p>&#xA;referencedRendering =&#xA;    let reference: ReferenceSubsetting = &#xA;        ownedRendering.ownedReferenceSubsetting in&#xA;    if reference = null then ownedRendering&#xA;    else if not reference.referencedFeature.oclIsKindOf(RenderingUsage) then null&#xA;    else reference.referencedFeature.oclAsType(RenderingUsage)&#xA;    endif&#xA;owningType.oclIsKindOf(ViewDefinition) or&#xA;owningType.oclIsKindOf(ViewUsage)"/>
    <classes name="MembershipExpose" label="MembershipExpose" comment="&lt;p>A &lt;code>MembershipExpose&lt;/code> is an &lt;code>Expose&lt;/code> &lt;code.Relationship&lt;/code> that exposes a specific &lt;code>importedMembership&lt;/code> and, if &lt;code>isRecursive = true&lt;/code>, additional &lt;code>Memberships&lt;/code> recursively.&lt;/p>"/>
    <classes name="MembershipImport" label="MembershipImport" comment="&lt;p>A &lt;code>MembershipImport&lt;/code> is an &lt;code>Import&lt;/code> that imports its &lt;code>importedMembership&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isRecursive = true&lt;/code> and the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code> is a &lt;code>Namespace&lt;/code>, then the equivalent of a recursive &lt;code>NamespaceImport&lt;/code> is also performed on that &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;importedElement = importedMembership.memberElement"/>
    <classes name="Expose" label="Expose" comment="&lt;p>An &lt;code>Expose&lt;/code> is an &lt;code>Import&lt;/code> of &lt;code>Memberships&lt;/code> into a &lt;code>ViewUsage&lt;/code> that provide the &lt;code>Elements&lt;/code> to be included in a view. Visibility is always ignored for an &lt;code>Expose&lt;/code> (i.e., &lt;code>isImportAll = true&lt;/code>).&lt;/p>&#xA;isImportAll&#xA;importOwningNamespace.oclIsType(ViewUsage)"/>
    <classes name="NamespaceExpose" label="NamespaceExpose" comment="&lt;p>A &lt;code>NamespaceExpose&lt;/code> is an &lt;code>Expose&lt;/code> &lt;code>Relationship&lt;/code> that exposes the &lt;code>Memberships&lt;/code> of a specific &lt;code>importedNamespace&lt;/code> and, if &lt;code>isRecursive = true&lt;/code>, additional &lt;code>Memberships&lt;/code> recursively.&lt;/p>"/>
    <classes name="NamespaceImport" label="NamespaceImport" comment="&lt;p>A &lt;code>NamespaceImport&lt;/code> is an Import that imports &lt;code>Memberships&lt;/code> from its &lt;code>importedNamespace&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code> isRecursive = false&lt;/code>, then only the visible &lt;code>Memberships&lt;/code> of the &lt;code>importedNamespace&lt;/code> are imported. If &lt;code> isRecursive = true&lt;/code>, then, in addition, &lt;code>Memberships&lt;/code> are recursively imported from any &lt;code>ownedMembers&lt;/code> of the &lt;code>importedNamespace&lt;/code> that are &lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;importedElement = importedNamespace"/>
    <classes name="EndFeatureMembership" label="EndFeatureMembership" comment="&lt;p>&lt;code>EndFeatureMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that requires its &lt;code>memberFeature&lt;/code> be owned and have &lt;code>isEnd = true&lt;/code>.&lt;/p>&#xA;&#xA;ownedMemberFeature.isEnd"/>
    <classes name="Dependency" label="Dependency" comment="&lt;p>A &lt;code>Dependency&lt;/code> is a &lt;code>Relationship&lt;/code> that indicates that one or more &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> require one more &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> for their complete specification. In general, this means that a change to one of the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> may necessitate a change to, or re-specification of, the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Note that a &lt;code>Dependency&lt;/code> is entirely a model-level &lt;code>Relationship&lt;/code>, without instance-level semantics.&lt;/p>"/>
    <classes name="MultiplicityRange" label="MultiplicityRange" comment="&lt;p>A &lt;code>MultiplicityRange&lt;/code> is a &lt;code>Multiplicity&lt;/code> whose value is defined to be the (inclusive) range of natural numbers given by the result of a &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code> and the result of an &lt;code>upperBound&lt;/code> &lt;code>Expression&lt;/code>. The result of these &lt;code>Expressions&lt;/code> shall be of type &lt;code>&lt;em>Natural&lt;/em>&lt;/code>. If the result of the &lt;code>upperBound&lt;/code> &lt;code>Expression&lt;/code> is the unbounded value &lt;code>*&lt;/code>, then the specified range includes all natural numbers greater than or equal to the &lt;code>lowerBound&lt;/code> value. If no &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code>, then the default is that the lower bound has the same value as the upper bound, except if the &lt;code>upperBound&lt;/code> evaluates to &lt;code>*&lt;/code>, in which case the default for the lower bound is 0.&lt;/p>&#xA;&#xA;bound->forAll(b | b.featuringType = self.featuringType)&#xA;bound->forAll(b |&#xA;    b.result.specializesFromLibrary('ScalarValues::Integer') and&#xA;    let value : UnlimitedNatural = valueOf(b) in&#xA;    value &lt;> null implies value >= 0&#xA;)&#xA;lowerBound =&#xA;    let ownedMembers : Sequence(Element) = &#xA;        ownedMembership->selectByKind(OwningMembership).ownedMember in&#xA;    if ownedMembers->size() &lt; 2 or &#xA;        not ownedMembers->first().oclIsKindOf(Expression) then null&#xA;    else ownedMembers->first().oclAsType(Expression)&#xA;    endif&#xA;upperBound =&#xA;    let ownedMembers : Sequence(Element) = &#xA;        ownedMembership->selectByKind(OwningMembership).ownedMember in&#xA;    if ownedMembers->isEmpty() or &#xA;       not ownedMembers->last().oclIsKindOf(Expression) &#xA;    then null&#xA;    else ownedMembers->last().oclAsType(Expression)&#xA;    endif "/>
    <classes name="FeatureValue" label="FeatureValue" comment="&lt;p>A &lt;code>FeatureValue&lt;/code> is a &lt;code>Membership&lt;/code> that identifies a particular member &lt;code>Expression&lt;/code> that provides the value of the &lt;code>Feature&lt;/code> that owns the &lt;code>FeatureValue&lt;/code>. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A &lt;code>Feature&lt;/code> can have at most one &lt;code>FeatureValue&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The result of the &lt;code>value&lt;/code> &lt;code>Expression&lt;/code> is bound to the &lt;code>featureWithValue&lt;/code> using a &lt;code>BindingConnector&lt;/code>. If &lt;code>isInitial = false&lt;/code>, then the &lt;code>featuringType&lt;/code> of the &lt;code>BindingConnector&lt;/code> is the same as the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>. If &lt;code>isInitial = true&lt;/code>, then the &lt;code>featuringType&lt;/code> of the &lt;code>BindingConnector&lt;/code> is restricted to its &lt;code>startShot&lt;/code>.&#xA;&#xA;&lt;p>If &lt;code>isDefault = false&lt;/code>, then the above semantics of the &lt;code>FeatureValue&lt;/code> are realized for the given &lt;code>featureWithValue&lt;/code>. Otherwise, the semantics are realized for any individual of the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>, unless another value is explicitly given for the &lt;code>featureWithValue&lt;/code> for that individual.&lt;/p>&#xA;&#xA;not isDefault implies&#xA;    featureWithValue.ownedMember->&#xA;        selectByKind(BindingConnector)->exists(b |&#xA;            b.relatedFeature->includes(featureWithValue) and&#xA;            b.relatedFeature->includes(value.result) and&#xA;            if not isInitial then &#xA;                b.featuringType = featureWithValue.featuringType&#xA;            else &#xA;                b.featuringType->exists(t |&#xA;                    t.oclIsKindOf(Feature) and&#xA;                    t.oclAsType(Feature).chainingFeature =&#xA;                        Sequence{&#xA;                            resolveGlobal('Base::things::that').&#xA;                                memberElement,&#xA;                            resolveGlobal('Occurrences::Occurrence::startShot').&#xA;                                memberElement&#xA;                        }&#xA;                )&#xA;            endif)&#xA;featureWithValue.redefinition.redefinedFeature->&#xA;    closure(redefinition.redefinedFeature).valuation->&#xA;    forAll(isDefault)"/>
    <classes name="ReturnParameterMembership" label="ReturnParameterMembership" comment="&lt;p>A &lt;code>ReturnParameterMembership&lt;/code> is a &lt;code>ParameterMembership&lt;/code> that indicates that the &lt;code>ownedMemberParameter&lt;/code> is the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of a &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code>. The &lt;code>direction&lt;/code> of the &lt;code>ownedMemberParameter&lt;/code> must be &lt;code>out&lt;/code>.&lt;/p>&#xA;&#xA;owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)"/>
    <classes name="ResultExpressionMembership" label="ResultExpressionMembership" comment="&lt;p>A &lt;code>ResultExpressionMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that indicates that the &lt;code>ownedResultExpression&lt;/code> provides the result values for the &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code> that owns it. The owning &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code> must contain a &lt;code>BindingConnector&lt;/code> between the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>ownedResultExpression&lt;/code> and the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the owning &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code>.&lt;/p>&#xA;&#xA;owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)"/>
    <classes name="SelectExpression" label="SelectExpression" comment="&lt;p>A &lt;code>SelectExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose operator is &lt;code>&quot;select&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::select&lt;/code>&lt;/em> from the Kernel Functions Library.&lt;/p>&#xA;operator = 'select'"/>
    <classes name="OperatorExpression" label="OperatorExpression" comment="&lt;p>An &lt;code>OperatorExpression&lt;/code> is an &lt;code>InvocationExpression&lt;/code> whose &lt;code>function&lt;/code> is determined by resolving its &lt;code>operator&lt;/code> in the context of one of the standard packages from the Kernel Function Library.&lt;/p>&#xA;let libFunctions : Sequence(Element) = &#xA;    Sequence{'BaseFunctions', 'DataFunctions', 'ControlFunctions'}->&#xA;    collect(ns | resolveGlobal(ns + &quot;::'&quot; + operator + &quot;'&quot;).&#xA;    memberElement) in&#xA;libFunctions->includes(function)&#xA;    &#xA;"/>
    <classes name="FeatureReferenceExpression" label="FeatureReferenceExpression" comment="&lt;p>A &lt;code>FeatureReferenceExpression&lt;/code> is an &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is bound to a &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>.&lt;/p>&#xA;referent =&#xA;    let nonParameterMemberships : Sequence(Membership) = ownedMembership->&#xA;        reject(oclIsKindOf(ParameterMembership)) in&#xA;    if nonParameterMemberships->isEmpty() or&#xA;       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)&#xA;    then null&#xA;    else nonParameterMemberships->first().memberElement.oclAsType(Feature)&#xA;    endif&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(targetFeature) and&#xA;    b.relatedFeatures->includes(result))&#xA;let membership : Membership = &#xA;    ownedMembership->reject(m | m.oclIsKindOf(ParameterMembership)) in&#xA;membership->notEmpty() and&#xA;membership->at(1).memberElement.oclIsKindOf(Feature)"/>
    <classes name="LiteralInfinity" label="LiteralInfinity" comment="&lt;p>A &lt;code>LiteralInfinity&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides the positive infinity value (&lt;code>*&lt;/code>). It's &lt;code>result&lt;/code> must have the type &lt;code>&lt;em>Positive&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalIntegerEvaluations')"/>
    <classes name="LiteralExpression" label="LiteralExpression" comment="&lt;p>A &lt;code>LiteralExpression&lt;/code> is an &lt;code>Expression&lt;/code> that provides a basic &lt;code>&lt;em>DataValue&lt;/em>&lt;/code> as a result.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = true&#xA;specializesFromLibrary('Performances::literalEvaluations')"/>
    <classes name="LiteralString" label="LiteralString" comment="&lt;p>A &lt;code>LiteralString&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>String&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>String&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalStringEvaluations')"/>
    <classes name="LiteralInteger" label="LiteralInteger" comment="&lt;p>A &lt;code>LiteralInteger&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides an &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>Integer&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalIntegerEvaluations')"/>
    <classes name="NullExpression" label="NullExpression" comment="&lt;p>A &lt;code>NullExpression&lt;/code> is an &lt;code>Expression&lt;/code> that results in a null value.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::nullEvaluations')"/>
    <classes name="FeatureChainExpression" label="FeatureChainExpression" comment="&lt;p>A &lt;code>FeatureChainExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose operator is &lt;code>&quot;.&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em> from the Kernel Functions Library. It evaluates to the result of chaining the &lt;code>result&lt;/code> &lt;code>Feature&lt;/code> of its single &lt;code>argument&lt;/code> &lt;code>Expression&lt;/code> with its &lt;code>targetFeature&lt;/code>.&lt;/p>&#xA;let sourceParameter : Feature = sourceTargetFeature() in&#xA;sourceTargetFeature &lt;> null and&#xA;sourceTargetFeature.redefinesFromLibrary('ControlFunctions::'.'::source::target')&#xA;let sourceParameter : Feature = sourceTargetFeature() in&#xA;sourceTargetFeature &lt;> null and&#xA;sourceTargetFeature.redefines(targetFeature)&#xA;targetFeature =&#xA;    let nonParameterMemberships : Sequence(Membership) = ownedMembership->&#xA;        reject(oclIsKindOf(ParameterMembership)) in&#xA;    if nonParameterMemberships->isEmpty() or&#xA;       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)&#xA;    then null&#xA;    else nonParameterMemberships->first().memberElement.oclAsType(Feature)&#xA;    endif&#xA;argument->notEmpty() implies&#xA;    targetFeature.featuringType->forAll(t | &#xA;        t.specializes(argument->at(1).result))"/>
    <classes name="LiteralRational" label="LiteralRational" comment="&lt;p>A &lt;code>LiteralRational&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>Rational&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>Rational&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalRationalEvaluations')"/>
    <classes name="MetadataAccessExpression" label="MetadataAccessExpression" comment="&lt;p>A &lt;code>MetadataAccessExpression&lt;/code> is an &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is a sequence of instances of &lt;code>Metaclasses&lt;/code> representing all the &lt;code>MetadataFeature&lt;/code> annotations of the &lt;code>referencedElement&lt;/code>. In addition, the sequence includes an instance of the reflective &lt;code>Metaclass&lt;/code> corresponding to the MOF class of the &lt;code>referencedElement&lt;/code>, with values for all the abstract syntax properties of the &lt;code>referencedElement&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Performances::metadataAccessEvaluations')"/>
    <classes name="LiteralBoolean" label="LiteralBoolean" comment="&lt;p>&lt;code>LiteralBoolean&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalBooleanEvaluations')"/>
    <classes name="CollectExpression" label="CollectExpression" comment="&lt;p>A &lt;code>CollectExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose &lt;code>operator&lt;/code> is &lt;code>&quot;collect&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::collect&lt;/code>&lt;/em> from the Kernel Functions Library.&lt;/p>&#xA;operator = &quot;collect&quot;"/>
    <classes name="LibraryPackage" label="LibraryPackage" comment="&lt;p>A &lt;code>LibraryPackage&lt;/code> is a &lt;code>Package&lt;/code> that is the container for a model library. A &lt;code>LibraryPackage&lt;/code> is itself a library &lt;code>Element&lt;/code> as are all &lt;code>Elements&lt;/code> that are directly or indirectly contained in it.&lt;/p>&#xA;"/>
    <classes name="Package" label="Package" comment="&lt;p>A &lt;code>Package&lt;/code> is a &lt;code>Namespace&lt;/code> used to group &lt;code>Elements&lt;/code>, without any instance-level semantics. It may have one or more model-level evaluable &lt;code>filterCondition&lt;/code> &lt;code>Expressions&lt;/code> used to filter its &lt;code>importedMemberships&lt;/code>. Any imported &lt;code>member&lt;/code> must meet all of the &lt;code>filterConditions&lt;/code>.&lt;/p>&#xA;filterCondition = ownedMembership->&#xA;    selectByKind(ElementFilterMembership).condition"/>
    <classes name="ElementFilterMembership" label="ElementFilterMembership" comment="&lt;p>&lt;code>ElementFilterMembership&lt;/code> is a &lt;code>Membership&lt;/code> between a &lt;code>Namespace&lt;/code> and a model-level evaluable &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>-valued &lt;code>Expression&lt;/code>, asserting that imported &lt;code>members&lt;/code> of the &lt;code>Namespace&lt;/code> should be filtered using the &lt;code>condition&lt;/code> &lt;code>Expression&lt;/code>. A general &lt;code>Namespace&lt;/code> does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of &lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;condition.isModelLevelEvaluable&#xA;condition.result.specializesFromLibrary('ScalarValues::Boolean')"/>
    <properties name="namespaceImportImportedNamespace" label="namespaceImportImportedNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> whose visible &lt;code>Memberships&lt;/code> are imported by this &lt;code>NamespaceImport&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="attributeUsageAttributeDefinition" label="attributeUsageAttributeDefinition" comment="&lt;p>The &lt;code>DataTypes&lt;/code> that are the types of this &lt;code>AttributeUsage&lt;/code>. Nominally, these are &lt;code>AttributeDefinitions&lt;/code>, but other kinds of kernel &lt;code>DataTypes&lt;/code> are also allowed, to permit use of &lt;code>DataTypes&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="referenceSubsettingReferencedFeature" label="referenceSubsettingReferencedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is referenced by the &lt;code>referencingFeature&lt;/code> of this &lt;code>ReferenceSubsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="referenceSubsettingReferencingFeature" label="referenceSubsettingReferencingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that owns this &lt;code>ReferenceSubsetting&lt;/code> relationship, which is also its &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="assertConstraintUsageAssertedConstraint" label="assertConstraintUsageAssertedConstraint" comment="&lt;p>The &lt;code>ConstraintUsage&lt;/code> to be performed by the &lt;code>AssertConstraintUsage&lt;/code>. It is the &lt;code>referenceFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the &lt;code>AssertConstraintUsage&lt;/code>, if there is one, and, otherwise, the &lt;code>AssertConstraintUsage&lt;/code> itself.&lt;/p>"/>
    <properties name="operatorExpressionOperator" label="operatorExpressionOperator" comment="&lt;p>An &lt;code>operator&lt;/code> symbol that names a corresponding &lt;code>Function&lt;/code> from one of the standard packages from the Kernel Function Library .&lt;/p>"/>
    <properties name="verificationCaseDefinitionVerifiedRequirement" label="verificationCaseDefinitionVerifiedRequirement" comment="&lt;p>The &lt;code>RequirementUsages&lt;/code> verified by this &lt;code>VerificationCaseDefinition&lt;/code>, which are the &lt;code>verifiedRequirements&lt;/code> of all &lt;code>RequirementVerificationMemberships&lt;/code> of the &lt;code>objectiveRequirement&lt;/code>.&lt;/p>"/>
    <properties name="associationRelatedType" label="associationRelatedType" comment="&lt;p>The &lt;code>types&lt;/code> of the &lt;code>associationEnds&lt;/code> of the &lt;code>Association&lt;/code>, which are the &lt;code>relatedElements&lt;/code> of the &lt;code>Association&lt;/code> considered as a &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="associationSourceType" label="associationSourceType" comment="&lt;p>The source &lt;code>relatedType&lt;/code> for this &lt;code>Association&lt;/code>. It is the first &lt;code>relatedType&lt;/code> of the &lt;code>Association&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="associationTargetType" label="associationTargetType" comment="&lt;p>The target &lt;code>relatedTypes&lt;/code> for this &lt;code>Association&lt;/code>. This includes all the &lt;code>relatedTypes&lt;/code> other than the &lt;code>sourceType&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="associationAssociationEnd" label="associationAssociationEnd" comment="&lt;p>The &lt;code>features&lt;/code> of the &lt;code>Association&lt;/code> that identify the things that can be related by it. A concrete &lt;code>Association&lt;/code> must have at least two &lt;code>associationEnds&lt;/code>. When it has exactly two, the &lt;code>Association&lt;/code> is called a &lt;em>binary&lt;/em> &lt;code>Association&lt;/code>.&lt;/p> &#xA;&#xA;&lt;p>The ends of the Association determine which elements are eligible to be related by instances of the Association.&lt;/p>&#xA;"/>
    <properties name="featureTypingTypedFeature" label="featureTypingTypedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that has a &lt;code>type&lt;/code> determined by this &lt;code>FeatureTyping&lt;/code>.&lt;/p>"/>
    <properties name="featureTypingType" label="featureTypingType" comment="&lt;p>The &lt;code>Type&lt;/code> that is being applied by this &lt;code>FeatureTyping&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureTypingOwningFeature" label="featureTypingOwningFeature" comment="&lt;p>A &lt;code>typedFeature&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>FeatureTyping&lt;/code>.&lt;/p>"/>
    <properties name="triggerInvocationExpressionKind" label="triggerInvocationExpressionKind" comment="&lt;p>Indicates which of the &lt;code>Functions&lt;/code> from the &lt;code>&lt;em>Triggers&lt;/em>&lt;/code> model in the Kernel Semantic Library is to be invoked by this &lt;code>TriggerInvocationExpression&lt;/code>.&lt;/p>"/>
    <properties name="featureValueIsInitial" label="featureValueIsInitial" comment="&lt;p>Whether this &lt;code>FeatureValue&lt;/code> specifies a bound value or an initial value for the &lt;code>featureWithValue&lt;/code>.&lt;/p>"/>
    <properties name="featureValueIsDefault" label="featureValueIsDefault" comment="&lt;p>Whether this &lt;code>FeatureValue&lt;/code> is a concrete specification of the bound or initial value of the &lt;code>featureWithValue&lt;/code>, or just a default value that may be overridden.&lt;/p>"/>
    <properties name="featureValueFeatureWithValue" label="featureValueFeatureWithValue" comment="&lt;p>The &lt;code>Feature&lt;/code> to be provided a value.&lt;/p>&#xA;&#xA;&lt;p>The Feature to be provided a value.&lt;/p>"/>
    <properties name="featureValueValue" label="featureValueValue" comment="&lt;p>The &lt;code>Expression&lt;/code> that provides the value of the &lt;code>featureWithValue&lt;/code> as its &lt;code>result&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Expression that provides the value as a result.&lt;/p>"/>
    <properties name="allocationUsageAllocationDefinition" label="allocationUsageAllocationDefinition" comment="&lt;p>The &lt;code>AllocationDefinitions&lt;/code> that are the types of this &lt;code>AllocationUsage&lt;/code>.&lt;/p>"/>
    <properties name="viewRenderingMembershipOwnedRendering" label="viewRenderingMembershipOwnedRendering" comment="&lt;p>The owned &lt;code>RenderingUsage&lt;/code> that is either itself the &lt;code>referencedRendering&lt;/code> or subsets the &lt;code>referencedRendering&lt;/code>."/>
    <properties name="viewRenderingMembershipReferencedRendering" label="viewRenderingMembershipReferencedRendering" comment="&lt;p> The &lt;code>RenderingUsage&lt;/code> that is referenced through this &lt;code>ViewRenderingMembership&lt;/code>. It is the &lt;code>referencedFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the &lt;code>ownedRendering&lt;/code>, if there is one, and, otherwise, the &lt;code>ownedRendering&lt;/code> itself.&lt;/p>"/>
    <properties name="intersectingIntersectingType" label="intersectingIntersectingType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeIntersected&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="intersectingTypeIntersected" label="intersectingTypeIntersected" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>intersectingType&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="exhibitStateUsageExhibitedState" label="exhibitStateUsageExhibitedState" comment="&lt;p>The &lt;code>StateUsage&lt;/code> to be exhibited by the &lt;code>ExhibitStateUsage&lt;/code>. It is the &lt;code>performedAction&lt;/code> of the &lt;code>ExhibitStateUsage&lt;/code> considered as a &lt;code>PerformActionUsage&lt;/code>, which must be a &lt;code>StateUsage&lt;/code>.&lt;/p>"/>
    <properties name="connectionUsageConnectionDefinition" label="connectionUsageConnectionDefinition" comment="&lt;p>The &lt;code>AssociationStructures&lt;/code> that are the types of this &lt;code>ConnectionUsage&lt;/code>. Nominally, these are , but other kinds of Kernel &lt;code>AssociationStructures&lt;/code> are also allowed, to permit use of &lt;code>AssociationStructures&lt;/code> from the Kernel Model Libraries&lt;/p>"/>
    <properties name="metadataFeatureMetaclass" label="metadataFeatureMetaclass" comment="&lt;p>The &lt;code>type&lt;/code> of this &lt;code>MetadataFeature&lt;/code>, which must be a &lt;code>Metaclass&lt;/code>.&lt;/p>"/>
    <properties name="verificationCaseUsageVerificationCaseDefinition" label="verificationCaseUsageVerificationCaseDefinition" comment="&lt;p>The &lt;code>VerificationCase&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>VerificationCaseUsage&lt;/code>.&lt;/p>"/>
    <properties name="verificationCaseUsageVerifiedRequirement" label="verificationCaseUsageVerifiedRequirement" comment="&lt;p>The &lt;code>RequirementUsages&lt;/code> verified by this &lt;code>VerificationCaseUsage&lt;/code>, which are the &lt;code>verifiedRequirements&lt;/code> of all &lt;code>RequirementVerificationMemberships&lt;/code> of the &lt;code>objectiveRequirement&lt;/code>.&lt;/p>"/>
    <properties name="stakeholderMembershipOwnedStakeholderParameter" label="stakeholderMembershipOwnedStakeholderParameter" comment="&lt;p>The &lt;code>PartUsage&lt;/code> specifying the stakeholder.&lt;/p>"/>
    <properties name="metadataUsageMetadataDefinition" label="metadataUsageMetadataDefinition" comment="&lt;p>The &lt;code>MetadataDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>MetadataUsage&lt;/code>.&lt;/p>"/>
    <properties name="subsettingSubsettedFeature" label="subsettingSubsettedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is subsetted by the &lt;code>subsettingFeature&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subsettingSubsettingFeature" label="subsettingSubsettingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is a subset of the &lt;code>subsettedFeature&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subsettingOwningFeature" label="subsettingOwningFeature" comment="&lt;p>A &lt;code>subsettingFeature&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="transitionUsageSource" label="transitionUsageSource" comment="&lt;p>The source &lt;code>ActionUsage&lt;/code> of this &lt;code>TransitionUsage&lt;/code>, which becomes the &lt;code>source&lt;/code> of the &lt;code>succession&lt;/code> for the &lt;code>TransitionUsage&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageTarget" label="transitionUsageTarget" comment="&lt;p>The target &lt;code>ActionUsage&lt;/code> of this &lt;code>TransitionUsage&lt;code>, which is the &lt;code>targetFeature&lt;/code> of the &lt;code>succession&lt;/code> for the &lt;code>TransitionUsage&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageTriggerAction" label="transitionUsageTriggerAction" comment="&lt;p>The &lt;code>AcceptActionUsages&lt;/code> that define the triggers of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = trigger&lt;/code>, which must all be &lt;code>AcceptActionUsages&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageGuardExpression" label="transitionUsageGuardExpression" comment="&lt;p>The &lt;code>Expressions&lt;/code> that define the guards of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = guard&lt;/code>, which must all be &lt;code>Expressions&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageEffectAction" label="transitionUsageEffectAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that define the effects of this &lt;code>TransitionUsage&lt;/code>, which are the &lt;code>ownedFeatures&lt;/code> of the &lt;code>TransitionUsage&lt;/code> related to it by &lt;code>TransitionFeatureMemberships&lt;/code> with &lt;code>kind = effect&lt;/code>, which must all be &lt;code>ActionUsages&lt;/code>.&lt;/p>"/>
    <properties name="transitionUsageSuccession" label="transitionUsageSuccession" comment="&lt;p>The &lt;code>Succession&lt;/code> that is the &lt;code>ownedFeature&lt;/code> of this &lt;code>TransitionUsage&lt;/code>, which, if the &lt;code>TransitionUsage&lt;/code> is triggered, asserts the temporal ordering of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code>.&lt;/p>"/>
    <properties name="useCaseDefinitionIncludedUseCase" label="useCaseDefinitionIncludedUseCase" comment="&lt;p>The &lt;code>UseCaseUsages&lt;/code> that are included by this &lt;code>UseCaseDefinition&lt;/code>, which are the &lt;code>useCaseIncludeds&lt;/code> of the &lt;code>IncludeUseCaseUsages&lt;/code> owned by this &lt;code>UseCaseDefinition&lt;code>.&lt;/p>"/>
    <properties name="allocationDefinitionAllocation" label="allocationDefinitionAllocation" comment="&lt;p>The &lt;code>AllocationUsages&lt;/code> that refine the allocation mapping defined by this &lt;code>AllocationDefinition&lt;/code>.&lt;/p>"/>
    <properties name="framedConcernMembershipOwnedConcern" label="framedConcernMembershipOwnedConcern" comment="&lt;p>The &lt;code>ConcernUsage&lt;/code> that is the &lt;code>ownedConstraint&lt;/code> of this &lt;code>FramedConcernMembership&lt;/code>.&lt;/p>"/>
    <properties name="framedConcernMembershipReferencedConcern" label="framedConcernMembershipReferencedConcern" comment="&lt;p> The &lt;code>ConcernUsage&lt;/code> that is referenced through this &lt;code>FramedConcernMembership&lt;/code>. It is the &lt;code>referencedConstraint&lt;/code> of the &lt;code>FramedConcernMembership&lt;/code> considered as a &lt;code>RequirementConstraintMembership&lt;/code>, which must be a &lt;code>ConcernUsage&lt;/code>.&lt;/p>"/>
    <properties name="resultExpressionMembershipOwnedResultExpression" label="resultExpressionMembershipOwnedResultExpression" comment="&lt;p>The &lt;code>Expression&lt;/code> that provides the result for the owner of the &lt;code>ResultExpressionMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipImportImportedMembership" label="membershipImportImportedMembership" comment="&lt;p>The &lt;code>Membership&lt;/code> to be imported.&lt;/p>&#xA;"/>
    <properties name="featuringType" label="featuringType" comment="&lt;p>The &lt;code>Type&lt;code> that features the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featuringFeature" label="featuringFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is featured by the &lt;code>featuringType&lt;/code>.&lt;/p>"/>
    <properties name="connectorRelatedFeature" label="connectorRelatedFeature" comment="&lt;p>The &lt;code>Features&lt;/code> that are related by this &lt;code>Connector&lt;/code> considered as a &lt;code>Relationship&lt;/code> and that restrict the links it identifies, given by the referenced &lt;code>Features&lt;/code> of the &lt;code>connectorEnds&lt;/code> of the &lt;code>Connector&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorAssociation" label="connectorAssociation" comment="&lt;p>The &lt;code>Associations&lt;/code> that type the &lt;code>Connector&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorConnectorEnd" label="connectorConnectorEnd" comment="&lt;p>The &lt;code>endFeatures&lt;/code> of a &lt;code>Connector&lt;/code>, which redefine the &lt;code>endFeatures&lt;/code> of the &lt;code>associations&lt;/code> of the &lt;code>Connector&lt;/code>. The &lt;code>connectorEnds&lt;/code> determine via &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationships&lt;/code> which &lt;code>Features&lt;/code> are related by the &lt;code>Connector&lt;/code>.&lt;/p>"/>
    <properties name="connectorSourceFeature" label="connectorSourceFeature" comment="&lt;p>The source &lt;code>relatedFeature&lt;/code> for this &lt;code>Connector&lt;/code>. It is the first &lt;code>relatedFeature&lt;/code>.&lt;/p>"/>
    <properties name="connectorTargetFeature" label="connectorTargetFeature" comment="&lt;p>The target &lt;code>relatedFeatures&lt;/code> for this &lt;code>Connector&lt;/code>. This includes all the &lt;code>relatedFeatures&lt;/code> other than the &lt;code>sourceFeature&lt;/code>.&lt;/p>"/>
    <properties name="ifActionUsageElseAction" label="ifActionUsageElseAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is to be performed if the result of the &lt;code>ifArgument&lt;/code> is false. It is the (optional) third &lt;code>parameter&lt;/code> of the &lt;code>IfActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="ifActionUsageThenAction" label="ifActionUsageThenAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is to be performed if the result of the &lt;code>ifArgument&lt;/code> is true. It is the second &lt;code>parameter&lt;code> of the &lt;code>IfActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="ifActionUsageIfArgument" label="ifActionUsageIfArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result determines whether the &lt;code>thenAction&lt;/code> or (optionally) the &lt;code>elseAction&lt;/code> is performed. It is the first &lt;code>parameter&lt;code> of the &lt;code>IfActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="renderingUsageRenderingDefinition" label="renderingUsageRenderingDefinition" comment="&lt;p>The &lt;code>RenderingDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>RenderingUsage&lt;/code>.&lt;/p>"/>
    <properties name="commentLocale" label="commentLocale" comment="&lt;p>Identification of the language of the &lt;code>body&lt;/code> text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format &lt;code>[language[_territory][.codeset][@modifier]]&lt;/code>.&lt;/p>"/>
    <properties name="commentBody" label="commentBody" comment="&lt;p>The annotation text for the &lt;code>Comment&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="calculationUsageCalculationDefinition" label="calculationUsageCalculationDefinition" comment="&lt;p>The &lt;ode>Function&lt;/code> that is the &lt;code>type&lt;/code> of this &lt;code>CalculationUsage&lt;/code>. Nominally, this would be a &lt;code>CalculationDefinition&lt;/code>, but a kernel &lt;code>Function&lt;/code> is also allowed, to permit use of &lt;code>Functions&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="functionIsModelLevelEvaluable" label="functionIsModelLevelEvaluable" comment="&lt;p>Whether this &lt;code>Function&lt;/code> can be used as the &lt;code>function&lt;/code> of a model-level evaluable &lt;code>InvocationExpression&lt;/code>. Certain &lt;code>Functions&lt;/code> from the Kernel Functions Library are considered to have &lt;code>isModelLevelEvaluable = true&lt;/code>. For all other &lt;code>Functions&lt;/code> it is &lt;code>false&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;strong>Note:&lt;/strong> See the specification of the KerML concrete syntax notation for &lt;code>Expressions&lt;/code> for an identification of which library &lt;code>Functions&lt;/code> are model-level evaluable.&lt;/p>"/>
    <properties name="functionExpression" label="functionExpression" comment="&lt;p>The &lt;code>Expressions&lt;/code> that are &lt;code>steps&lt;/code> in the calculation of the &lt;code>result&lt;/code> of this &lt;code>Function&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The set of expressions that represent computational steps or parts of a system of equations within the Function.&lt;/p>&#xA;"/>
    <properties name="functionResult" label="functionResult" comment="&lt;p>The &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>Function&lt;/code>, which is owned by the &lt;code>Function&lt;/code> via a &lt;code>ReturnParameterMembership&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The object or value that is the result of evaluating the Function.&lt;/p>"/>
    <properties name="booleanExpressionPredicate" label="booleanExpressionPredicate" comment="&lt;p>The &lt;code>Predicate&lt;/code> that types this &lt;code>BooleanExpression&lt;/code>.&lt;/p>&#xA;&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;"/>
    <properties name="stepBehavior" label="stepBehavior" comment="&lt;p>The &lt;code>Behaviors&lt;/code> that type this &lt;code>Step&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="stepParameter" label="stepParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>Step&lt;/code>, which are defined as its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the &lt;code>Step&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwnedMemberFeature" label="featureMembershipOwnedMemberFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that this &lt;code>FeatureMembership&lt;/code> relates to its &lt;code>owningType&lt;/code>, making it an &lt;code>ownedFeature&lt;/code> of the &lt;code>owningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwningType" label="featureMembershipOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that owns this &lt;code>FeatureMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureInvertingFeatureInverted" label="featureInvertingFeatureInverted" comment="&lt;p>The &lt;code>Feature&lt;/code> that is an inverse of the &lt;code>invertingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingInvertingFeature" label="featureInvertingInvertingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is an inverse of the &lt;code>invertedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingOwningFeature" label="featureInvertingOwningFeature" comment="&lt;p>A &lt;code>featureInverted&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>FeatureInverting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="actionDefinitionAction" label="actionDefinitionAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that are &lt;code>steps&lt;/code> in this &lt;code>ActionDefinition&lt;/code>, which define the actions that specify the behavior of the &lt;code>ActionDefinition&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="expressionIsModelLevelEvaluable" label="expressionIsModelLevelEvaluable" comment="&lt;p>Whether this &lt;code>Expression&lt;/code> meets the constraints necessary to be evaluated at &lt;em>model level&lt;/em>, that is, using metadata within the model.&lt;/p>"/>
    <properties name="expressionFunction" label="expressionFunction" comment="&lt;p>The &lt;code>Function&lt;/code> that types this &lt;code>Expression&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>This is the Function that types the Expression.&lt;/p>&#xA;"/>
    <properties name="expressionResult" label="expressionResult" comment="&lt;p>&lt;p>An &lt;code>output&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>Expression&lt;/code> whose value is the result of the &lt;code>Expression&lt;/code>. The result of an &lt;code>Expression&lt;/code> is either inherited from its &lt;code>function&lt;/code> or it is related to the &lt;code>Expression&lt;/code> via a &lt;code>ReturnParameterMembership&lt;/code>, in which case it redefines the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of its &lt;code>function&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="relationshipIsImplied" label="relationshipIsImplied" comment="&lt;p>Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.&lt;/p>"/>
    <properties name="relationshipRelatedElement" label="relationshipRelatedElement" comment="&lt;p>The Elements that are related by this Relationship, derived as the union of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code> Elements of the Relationship.&lt;/p>"/>
    <properties name="relationshipTarget" label="relationshipTarget" comment="&lt;p>The &lt;code>relatedElements&lt;/code> to which this Relationship is considered to be directed.&lt;/p>&#xA;"/>
    <properties name="relationshipSource" label="relationshipSource" comment="&lt;p>The &lt;code>relatedElements&lt;/c ode> from which this Relationship is considered to be directed.&lt;/p>"/>
    <properties name="relationshipOwningRelatedElement" label="relationshipOwningRelatedElement" comment="&lt;p>The &lt;tt>relatedElement&lt;/tt> of this Relationship that owns the Relationship, if any.&lt;/p>"/>
    <properties name="relationshipOwnedRelatedElement" label="relationshipOwnedRelatedElement" comment="&lt;p>The &lt;tt>relatedElements&lt;/tt> of this Relationship that are owned by the Relationship.&lt;/p>"/>
    <properties name="portUsagePortDefinition" label="portUsagePortDefinition" comment="&lt;p>The &lt;code>occurrenceDefinitions&lt;/code> of this &lt;code>PortUsage&lt;/code>, which must all be &lt;code>PortDefinitions&lt;code>.&lt;/p>"/>
    <properties name="itemUsageItemDefinition" label="itemUsageItemDefinition" comment="&lt;p>The Structures that are the &lt;code>definitions&lt;/code> of this ItemUsage. Nominally, these are ItemDefinitions, but other kinds of Kernel Structures are also allowed, to permit use of Structures from the Kernel Library.&lt;/p>"/>
    <properties name="connectionDefinitionConnectionEnd" label="connectionDefinitionConnectionEnd" comment="&lt;p>The &lt;code>Usages&lt;/code> that define the things related by the &lt;code>ConnectionDefinition&lt;/code>.&lt;/p>"/>
    <properties name="enumerationUsageEnumerationDefinition" label="enumerationUsageEnumerationDefinition" comment="&lt;p>The single EnumerationDefinition that is the type of this EnumerationUsage.&lt;/p>"/>
    <properties name="caseUsageObjectiveRequirement" label="caseUsageObjectiveRequirement" comment="&lt;p>The &lt;code>RequirementUsage&lt;/code> representing the objective of this &lt;code>CaseUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="caseUsageCaseDefinition" label="caseUsageCaseDefinition" comment="&lt;p>The CaseDefinition that is the type of this CaseUsage.&lt;/p>"/>
    <properties name="caseUsageSubjectParameter" label="caseUsageSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this &lt;code>CaseUsage&lt;/code> that represents its subject.&lt;/p>&#xA;"/>
    <properties name="caseUsageActorParameter" label="caseUsageActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>CaseUsage&lt;/code> that represent actors involved in the case.&lt;/p>"/>
    <properties name="renderingDefinitionRendering" label="renderingDefinitionRendering" comment="&lt;p>The &lt;code>usages&lt;/code> of a &lt;code>RenderingDefinition&lt;/code> that are &lt;code>RenderingUsages&lt;/code>.&lt;/p>"/>
    <properties name="whileLoopActionUsageWhileArgument" label="whileLoopActionUsageWhileArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result, if true, determines that the &lt;code>bodyAction&lt;/code> should continue to be performed. It is the first owned &lt;code>parameter&lt;/code> of the &lt;code>WhileLoopActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="whileLoopActionUsageUntilArgument" label="whileLoopActionUsageUntilArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result, if false, determines that the &lt;code>bodyAction&lt;/code> should continue to be performed. It is the (optional) third owned &lt;code>parameter&lt;/code> of the &lt;code>WhileLoopActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="unioningUnioningType" label="unioningUnioningType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeUnioned&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="unioningTypeUnioned" label="unioningTypeUnioned" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>unioningType&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="occurrenceDefinitionIsIndividual" label="occurrenceDefinitionIsIndividual" comment="&lt;p>Whether this OccurrenceDefinition is constrained to represent single individual.&lt;/p>"/>
    <properties name="occurrenceDefinitionLifeClass" label="occurrenceDefinitionLifeClass" comment="&lt;p>If &lt;code>isIndividual&lt;/code> is true, a &lt;code>LifeClass&lt;/code> that specializes this &lt;code>OccurrenceDefinition&lt;/code>, restricting it to represent an individual.&lt;/p>"/>
    <properties name="assignmentActionUsageTargetArgument" label="assignmentActionUsageTargetArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose value is an occurrence in the domain of the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>, for which the value of the &lt;code>referent&lt;/code> will be set to the result of the &lt;code>valueExpression&lt;/code> by this &lt;code>AssignmentActionUsage&lt;/code>.&lt;/p>"/>
    <properties name="assignmentActionUsageValueExpression" label="assignmentActionUsageValueExpression" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result is to be assigned to the &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="assignmentActionUsageReferent" label="assignmentActionUsageReferent" comment="&lt;p>The &lt;code>Feature&lt;/code> whose value is to be set.&lt;/p>"/>
    <properties name="flowConnectionUsageFlowConnectionDefinition" label="flowConnectionUsageFlowConnectionDefinition" comment="&lt;p>The &lt;code>Interactions&lt;/code> that are the &lt;code>types&lt;/code> of this &lt;code>FlowConnectionUsage&lt;/code>. Nominally, these are &lt;code>FlowConnectionDefinitions&lt;/code>, but other kinds of Kernel &lt;code>Interactions&lt;/code> are also allowed, to permit use of Interactions from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="namespaceOwnedMembership" label="namespaceOwnedMembership" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Namespace&lt;/code> that are &lt;code>Memberships&lt;/code>, for which the &lt;code>Namespace&lt;/code> is the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMember" label="namespaceOwnedMember" comment="&lt;p>The owned &lt;code>members&lt;/code> of this &lt;code>Namespace&lt;/code>, which are the &lt;cpde>&lt;code>ownedMemberElements&lt;/code> of the &lt;code>ownedMemberships&lt;/code> of the .&lt;/cpde>&lt;/p>&#xA;"/>
    <properties name="namespaceMembership" label="namespaceMembership" comment="&lt;p>All &lt;code>Memberships&lt;/code> in this &lt;code>Namespace&lt;/code>, including (at least) the union of &lt;code>ownedMemberships&lt;/code> and &lt;code>importedMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedImport" label="namespaceOwnedImport" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Namespace&lt;/code> that are &lt;code>Imports&lt;/code>, for which the &lt;code>Namespace&lt;/code> is the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceMember" label="namespaceMember" comment="&lt;p>The set of all member &lt;code>Elements&lt;/code> of this &lt;code>Namespace&lt;/code>, which are the &lt;code>memberElements&lt;/code> of all &lt;code>memberships&lt;/code> of the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceImportedMembership" label="namespaceImportedMembership" comment="&lt;p>The &lt;code>Memberships&lt;/code> in this &lt;code>Namespace&lt;/code> that result from the &lt;code>ownedImports&lt;/code> of this &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="performActionUsagePerformedAction" label="performActionUsagePerformedAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> to be performed by this &lt;code>PerformedActionUsage&lt;/code>. It is the &lt;code>eventOccurrence&lt;/code> of the &lt;code>PerformActionUsage&lt;/code> considered as an &lt;code>EventOccurrenceUsage&lt;/code>, which must be an &lt;code>ActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="parameterMembershipOwnedMemberParameter" label="parameterMembershipOwnedMemberParameter" comment="&lt;p>The &lt;code>Feature&lt;/code> that is identified as a &lt;code>parameter&lt;/code> by this &lt;code>ParameterMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementFilterMembershipCondition" label="elementFilterMembershipCondition" comment="&lt;p>The model-level evaluable &lt;code>Boolean&lt;/code>-valued &lt;code>Expression&lt;/code> used to filter the imported &lt;code>members&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> of this &lt;code>ElementFilterMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="definitionIsVariation" label="definitionIsVariation" comment="&lt;p>Whether this &lt;code>Definition&lt;/code> is for a variation point or not. If true, then all the &lt;code>memberships&lt;/code> of the &lt;code>Definition&lt;/code> must be &lt;code>VariantMemberships&lt;/code>.&lt;/p>"/>
    <properties name="definitionVariant" label="definitionVariant" comment="&lt;p>The &lt;code>Usages&lt;/code> which represent the variants of this &lt;code>Definition&lt;/code> as a variation point &lt;code>Definition&lt;/code>, if &lt;code>isVariation&lt;/code> = true. If &lt;code>isVariation = false&lt;/code>, the there must be no &lt;code>variants&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedUsage" label="definitionOwnedUsage" comment="&lt;p>The &lt;code>Usages&lt;/code> that are &lt;code>ownedFeatures&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionVariantMembership" label="definitionVariantMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this &lt;code>Definition&lt;/code> that are &lt;code>VariantMemberships&lt;/code>. If &lt;code>isVariation&lt;/code> = true, then this must be all &lt;code>ownedMemberships&lt;/code> of the &lt;code>Definition&lt;/code>. If &lt;code>isVariation&lt;/code> = false, then &lt;code>variantMembership&lt;/code>must be empty.&lt;/p>"/>
    <properties name="definitionUsage" label="definitionUsage" comment="&lt;p>The &lt;code>Usages&lt;/code> that are &lt;code>features&lt;/code> of this &lt;code>Definition&lt;/code> (not necessarily owned).&lt;/p>"/>
    <properties name="definitionDirectedUsage" label="definitionDirectedUsage" comment="&lt;p>The &lt;code>usages&lt;/code> of this &lt;code>Definition&lt;/code> that are &lt;code>directedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="definitionOwnedReference" label="definitionOwnedReference" comment="&lt;p>The &lt;code>ReferenceUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedAttribute" label="definitionOwnedAttribute" comment="&lt;p>The &lt;code>AttributeUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;p>"/>
    <properties name="definitionOwnedEnumeration" label="definitionOwnedEnumeration" comment="&lt;p>The &lt;code>EnumerationUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;p>"/>
    <properties name="definitionOwnedOccurrence" label="definitionOwnedOccurrence" comment="&lt;p>The &lt;code>OccurrenceUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedItem" label="definitionOwnedItem" comment="&lt;p>The &lt;code>ItemUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedPart" label="definitionOwnedPart" comment="&lt;p>The &lt;code>PartUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedPort" label="definitionOwnedPort" comment="&lt;p>The &lt;code>PortUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedConnection" label="definitionOwnedConnection" comment="&lt;p>The &lt;code>ConnectorAsUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>. Note that this list includes &lt;code>BindingConnectorAsUsages&lt;/code> and &lt;code>SuccessionAsUsages&lt;/code>, even though these are &lt;code>ConnectorAsUsages&lt;/code> but not &lt;code>ConnectionUsages&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedFlow" label="definitionOwnedFlow" comment="&lt;p>The &lt;code>FlowConnectionUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedInterface" label="definitionOwnedInterface" comment="&lt;p>The &lt;code>InterfaceUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedAllocation" label="definitionOwnedAllocation" comment="&lt;p>The &lt;code>AllocationUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedAction" label="definitionOwnedAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedState" label="definitionOwnedState" comment="&lt;p>The &lt;code>StateUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedTransition" label="definitionOwnedTransition" comment="&lt;p>The &lt;code>TransitionUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedCalculation" label="definitionOwnedCalculation" comment="&lt;p>The &lt;code>CalculationUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedConstraint" label="definitionOwnedConstraint" comment="&lt;p>The &lt;code>ConstraintUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="definitionOwnedRequirement" label="definitionOwnedRequirement" comment="&lt;p>The &lt;code>RequirementUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedConcern" label="definitionOwnedConcern" comment="&lt;p>The &lt;code>ConcernUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedCase" label="definitionOwnedCase" comment="&lt;p>The code>CaseUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedAnalysisCase" label="definitionOwnedAnalysisCase" comment="&lt;p>The &lt;code>AnalysisCaseUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedVerificationCase" label="definitionOwnedVerificationCase" comment="&lt;p>The &lt;code>VerificationCaseUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedUseCase" label="definitionOwnedUseCase" comment="&lt;p>The &lt;code>UseCaseUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedView" label="definitionOwnedView" comment="&lt;p>The &lt;code>ViewUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedViewpoint" label="definitionOwnedViewpoint" comment="&lt;p>The &lt;code>ViewpointUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedRendering" label="definitionOwnedRendering" comment="&lt;p>The &lt;code>RenderingUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="definitionOwnedMetadata" label="definitionOwnedMetadata" comment="&lt;p>The &lt;code>MetadataUsages&lt;/code> that are &lt;code>ownedUsages&lt;/code> of this &lt;code>Definition&lt;/code>.&lt;/p>"/>
    <properties name="differencingDifferencingType" label="differencingDifferencingType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeDifferenced&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="differencingTypeDifferenced" label="differencingTypeDifferenced" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>differencingType&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElementId" label="owningMembershipOwnedMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberShortName" label="owningMembershipOwnedMemberShortName" comment="&lt;p>The &lt;code>shortName&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberName" label="owningMembershipOwnedMemberName" comment="&lt;p>The &lt;code>name&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElement" label="owningMembershipOwnedMemberElement" comment="&lt;p>The &lt;code>Element&lt;/code> that becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this &lt;code>OwningMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subjectMembershipOwnedSubjectParameter" label="subjectMembershipOwnedSubjectParameter" comment="&lt;p>The &lt;code>Usage&lt;/code&lt; that is the &lt;code>ownedMemberParameter&lt;/code> of this &lt;code>SubjectMembership&lt;/code>.&lt;/p>"/>
    <properties name="interfaceDefinitionInterfaceEnd" label="interfaceDefinitionInterfaceEnd" comment="&lt;p>The &lt;code>PortUsages&lt;/code> that are the &lt;code>connectionEnds&lt;/code> of this &lt;code>InterfaceDefinition&lt;/code>.&#xA;&#xA;"/>
    <properties name="disjoiningTypeDisjoined" label="disjoiningTypeDisjoined" comment="&lt;p>&lt;code>Type&lt;/code> asserted to be disjoint with the &lt;code>disjoiningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="disjoiningDisjoiningType" label="disjoiningDisjoiningType" comment="&lt;p>&lt;code>Type&lt;/code> asserted to be disjoint with the &lt;code>typeDisjoined&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="disjoiningOwningType" label="disjoiningOwningType" comment="&lt;p>A &lt;code>typeDisjoined&lt;/code> that is also an &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="occurrenceUsageIsIndividual" label="occurrenceUsageIsIndividual" comment="&lt;p>Whether this &lt;code>OccurrenceUsage&lt;/code> represents the usage of the specific individual (or portion of it) represented by its &lt;code>individualDefinition&lt;/code>.&lt;/p>"/>
    <properties name="occurrenceUsagePortionKind" label="occurrenceUsagePortionKind" comment="&lt;p>The kind of (temporal) portion of the life of the &lt;code>occurrenceDefinition&lt;/code> represented by this &lt;code>OccurrenceUsage&lt;/code>, if it is so restricted.&lt;/p>"/>
    <properties name="occurrenceUsageOccurrenceDefinition" label="occurrenceUsageOccurrenceDefinition" comment="&lt;p>The &lt;code>Classes&lt;/code> that are the types of this &lt;code>OccurrenceUsage&lt;/code>. Nominally, these are &lt;code>OccurrenceDefinitions&lt;/code>, but other kinds of kernel &lt;code>Classes&lt;/code> are also allowed, to permit use of &lt;code>Classes&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="occurrenceUsageIndividualDefinition" label="occurrenceUsageIndividualDefinition" comment="&lt;p>The at most one &lt;code>occurrenceDefinition&lt;/code> that has &lt;code>isIndividual = true&lt;/code>.&lt;/p>"/>
    <properties name="analysisCaseDefinitionAnalysisAction" label="analysisCaseDefinitionAnalysisAction" comment="&lt;p>The composite &lt;code>actions&lt;/code> of the &lt;code>AnalysisCaseDefinition&lt;/code> that are defined as &lt;code>AnalysisActions&lt;/code>.&lt;/p>"/>
    <properties name="analysisCaseDefinitionResultExpression" label="analysisCaseDefinitionResultExpression" comment="&lt;p>An &lt;code>Expression&lt;/code> used to compute the &lt;code>result&lt;/code> of the &lt;code>AnalysisCaseDefinition&lt;/code>, owned via a &lt;code>ResultExpressionMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="requirementUsageReqId" label="requirementUsageReqId" comment="&lt;p>An optional modeler-specified identifier for this &lt;code>RequirementUsage&lt;/code> (used, e.g., to link it to an original requirement text in some source document), which is the &lt;code>declaredShortName&lt;/code> for the &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageText" label="requirementUsageText" comment="&lt;p>An optional textual statement of the requirement represented by this &lt;code>RequirementUsage&lt;/code>, derived from the &lt;code>bodies&lt;code> of the &lt;code>documentation&lt;/code> of the &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageRequirementDefinition" label="requirementUsageRequirementDefinition" comment="&lt;p>The &lt;code>RequirementDefinition&lt;/code> that is the single &lt;code>definition&lt;/code> of this &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageRequiredConstraint" label="requirementUsageRequiredConstraint" comment="&lt;p>The owned &lt;code>ConstraintUsages&lt;/code> that represent requirements of this &lt;code>RequirementUsage&lt;/code>, which are the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the &lt;code>RequirementUsage&lt;/code> with &lt;code>kind&lt;/code> = &lt;code>requirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageAssumedConstraint" label="requirementUsageAssumedConstraint" comment="&lt;p>The owned &lt;code>ConstraintUsages&lt;/code> that represent assumptions of this &lt;code>RequirementUsage&lt;/code>, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the &lt;code>RequirementUsage&lt;/code> with &lt;code>kind&lt;/code> = &lt;code>assumption&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageSubjectParameter" label="requirementUsageSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this &lt;code>RequirementUsage&lt;/code> that represents its subject.&lt;/p>"/>
    <properties name="requirementUsageFramedConcern" label="requirementUsageFramedConcern" comment="&lt;p>The &lt;code>ConcernUsages&lt;/code> framed by this &lt;code>RequirementUsage&lt;/code>, which are the &lt;code>ownedConcerns&lt;/code> of all &lt;code>FramedConcernMemberships&lt;/code> of the &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementUsageActorParameter" label="requirementUsageActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>RequirementUsage&lt;/code> that represent actors involved in the requirement.&lt;/p>"/>
    <properties name="requirementUsageStakeholderParameter" label="requirementUsageStakeholderParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>RequirementUsage&lt;/code> that represent stakeholders for the requirement.&lt;/p>"/>
    <properties name="useCaseUsageUseCaseDefinition" label="useCaseUsageUseCaseDefinition" comment="&lt;p>The &lt;code>UseCaseDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>UseCaseUsage&lt;/code>.&lt;/p>"/>
    <properties name="useCaseUsageIncludedUseCase" label="useCaseUsageIncludedUseCase" comment="&lt;p>The &lt;code>UseCaseUsages&lt;/code> that are included by this &lt;code>UseCaseUse&lt;/code>, which are the &lt;code>useCaseIncludeds&lt;/code> of the &lt;code>IncludeUseCaseUsages&lt;/code> owned by this &lt;code>UseCaseUsage&lt;code>.&lt;/p>"/>
    <properties name="viewpointDefinitionViewpointStakeholder" label="viewpointDefinitionViewpointStakeholder" comment="&lt;p>The &lt;code>PartUsages&lt;/code> that identify the stakeholders with concerns framed by this &lt;code>ViewpointDefinition&lt;/code>, which are the owned and inherited &lt;code>stakeholderParameters&lt;/code> of the &lt;code>framedConcerns&lt;/code> of this &lt;code>ViewpointDefinition&lt;/code>.&lt;/p>"/>
    <properties name="libraryPackageIsStandard" label="libraryPackageIsStandard" comment="&lt;p>Whether this &lt;code>LibraryPackage&lt;/code> contains a standard library model. This should only be set to true for &lt;code>LibraryPackages&lt;/code> in the standard Kernel Model Libraries or in normative model libraries for a language built on KerML.&lt;/p>"/>
    <properties name="portConjugationOriginalPortDefinition" label="portConjugationOriginalPortDefinition" comment="&lt;p>The &lt;code>PortDefinition&lt;/code> being conjugated.&lt;/p>"/>
    <properties name="portConjugationConjugatedPortDefinition" label="portConjugationConjugatedPortDefinition" comment="&lt;p>The &lt;code>ConjugatedPortDefinition&lt;/code> that is conjugate to the &lt;code>originalPortDefinition&lt;/code>.&lt;/p>"/>
    <properties name="constraintUsageConstraintDefinition" label="constraintUsageConstraintDefinition" comment="&lt;p>The (single) &lt;code>Predicate&lt;/code> that is the type of this &lt;code>ConstraintUsage&lt;/code>. Nominally, this will be a &lt;code>ConstraintDefinition&lt;/code>, but other kinds of &lt;code>Predicates&lt;/code> are also allowed, to permit use of &lt;code>Predicates&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="transitionFeatureMembershipKind" label="transitionFeatureMembershipKind" comment="&lt;p>Whether this &lt;code>TransitionFeatureMembership &lt;/code> is for a &lt;code>trigger&lt;/code>, &lt;code>guard&lt;/code> or &lt;code>effect&lt;/code>.&lt;/p>"/>
    <properties name="transitionFeatureMembershipTransitionFeature" label="transitionFeatureMembershipTransitionFeature" comment="&lt;p>The &lt;code>Step&lt;/code> that is the &lt;code>ownedMemberFeature&lt;/code> of this &lt;code>TransitionFeatureMembership&lt;/code>.&lt;/p>"/>
    <properties name="importVisibility" label="importVisibility" comment="&lt;p>The visibility level of the imported &lt;code>members&lt;/code> from this Import relative to the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="importIsRecursive" label="importIsRecursive" comment="&lt;p>Whether to recursively import Memberships from visible, owned sub-Namespaces.&lt;/p>"/>
    <properties name="importIsImportAll" label="importIsImportAll" comment="&lt;p>Whether to import memberships without regard to declared visibility.&lt;/p>&#xA;"/>
    <properties name="importImportedElement" label="importImportedElement" comment="&lt;p>The effectively imported &lt;code>Element&lt;/code> for this &lt;/code>Import&lt;/code>. For a &lt;code>MembershipImport&lt;/code>, this is the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code>. For a &lt;code>NamespaceImport&lt;/code>, it is the &lt;code>importedNamespace&lt;/code>.&lt;/p>"/>
    <properties name="importImportOwningNamespace" label="importImportOwningNamespace" comment="&lt;p>The Namespace into which Memberships are imported by this Import, which must be the &lt;code>owningRelatedElement&lt;/code> of the Import.&lt;/p> &#xA;"/>
    <properties name="sendActionUsageReceiverArgument" label="sendActionUsageReceiverArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;em>&lt;code>receiver&lt;/code>&lt;/em> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="sendActionUsagePayloadArgument" label="sendActionUsagePayloadArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;code>&lt;em>payload&lt;/em>&lt;/code> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="sendActionUsageSenderArgument" label="sendActionUsageSenderArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose result is bound to the &lt;em>&lt;code>sender&lt;/code>&lt;/em> input parameter of this &lt;code>SendActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="featureIsUnique" label="featureIsUnique" comment="&lt;p>Whether or not values for this &lt;code>Feature&lt;/code> must have no duplicates or not.&lt;/p>&#xA;"/>
    <properties name="featureIsOrdered" label="featureIsOrdered" comment="&lt;p>Whether an order exists for the values of this &lt;code>Feature&lt;/code> or not.&lt;/p>"/>
    <properties name="featureIsComposite" label="featureIsComposite" comment="&lt;p>Whether the &lt;code>Feature&lt;/code> is a composite &lt;code>feature&lt;/code> of its &lt;code>featuringType&lt;/code>. If so, the values of the &lt;code>Feature&lt;/code> cannot exist after its featuring instance no longer does.&lt;/p>&#xA;"/>
    <properties name="featureIsEnd" label="featureIsEnd" comment="&lt;p>Whether or not the this &lt;code>Feature&lt;/code> is an end &lt;code>Feature&lt;/code>, requiring a different interpretation of the &lt;code>multiplicity&lt;/code> of the &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>An end &lt;code>Feature&lt;/code> is always considered to map each domain instance to a single co-domain instance, whether or not a &lt;code>Multiplicity&lt;/code> is given for it. If a &lt;code>Multiplicity&lt;/code> is given for an end &lt;code>Feature&lt;/code>, rather than giving the co-domain cardinality for the &lt;code>Feature&lt;/code> as usual, it specifies a cardinality constraint for &lt;em>navigating&lt;/em> across the &lt;code>endFeatures&lt;/code> of the &lt;code>featuringType&lt;/code> of the end &lt;code>Feature&lt;/code>. That is, if a &lt;code>Type&lt;/code> has &lt;em>n&lt;/em> &lt;code>endFeatures&lt;/code>, then the &lt;code>Multiplicity&lt;/code> of any one of those end &lt;code>Features&lt;/code> constrains the cardinality of the set of values of that &lt;code>Feature&lt;/code> when the values of the other &lt;em>n-1&lt;/em> end &lt;code>Features&lt;/code> are held fixed.&lt;/p>&#xA;"/>
    <properties name="featureIsDerived" label="featureIsDerived" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> can always be computed from the values of other &lt;code>Features&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureIsReadOnly" label="featureIsReadOnly" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> can change over the lifetime of an instance of the domain.&lt;/p>&#xA;"/>
    <properties name="featureIsPortion" label="featureIsPortion" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> are contained in the space and time of instances of the domain of the &lt;code>Feature&lt;/code> and represent the same thing as those instances.&lt;/p>&#xA;"/>
    <properties name="featureDirection" label="featureDirection" comment="&lt;p>Indicates how values of this &lt;code>Feature&lt;/code> are determined or used (as specified for the &lt;code>FeatureDirectionKind&lt;/code>).&lt;/p>&#xA;"/>
    <properties name="featureIsNonunique" label="featureIsNonunique"/>
    <properties name="featureOwningType" label="featureOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the &lt;code>owningType&lt;/code> of the &lt;code>owningFeatureMembership&lt;/code> of this &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureType" label="featureType" comment="&lt;p>&lt;code>Types&lt;/code> that restrict the values of this &lt;code>Feature&lt;/code>, such that the values must be instances of all the &lt;code>types&lt;/code>. The types of a &lt;code>Feature&lt;/code> are derived from its &lt;code>typings&lt;/code> and the &lt;code>types&lt;/code> of its &lt;code>subsettings&lt;/code>. If the &lt;code>Feature&lt;/code> is chained, then the &lt;code>types&lt;/code> of the last &lt;code>Feature&lt;/code> in the chain are also &lt;code>types&lt;/code> of the chained &lt;code>Feature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwnedRedefinition" label="featureOwnedRedefinition" comment="&lt;p>The &lt;code>ownedSubsettings&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>Redefinitions&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>redefiningFeature&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="featureOwnedSubsetting" label="featureOwnedSubsetting" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>Subsettings&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwningFeatureMembership" label="featureOwningFeatureMembership" comment="&lt;p>The &lt;code>FeatureMembership&lt;/code> that owns this &lt;code>Feature&lt;/code> as an &lt;code>ownedMemberFeature&lt;/code>, determining its &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="featureEndOwningType" label="featureEndOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is related to this &lt;code>Feature&lt;/code> by an &lt;code>EndFeatureMembership&lt;/code> in which the &lt;code>Feature&lt;/code> is an &lt;code>ownedMemberFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTyping" label="featureOwnedTyping" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureTypings&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>typedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureFeaturingType" label="featureFeaturingType" comment="&lt;p>&lt;code>Types&lt;/code> that feature this &lt;code>Feature&lt;/code>, such that any instance in the domain of the &lt;code>Feature&lt;/code> must be classified by all of these &lt;code>Types&lt;/code>, including at least all the &lt;code>featuringTypes&lt;/code> of its &lt;code>typeFeaturings&lt;/code>.  If the &lt;code>Feature&lt;/code> is chained, then the &lt;code>featuringTypes&lt;/code> of the first &lt;code>Feature&lt;/code> in the chain are also &lt;code>featuringTypes&lt;/code> of the chained &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTypeFeaturing" label="featureOwnedTypeFeaturing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>TypeFeaturings&lt;/code> and for which the &lt;code>Feature&lt;/code> is the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeature" label="featureChainingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that are chained together to determine the values of this &lt;code>Feature&lt;/code>, derived from the &lt;code>chainingFeatures&lt;/code> of the &lt;code>ownedFeatureChainings&lt;/code> of this &lt;code>Feature&lt;/code>, in the same order. The values of a &lt;code>Feature&lt;/code> with &lt;code>chainingFeatures&lt;/code> are the same as values of the last &lt;code>Feature&lt;/code> in the chain, which can be found by starting with the values of the first &lt;code>Feature&lt;/code> (for each instance of the domain of the original &lt;code>Feature&lt;/code>), then using each of those as domain instances to find the values of the second &lt;code>Feature&lt;/code> in chainingFeatures, and so on, to values of the last &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureInverting" label="featureOwnedFeatureInverting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureInvertings&lt;/code> and for which the &lt;code>Feature&lt;/code> is the &lt;code>featureInverted&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureChaining" label="featureOwnedFeatureChaining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureChainings&lt;/code>, for which the &lt;code>Feature&lt;/code> will be the &lt;code>featureChained&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedReferenceSubsetting" label="featureOwnedReferenceSubsetting" comment="&lt;p>The one &lt;code>ownedSubsetting&lt;/code> of this &lt;code>Feature&lt;/code>, if any, that is a &lt;code>ReferenceSubsetting&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>referencingFeature&lt;/code>.&lt;/p>"/>
    <properties name="subclassificationSuperclassifier" label="subclassificationSuperclassifier" comment="&lt;p>The more &lt;code>general&lt;/code> Classifier in this &lt;code>Subclassification&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subclassificationSubclassifier" label="subclassificationSubclassifier" comment="&lt;p>The more specific &lt;code>Classifier&lt;/code> in this &lt;code>Subclassification&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subclassificationOwningClassifier" label="subclassificationOwningClassifier" comment="&lt;p>The &lt;code>Classifier&lt;/code> that owns this &lt;code>Subclassification&lt;/code> relationship, which must also be its &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureChainExpressionTargetFeature" label="featureChainExpressionTargetFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is accessed by this &lt;code>FeatureChainExpression&lt;code>, which is its first non-&lt;code>parameter&lt;/code> &lt;code>member&lt;/code>.&lt;p>"/>
    <properties name="conjugationOriginalType" label="conjugationOriginalType" comment="&lt;p>The &lt;code>Type&lt;/code> to be conjugated.&lt;/p>&#xA;"/>
    <properties name="conjugationConjugatedType" label="conjugationConjugatedType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the result of applying &lt;code>Conjugation&lt;/code> to the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="conjugationOwningType" label="conjugationOwningType" comment="&lt;p>The &lt;code>conjugatedType&lt;/code> of this &lt;code>Conjugation&lt;/code> that is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureReferenceExpressionReferent" label="featureReferenceExpressionReferent" comment="&lt;p>The &lt;code>Feature&lt;/code> that is referenced by this &lt;code>FeatureReferenceExpression&lt;/code>, which is its first non-&lt;code>parameter&lt;/code> &lt;code>member&lt;/code>.&lt;p>"/>
    <properties name="actionUsageActionDefinition" label="actionUsageActionDefinition" comment="&lt;p>The &lt;code>Behaviors&lt;/code> that are the &lt;code>types&lt;/code> of this &lt;code>ActionUsage&lt;/code>. Nominally, these would be &lt;code>ActionDefinitions&lt;/code>, but other kinds of Kernel &lt;code>Behaviors&lt;/code> are also allowed, to permit use of &lt;code>Behaviors&lt;/code> from the Kernel Model Libraries.&lt;/p> &#xA;"/>
    <properties name="interfaceUsageInterfaceDefinition" label="interfaceUsageInterfaceDefinition" comment="&lt;p>The &lt;code>InterfaceDefinitions&lt;/code> that type this &lt;code>InterfaceUsage&lt;/code>.&lt;/p>"/>
    <properties name="redefinitionRedefiningFeature" label="redefinitionRedefiningFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is redefining the &lt;code>redefinedFeature&lt;/code> of this &lt;code>Redefinition&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="redefinitionRedefinedFeature" label="redefinitionRedefinedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is redefined by the &lt;code>redefiningFeature&lt;/code> of this &lt;code>Redefinition&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="packageFilterCondition" label="packageFilterCondition" comment="&lt;p>The model-level evaluable &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>-valued &lt;code>Expression&lt;/code> used to filter the &lt;code>members&lt;/code> of this &lt;code>Package&lt;/code>, which are owned by the &lt;code>Package&lt;/code> are via &lt;code>ElementFilterMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="literalBooleanValue" label="literalBooleanValue" comment="&lt;p>The &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralBoolean&lt;/code>.&lt;/p>&#xA;&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="stateUsageIsParallel" label="stateUsageIsParallel" comment="&lt;p>Whether the &lt;code>nestedStates&lt;/code> of this &lt;code>StateUsage&lt;/code> are to all be performed in parallel. If true, none of the &lt;code>nestedActions&lt;/code> (which include &lt;code>nestedStates&lt;/code>) may have any incoming or outgoing &lt;code>Transitions&lt;/code>. If false, only one &lt;code>nestedState&lt;/code> may be performed at a time.&lt;/p>&#xA;"/>
    <properties name="stateUsageStateDefinition" label="stateUsageStateDefinition" comment="&lt;p>The &lt;code>Behaviors&lt;/code> that are the &lt;code>types&lt;/code> of this &lt;code>StateUsage&lt;/code>. Nominally, these would be &lt;code>StateDefinitions&lt;/code>, but kernel &lt;code>Behaviors&lt;/code> are also allowed, to permit use of &lt;code>Behaviors&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="stateUsageEntryAction" label="stateUsageEntryAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed on entry to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = entry&lt;/code>.&lt;/p>"/>
    <properties name="stateUsageDoAction" label="stateUsageDoAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed while in the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = do&lt;/code>.&lt;/p>"/>
    <properties name="stateUsageExitAction" label="stateUsageExitAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateUsage&lt;/code> to be performed on exit to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateUsage&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = exit&lt;/code>.&lt;/p>"/>
    <properties name="enumerationDefinitionEnumeratedValue" label="enumerationDefinitionEnumeratedValue" comment="&lt;p>&lt;code>EnumerationUsages&lt;/code> of this &lt;code>EnumerationDefinition&lt;/code>that have distinct, fixed values. Each &lt;code>enumeratedValue&lt;/code> specifies one of the allowed instances of the &lt;code>EnumerationDefinition&lt;/code>.&lt;/p>"/>
    <properties name="invariantIsNegated" label="invariantIsNegated" comment="&lt;p>Whether this &lt;code>Invariant&lt;/code> is asserted to be false rather than true.&lt;/p>&#xA;"/>
    <properties name="requirementVerificationMembershipOwnedRequirement" label="requirementVerificationMembershipOwnedRequirement" comment="&lt;p>The owned &lt;code>RequirementUsage&lt;/code> that acts as the &lt;code>ownedConstraint&lt;/code> for this &lt;code>RequirementVerificationMembership&lt;/code>. This will either be the &lt;code>verifiedRequirement&lt;/code>, or it will subset the &lt;code>verifiedRequirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementVerificationMembershipVerifiedRequirement" label="requirementVerificationMembershipVerifiedRequirement" comment="&lt;p> The &lt;code>RequirementUsage&lt;/code> that is identified as being verified. It is the &lt;code>referencedConstraint&lt;/code> of the &lt;code>RequirementVerificationMembership&lt;/code> considered as a &lt;code>RequirementConstraintMembership&lt;/code>, which must be a &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="literalStringValue" label="literalStringValue" comment="&lt;p>The &lt;code>&lt;em>String&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralString&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="forLoopActionUsageSeqArgument" label="forLoopActionUsageSeqArgument" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result provides the sequence of values to which the &lt;code>loopVariable&lt;/code> is set for each iterative performance of the &lt;code>bodyAction&lt;/code>. It is the &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is bound to the &lt;em>&lt;code>seq&lt;/code>&lt;/em> &lt;code>input&lt;/code> &lt;code>parameter&lt;/code> of this &lt;code>ForLoopActionUsage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="forLoopActionUsageLoopVariable" label="forLoopActionUsageLoopVariable" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of this &lt;co>ForLoopActionUsage&lt;/code> that acts as the loop variable, which is assigned the successive values of the input sequence on each iteration. It is the &lt;code>ownedFeature&lt;/code> that redefines &lt;em>&lt;code>ForLoopAction::var&lt;/code>&lt;/em>.&lt;/p> "/>
    <properties name="itemFlowItemType" label="itemFlowItemType" comment="&lt;p>The type of values transferred, which is the &lt;code>type&lt;/code> of the &lt;code>itemFeature&lt;/code> of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="itemFlowTargetInputFeature" label="itemFlowTargetInputFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that receives the values carried by the &lt;code>ItemFlow&lt;/code>. It must be an owned &lt;code>output&lt;/code> of the target participant of the &lt;code>ItemFlow&lt;/code>.&lt;/p>"/>
    <properties name="itemFlowSourceOutputFeature" label="itemFlowSourceOutputFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that provides the items carried by the &lt;code>ItemFlow&lt;/code>. It must be an owned &lt;code>output&lt;/code> of the &lt;code>source&lt;/code> of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFlowEnd" label="itemFlowItemFlowEnd" comment="&lt;p>The &lt;code>connectorEnds&lt;/code> of this &lt;code>ItemFlow&lt;/code> that are &lt;code>ItemFlowEnds&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFeature" label="itemFlowItemFeature" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of the &lt;code>ItemFlow&lt;/code> that is an &lt;code>ItemFeature&lt;/code> (if any).&lt;/p>&#xA;"/>
    <properties name="itemFlowInteraction" label="itemFlowInteraction" comment="&lt;p>The &lt;code>Interactions&lt;/code> that type this &lt;code>ItemFlow&lt;/code>. &lt;code>Interactions&lt;/code> are both &lt;code>Associations&lt;/code> and &lt;code>Behaviors&lt;/code>, which can type &lt;code>Connectors&lt;/code> and &lt;code>Steps&lt;/code>, respectively.&lt;/p>"/>
    <properties name="viewUsageViewDefinition" label="viewUsageViewDefinition" comment="&lt;p>The &lt;code>ViewDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>ViewUsage&lt;/code>.&lt;/p>"/>
    <properties name="viewUsageSatisfiedViewpoint" label="viewUsageSatisfiedViewpoint" comment="&lt;p>The &lt;code>nestedRequirements&lt;/code> of this &lt;code>ViewUsage&lt;/code> that are &lt;code>ViewpointUsages&lt;/code> for (additional) viewpoints satisfied by the &lt;code>ViewUsage&lt;/code>.&lt;/p>"/>
    <properties name="viewUsageExposedElement" label="viewUsageExposedElement" comment="&lt;p>The &lt;code>Elements&lt;/code> that are exposed by this &lt;code>ViewUsage&lt;/code>, which are those &lt;code>memberElements&lt;/code> of the imported &lt;code>Memberships&lt;/code> from all the &lt;code>Expose&lt;/code> &lt;code>Relationships&lt;/code> that meet all the owned and inherited &lt;code>viewConditions&lt;/code>.&lt;/p>"/>
    <properties name="viewUsageViewRendering" label="viewUsageViewRendering" comment="&lt;p>The &lt;code>RenderingUsage&lt;/code> to be used to render views defined by this &lt;code>ViewUsage&lt;/code>, which is the &lt;code>referencedRendering&lt;/code> of the &lt;code>ViewRenderingMembership&lt;/code> of the &lt;code>ViewUsage&lt;/code>.&lt;p>"/>
    <properties name="viewUsageViewCondition" label="viewUsageViewCondition" comment="&lt;p>The &lt;code>Expressions&lt;/code> related to this &lt;code>ViewUsage&lt;/code> by &lt;code>ElementFilterMemberships&lt;/code>, which specify conditions on &lt;code>Elements&lt;/code> to be rendered in a view.&lt;/p>"/>
    <properties name="actorMembershipOwnedActorParameter" label="actorMembershipOwnedActorParameter" comment="&lt;p>The &lt;code>PartUsage&lt;/code> specifying the actor.&lt;/p>"/>
    <properties name="eventOccurrenceUsageEventOccurrence" label="eventOccurrenceUsageEventOccurrence" comment="&lt;p>The &lt;code>OccurrenceUsage&lt;/code> referenced as an event by this &lt;code>EventOccurrenceUsage&lt;/code>. It is the &lt;code>referenceFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> for the &lt;code>EventOccurrenceUsage&lt;/code>, if there is one, and, otherwise, the &lt;code>EventOccurrenceUsage&lt;/code> itself.&lt;/p>"/>
    <properties name="stateSubactionMembershipKind" label="stateSubactionMembershipKind" comment="&lt;p>Whether this &lt;code>StateSubactionMembership&lt;/code> is for an &lt;code>entry&lt;code>, &lt;code>do&lt;/code> or &lt;code>exit&lt;/code> &lt;code>ActionUsage&lt;/code>.&lt;/p>"/>
    <properties name="stateSubactionMembershipAction" label="stateSubactionMembershipAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> that is the &lt;code>ownedMemberFeature&lt;/code> of this &lt;code>StateSubactionMembership&lt;/code>.&lt;/p>"/>
    <properties name="multiplicityRangeLowerBound" label="multiplicityRangeLowerBound" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result provides the lower bound of the &lt;code>MultiplicityRange&lt;/code>. If no &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code> is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (&lt;code>*&lt;/code>), in which case the lower bound shall be 0.&lt;/p>&#xA;"/>
    <properties name="multiplicityRangeUpperBound" label="multiplicityRangeUpperBound" comment="The &lt;code>Expression&lt;/code> whose result is the upper bound of the &lt;code>MultiplicityRange&lt;/code>."/>
    <properties name="multiplicityRangeBound" label="multiplicityRangeBound" comment="&lt;p>The owned &lt;code>Expressions&lt;/code> of the &lt;code>MultiplicityRange&lt;/code> whose results provide its bounds. These must be the only &lt;code>ownedMembers&lt;/code> of the &lt;code>MultiplicityRange&lt;/code>.&lt;/p>"/>
    <properties name="partUsagePartDefinition" label="partUsagePartDefinition" comment="&lt;p>The &lt;code>itemDefinitions&lt;/code> of this PartUsage that are PartDefinitions.&lt;/p>"/>
    <properties name="invocationExpressionArgument" label="invocationExpressionArgument" comment="&lt;p>The &lt;code>value&lt;/code> &lt;code>Expressions&lt;/code> of the &lt;code>FeatureValues&lt;/code> of the owned input &lt;code>parameters&lt;/code> of the &lt;code>InvocationExpression&lt;/code>."/>
    <properties name="invocationExpressionOperand" label="invocationExpressionOperand"/>
    <properties name="elementAliasIds" label="elementAliasIds" comment="&lt;p>Various alternative identifiers for this Element. Generally, these will be set by tools.&lt;/p>"/>
    <properties name="elementDeclaredShortName" label="elementDeclaredShortName" comment="&lt;p>An optional alternative name for the &lt;code>Element&lt;/code> that is intended to be shorter or in some way more succinct than its primary &lt;code>name&lt;/code>. It may act as a modeler-specified identifier for the &lt;code>Element&lt;/code>, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.&lt;/p> &#xA;"/>
    <properties name="elementDeclaredName" label="elementDeclaredName" comment="&lt;p>The declared name of this &lt;code>Element&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementShortName" label="elementShortName" comment="&lt;p>The short name to be used for this &lt;code>Element&lt;/code> during name resolution within its &lt;code>owningNamespace&lt;/code>. This is derived using the &lt;code>effectiveShortName()&lt;/code> operation. By default, it is the same as the &lt;code>declaredShortName&lt;/code>, but this is overridden for certain kinds of &lt;code>Elements&lt;/code> to compute a &lt;code>shortName&lt;/code> even when the &lt;code>declaredName&lt;/code> is null.&lt;/p>"/>
    <properties name="elementQualifiedName" label="elementQualifiedName" comment="&lt;p>The full ownership-qualified name of this &lt;code>Element&lt;/code>, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The &lt;code>qualifiedName&lt;/code> is null if this &lt;code>Element&lt;/code> has no &lt;code>owningNamespace&lt;/code> or if there is not a complete ownership chain of named &lt;code>Namespaces&lt;/code> from a root &lt;code>Namespace&lt;/code> to this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="elementIsImpliedIncluded" label="elementIsImpliedIncluded" comment="&lt;p>Whether all necessary implied Relationships have been included in the &lt;code>ownedRelationships&lt;/code> of this Element. This property may be true, even if there are not actually any &lt;code>ownedRelationships&lt;/code> with &lt;code>isImplied = true&lt;/code>, meaning that no such Relationships are actually implied for this Element. However, if it is false, then &lt;code>ownedRelationships&lt;/code> may &lt;em>not&lt;/em> contain any implied Relationships. That is, either &lt;em>all&lt;/em> required implied Relationships must be included, or none of them.&lt;/p>"/>
    <properties name="elementIsLibraryElement" label="elementIsLibraryElement" comment="&lt;p>Whether this Element is contained in the ownership tree of a library model.&lt;/p>"/>
    <properties name="elementOwningMembership" label="elementOwningMembership" comment="&lt;p>The &lt;code>owningRelationship&lt;/code> of this &lt;code>Element&lt;/code>, if that &lt;code>Relationship&lt;/code> is a &lt;code>Membership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementOwnedRelationship" label="elementOwnedRelationship" comment="&lt;p>The Relationships for which this Element is the &lt;tt>owningRelatedElement&lt;/tt>.&lt;/p>"/>
    <properties name="elementOwningRelationship" label="elementOwningRelationship" comment="&lt;p>The Relationship for which this Element is an &lt;tt>ownedRelatedElement&lt;/tt>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwningNamespace" label="elementOwningNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> that owns this &lt;code>Element&lt;/code>, which is the &lt;code>membershipOwningNamespace&lt;/code> of the &lt;code>owningMembership&lt;/code> of this &lt;code>Element&lt;/code>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwner" label="elementOwner" comment="&lt;p>The owner of this Element, derived as the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>owningRelationship&lt;/code> of this Element, if any.&lt;/p>"/>
    <properties name="elementOwnedElement" label="elementOwnedElement" comment="&lt;p>The Elements owned by this Element, derived as the &lt;tt>ownedRelatedElements&lt;/tt> of the &lt;tt>ownedRelationships&lt;/tt> of this Element.&lt;/p>&#xA;"/>
    <properties name="elementDocumentation" label="elementDocumentation" comment="&lt;p>The Documentation owned by this Element.&lt;/p>"/>
    <properties name="elementOwnedAnnotation" label="elementOwnedAnnotation" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Element&lt;/code> that are &lt;code>Annotations&lt;/code>, for which this &lt;code>Element&lt;/code> is the &lt;code>annotatedElement&lt;/code>.&lt;/code>"/>
    <properties name="elementTextualRepresentation" label="elementTextualRepresentation" comment="&lt;p>The &lt;code>TextualRepresentations&lt;/code> that annotate this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="analysisCaseUsageAnalysisAction" label="analysisCaseUsageAnalysisAction" comment="&lt;p>The composite &lt;code>usages&lt;/code> of the &lt;code>AnalysisCaseUsage&lt;/code> that are defined as &lt;code>AnalysisActions&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="analysisCaseUsageAnalysisCaseDefinition" label="analysisCaseUsageAnalysisCaseDefinition" comment="&lt;p>The &lt;code>AnalysisCaseDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>AnalysisCaseUsage&lt;/code>.&lt;/p>"/>
    <properties name="analysisCaseUsageResultExpression" label="analysisCaseUsageResultExpression" comment="&lt;p>An &lt;code>Expression&lt;/code> used to compute the &lt;code>result&lt;/code> of the &lt;code>AnalysisCaseUsage&lt;/code>, owned via a &lt;code>ResultExpressionMembership&lt;/code>.&lt;/p>"/>
    <properties name="viewpointUsageViewpointDefinition" label="viewpointUsageViewpointDefinition" comment="&lt;p>The &lt;code>ViewpointDefinition&lt;/code> that is the &lt;code>definition&lt;/code> of this &lt;code>ViewpointUsage&lt;code>.&lt;/p>"/>
    <properties name="viewpointUsageViewpointStakeholder" label="viewpointUsageViewpointStakeholder" comment="&lt;p>The &lt;code>PartUsages&lt;/code> that identify the stakeholders with concerns framed by this &lt;code>ViewpointUsage&lt;/code>, which are the owned and inherited &lt;code>stakeholderParameters&lt;/code> of the &lt;code>framedConcerns&lt;/code> of this &lt;code>ViewpointUsage&lt;/code>.&lt;/p>"/>
    <properties name="caseDefinitionObjectiveRequirement" label="caseDefinitionObjectiveRequirement" comment="&lt;p>The &lt;code>RequirementUsage&lt;/code> representing the objective of this &lt;code>CaseDefinition&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="caseDefinitionSubjectParameter" label="caseDefinitionSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this &lt;code>CaseDefinition&lt;/code> that represents its subject.&lt;/p>"/>
    <properties name="caseDefinitionActorParameter" label="caseDefinitionActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>CaseDefinition&lt;/code> that represent actors involved in the case.&lt;/p>"/>
    <properties name="literalRationalValue" label="literalRationalValue" comment="&lt;p>The value whose rational approximation is the result of evaluating this &lt;code>LiteralRational&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Real value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="acceptActionUsageReceiverArgument" label="acceptActionUsageReceiverArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is bound to the &lt;em>&lt;code>receiver&lt;/code>&lt;/em> input &lt;code>parameter&lt;/code> of this &lt;code>AcceptActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="acceptActionUsagePayloadParameter" label="acceptActionUsagePayloadParameter" comment="&lt;p>The &lt;code>nestedReference&lt;/code> of this &lt;code>AcceptActionUsage&lt;/code> that redefines the &lt;code>payload&lt;/code> output &lt;code>parameter&lt;/code> of the base &lt;code>AcceptActionUsage&lt;/code> &lt;em>&lt;code>AcceptAction&lt;/code>&lt;/em> from the Systems Model Library.&lt;/p>"/>
    <properties name="acceptActionUsagePayloadArgument" label="acceptActionUsagePayloadArgument" comment="&lt;p>An &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is bound to the &lt;code>&lt;em>payload&lt;/em>&lt;/code> &lt;code>parameter&lt;/code> of this &lt;code>AcceptActionUsage&lt;/code>. If provided, the &lt;code>AcceptActionUsage&lt;/code> will only accept a &lt;code>&lt;em>Transfer&lt;/em>&lt;/code> with exactly this &lt;code>&lt;em>payload&lt;/em>&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="portDefinitionConjugatedPortDefinition" label="portDefinitionConjugatedPortDefinition" comment="&lt;p>The &lt;codeConjugatedPortDefinition&lt;/code> that is conjugate to this &lt;code>PortDefinition&lt;/code>.&lt;/p>"/>
    <properties name="conjugatedPortDefinitionOwnedPortConjugator" label="conjugatedPortDefinitionOwnedPortConjugator" comment="&lt;p>The &lt;code>PortConjugation&lt;/code> that is the &lt;code>ownedConjugator&lt;/code> of this &lt;code>ConjugatedPortDefinition&lt;/code>, linking it to its &lt;code>originalPortDefinition&lt;/code>.&lt;/p>"/>
    <properties name="conjugatedPortDefinitionOriginalPortDefinition" label="conjugatedPortDefinitionOriginalPortDefinition" comment="&lt;p>The original &lt;code>PortDefinition&lt;/code> for this &lt;code>ConjugatedPortDefinition&lt;/code>, which is the &lt;code>owningNamespace&lt;/code> of the &lt;code>ConjugatedPortDefinition&lt;/code>.&lt;/p>"/>
    <properties name="calculationDefinitionCalculation" label="calculationDefinitionCalculation" comment="&lt;p>The &lt;code>actions&lt;/code> of this &lt;code>CalculationDefinition&lt;/code> that are &lt;code>CalculationUsages&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionIsParallel" label="stateDefinitionIsParallel" comment="&lt;p>Whether the &lt;code>ownedStates&lt;/code> of this &lt;code>StateDefinition&lt;/code> are to all be performed in parallel. If true, none of the &lt;code>ownedActions&lt;/code> (which includes &lt;code>ownedStates&lt;/code>) may have any incoming or outgoing &lt;code>Transitions&lt;/code>. If false, only one &lt;code>ownedState&lt;/code> may be performed at a time.&lt;/p>&#xA;"/>
    <properties name="stateDefinitionState" label="stateDefinitionState" comment="&lt;p>The &lt;code>StateUsages&lt;/code>, which are &lt;code>actions&lt;/code> in the &lt;code>StateDefinition&lt;/code>, that specify the discrete states in the behavior defined by the &lt;code>StateDefinition&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionEntryAction" label="stateDefinitionEntryAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed on entry to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = entry&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionDoAction" label="stateDefinitionDoAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed while in the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = do&lt;/code>.&lt;/p>"/>
    <properties name="stateDefinitionExitAction" label="stateDefinitionExitAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> of this &lt;code>StateDefinition&lt;/code> to be performed on exit to the state defined by the &lt;code>StateDefinition&lt;/code>. It is the owned &lt;code>ActionUsage&lt;/code> related to the &lt;code>StateDefinition&lt;/code> by a &lt;code>StateSubactionMembership&lt;/code>  with &lt;code>kind = exit&lt;/code>.&lt;/p>"/>
    <properties name="viewDefinitionView" label="viewDefinitionView" comment="&lt;p>The &lt;code>usages&lt;/code> of this &lt;code>ViewDefinition&lt;/code> that are &lt;code>ViewUsages&lt;/code>.&lt;/p>"/>
    <properties name="viewDefinitionSatisfiedViewpoint" label="viewDefinitionSatisfiedViewpoint" comment="&lt;p>The composite &lt;code>ownedRequirements&lt;/code> of this &lt;code>ViewDefinition&lt;/code> that are &lt;code>ViewpointUsages&lt;/code> for viewpoints satisfied by the &lt;code>ViewDefinition&lt;/code>.&lt;/p>"/>
    <properties name="viewDefinitionViewRendering" label="viewDefinitionViewRendering" comment="&lt;p>The &lt;code>RenderingUsage&lt;/code> to be used to render views defined by this &lt;code>ViewDefinition&lt;/code>, which is the &lt;code>referencedRendering&lt;/code> of the &lt;code>ViewRenderingMembership&lt;/code> of the &lt;code>ViewDefinition&lt;/code>.&lt;p>"/>
    <properties name="viewDefinitionViewCondition" label="viewDefinitionViewCondition" comment="&lt;p>The &lt;code>Expressions&lt;/code> related to this &lt;code>ViewDefinition&lt;/code> by &lt;code>ElementFilterMemberships&lt;/code>, which specify conditions on &lt;code>Elements&lt;/code> to be rendered in a view.&lt;/p>"/>
    <properties name="satisfyRequirementUsageSatisfiedRequirement" label="satisfyRequirementUsageSatisfiedRequirement" comment="&lt;p>The &lt;code>RequirementUsage&lt;/code> that is satisfied by the &lt;code>satisfyingSubject&lt;/code> of this &lt;code>SatisfyRequirementUsage&lt;/code>. It is the &lt;code>assertedConstraint&lt;/code> of the &lt;code>SatisfyRequirementUsage&lt;/code> considered as an &lt;code>AssertConstraintUsage&lt;/code>, which must be a &lt;code>RequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="satisfyRequirementUsageSatisfyingFeature" label="satisfyRequirementUsageSatisfyingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that represents the actual subject that is asserted to satisfy the &lt;code>satisfiedRequirement&lt;/code>. The &lt;code>satisfyingFeature&lt;/code> is bound to the &lt;code>subjectParameter&lt;/code> of the &lt;code>SatisfyRequirementUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementConstraintMembershipKind" label="requirementConstraintMembershipKind" comment="&lt;p>Whether the &lt;code>RequirementConstraintMembership&lt;/code> is for an assumed or required &lt;code>ConstraintUsage&lt;/code>.&lt;/p>"/>
    <properties name="requirementConstraintMembershipOwnedConstraint" label="requirementConstraintMembershipOwnedConstraint" comment="&lt;p>The &lt;code>ConstraintUsage&lt;/code> that is the &lt;code>ownedMemberFeature&lt;/code> of this &lt;code>RequirementConstraintMembership&lt;/code>.&lt;/p>"/>
    <properties name="requirementConstraintMembershipReferencedConstraint" label="requirementConstraintMembershipReferencedConstraint" comment="&lt;p> The &lt;code>ConstraintUsage&lt;/code> that is referenced through this &lt;code>RequirementConstraintMembership&lt;/code>. It is the &lt;code>referencedFeature&lt;/code> of the &lt;code>ownedReferenceSubsetting&lt;/code> of the &lt;code>ownedConstraint&lt;/code>, if there is one, and, otherwise, the &lt;code>ownedConstraint&lt;/code> itself.&lt;/p>"/>
    <properties name="classifierOwnedSubclassification" label="classifierOwnedSubclassification" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Classifier&lt;/code> that are &lt;code>Subclassifications&lt;/code>, for which this &lt;code>Classifier&lt;/code> is the &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="requirementDefinitionReqId" label="requirementDefinitionReqId" comment="&lt;p>An optional modeler-specified identifier for this &lt;code>RequirementDefinition&lt;/code> (used, e.g., to link it to an original requirement text in some source document), which is the &lt;code>declaredShortName&lt;/code> for the &lt;code>RequirementDefinition&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionText" label="requirementDefinitionText" comment="&lt;p>An optional textual statement of the requirement represented by this &lt;code>RequirementDefinition&lt;/code>, derived from the &lt;code>bodies&lt;/code> of the &lt;code>documentation&lt;/code> of the &lt;code>RequirementDefinition&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="requirementDefinitionSubjectParameter" label="requirementDefinitionSubjectParameter" comment="&lt;p>The &lt;code>parameter&lt;/code> of this &lt;code>RequirementDefinition&lt;/code> that represents its subject.&lt;/p>"/>
    <properties name="requirementDefinitionActorParameter" label="requirementDefinitionActorParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>RequirementDefinition&lt;/code> that represent actors involved in the requirement.&lt;/p>"/>
    <properties name="requirementDefinitionStakeholderParameter" label="requirementDefinitionStakeholderParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>RequirementDefinition&lt;/code> that represent stakeholders for th requirement.&lt;/p>"/>
    <properties name="requirementDefinitionAssumedConstraint" label="requirementDefinitionAssumedConstraint" comment="&lt;p>The owned &lt;code>ConstraintUsages&lt;/code> that represent assumptions of this &lt;code>RequirementDefinition&lt;/code>, which are the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the &lt;code>RequirementDefinition&lt;/code> with &lt;code>kind = assumption&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionRequiredConstraint" label="requirementDefinitionRequiredConstraint" comment="&lt;p>The owned &lt;code>ConstraintUsages&lt;/code> that represent requirements of this &lt;code>RequirementDefinition&lt;/code>, derived as the &lt;code>ownedConstraints&lt;/code> of the &lt;code>RequirementConstraintMemberships&lt;/code> of the &lt;code>RequirementDefinition&lt;/code> with &lt;code>kind&lt;/code> = &lt;code>requirement&lt;/code>.&lt;/p>"/>
    <properties name="requirementDefinitionFramedConcern" label="requirementDefinitionFramedConcern" comment="&lt;p>The &lt;code>ConcernUsages&lt;/code> framed by this &lt;code>RequirementDefinition&lt;/code>, which are the &lt;code>ownedConcerns&lt;/code> of all &lt;code>FramedConcernMemberships&lt;/code> of the &lt;code>RequirementDefinition&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotatedElement" label="annotatingElementAnnotatedElement" comment="&lt;p>The &lt;code>Elements&lt;/code> that are annotated by this &lt;code>AnnotatingElement&lt;/code>. If &lt;code>annotation&lt;/code> is not empty, these are the &lt;code>annotatedElements&lt;/code> of the &lt;code>annotations&lt;/code>. If &lt;code>annotation&lt;/code> is empty, then it is the &lt;code>owningNamespace&lt;/code> of the &lt;code>AnnotatingElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotatingElementOwnedAnnotatingRelationship" label="annotatingElementOwnedAnnotatingRelationship" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>AnnotatingElement&lt;/code> that are &lt;code>Annotations&lt;/code>, for which this &lt;code>AnnotatingElement&lt;/code> is the &lt;code>annotatingElement&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotation" label="annotatingElementAnnotation" comment="&lt;p>The &lt;code>Annotations&lt;/code> that relate this &lt;code>AnnotatingElement&lt;/code> to its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="variantMembershipOwnedVariantUsage" label="variantMembershipOwnedVariantUsage" comment="&lt;p>The &lt;code>Usage&lt;/code> that represents a variant in the context of the &lt;code>owningVariationDefinition&lt;/code> or &lt;code>owningVariationUsage&lt;/code>.&lt;/p>"/>
    <properties name="literalIntegerValue" label="literalIntegerValue" comment="&lt;p>The &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralInteger&lt;/code>.&lt;/p>&#xA;&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="successionTransitionStep" label="successionTransitionStep" comment="&lt;p>A &lt;code>Step&lt;/code> that is typed by the &lt;code>Behavior&lt;/code> &lt;code>&lt;em>TransitionPerformances::TransitionPerformance&lt;/em>&lt;/code> (from the Kernel Semantic Library) that has this &lt;code>Succession&lt;/code> as its &lt;em>&lt;code>transitionLink&lt;/code>&lt;/em>.&lt;/p>&#xA;"/>
    <properties name="successionTriggerStep" label="successionTriggerStep" comment="&lt;p>&lt;code>Steps&lt;/code> that map incoming events to the timing of occurrences of the &lt;code>transitionStep&lt;/code>. The values of &lt;code>triggerStep&lt;/code> subset the list of acceptable events to be received by a &lt;code>Behavior&lt;/code> or the object that performs it.&lt;/p>&#xA;"/>
    <properties name="successionEffectStep" label="successionEffectStep" comment="&lt;p>&lt;code>Steps&lt;/code> that represent occurrences that are side effects of the &lt;code>transitionStep&lt;/code> occurring.&lt;/p>&#xA;"/>
    <properties name="successionGuardExpression" label="successionGuardExpression" comment="&lt;p>&lt;code>Expressions&lt;/code> that must evaluate to true before the &lt;code>transitionStep&lt;/code> can occur.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationLanguage" label="textualRepresentationLanguage" comment="&lt;p>The natural or artifical language in which the &lt;code>body&lt;/code> text is written.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationBody" label="textualRepresentationBody" comment="&lt;p>The textual representation of the &lt;code>representedElement&lt;/code> in the given &lt;code>language&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationRepresentedElement" label="textualRepresentationRepresentedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is represented by this &lt;code>TextualRepresentation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="metadataAccessExpressionReferencedElement" label="metadataAccessExpressionReferencedElement" comment="&lt;p> The &lt;code>Element&lt;/code> whose metadata is being accessed.&lt;/p>"/>
    <properties name="annotationAnnotatingElement" label="annotationAnnotatingElement" comment="&lt;p>The &lt;code>AnnotatingElement&lt;/code> that annotates the &lt;code>annotatedElement&lt;/code> of this &lt;code>Annotation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotationAnnotatedElement" label="annotationAnnotatedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is annotated by the &lt;code>annotatingElement&lt;/code> of this Annotation.&lt;/p>&#xA;"/>
    <properties name="annotationOwningAnnotatedElement" label="annotationOwningAnnotatedElement" comment="&lt;p>The &lt;code>annotatedElement&lt;/code> of this &lt;code>Annotation&lt;/code>, when it is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotationOwningAnnotatingElement" label="annotationOwningAnnotatingElement" comment="&lt;p>The &lt;code>annotatingElement&lt;/code> of this &lt;code>Annotation&lt;/code>, when it is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="includeUseCaseUsageUseCaseIncluded" label="includeUseCaseUsageUseCaseIncluded" comment="&lt;p>The &lt;code>UseCaseUsage&lt;/code> to be included by this &lt;code>IncludeUseCaseUsage&lt;/code>. It is the &lt;code>performedAction&lt;/code> of the &lt;code>IncludeUseCaseUsage&lt;/code> considered as a &lt;code>PerformActionUsage&lt;/code>, which must be a &lt;code>UseCaseUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="concernUsageConcernDefinition" label="concernUsageConcernDefinition" comment="&lt;p>The ConcernDefinition that is the single type of this ConcernUsage.&lt;/p>"/>
    <properties name="loopActionUsageBodyAction" label="loopActionUsageBodyAction" comment="&lt;p>The &lt;code>ActionUsage&lt;/code> to be performed repeatedly by the &lt;code>LoopActionUsage&lt;/code>. It is the second &lt;code>parameter&lt;/code> of the &lt;code>LoopActionUsage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="documentationDocumentedElement" label="documentationDocumentedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is documented by this &lt;code>Documentation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="objectiveMembershipOwnedObjectiveRequirement" label="objectiveMembershipOwnedObjectiveRequirement" comment="&lt;p>The RequirementUsage that is the &lt;code>ownedMemberFeature&lt;/code> of this RequirementUsage.&lt;/p> &#xA;"/>
    <properties name="usageIsReference" label="usageIsReference" comment="&lt;p>Whether this &lt;code>Usage&lt;/code> is a referential &lt;code>Usage&lt;/code>, that is, it has &lt;code>isComposite = false&lt;/code>.&lt;p>"/>
    <properties name="usageIsVariation" label="usageIsVariation" comment="&lt;p>Whether this &lt;code>Usage&lt;/code> is for a variation point or not. If true, then all the &lt;code>memberships&lt;/code> of the &lt;code>Usage&lt;/code> must be &lt;code>VariantMemberships&lt;/code>.&lt;/p>"/>
    <properties name="usageVariant" label="usageVariant" comment="&lt;p>The &lt;code>Usages&lt;/code> which represent the variants of this &lt;code>Usage&lt;/code> as a variation point &lt;code>Usage&lt;/code>, if &lt;code>isVariation = true&lt;/code>. If &lt;code>isVariation = false&lt;/code>, then there must be no &lt;code>variants&lt;/code>.&lt;/p>"/>
    <properties name="usageVariantMembership" label="usageVariantMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this &lt;code>Usage&lt;/code> that are &lt;code>VariantMemberships&lt;/code>. If &lt;code>isVariation = true&lt;/code>, then this must be all &lt;code>memberships&lt;/code> of the &lt;code>Usage&lt;/code>. If &lt;code>isVariation = false&lt;/code>, then &lt;code>variantMembership&lt;/code>must be empty.&lt;/p>"/>
    <properties name="usageOwningDefinition" label="usageOwningDefinition" comment="&lt;p>The &lt;code>Definition&lt;/code> that owns this &lt;code>Usage&lt;/code> (if any).&lt;/p>"/>
    <properties name="usageOwningUsage" label="usageOwningUsage" comment="&lt;p>The &lt;code>Usage&lt;/code> in which this &lt;code>Usage&lt;/code> is nested (if any).&lt;/p>"/>
    <properties name="usageNestedUsage" label="usageNestedUsage" comment="&lt;p>The &lt;code>Usages&lt;/code> that are &lt;code>ownedFeatures&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageDefinition" label="usageDefinition" comment="&lt;p>The &lt;code>Classifiers&lt;/code> that are the types of this &lt;code>Usage&lt;/code>. Nominally, these are &lt;code>Definitions&lt;/code>, but other kinds of Kernel &lt;code>Classifiers&lt;/code> are also allowed, to permit use of &lt;code>Classifiers&lt;/code> from the Kernel Model Libraries.&lt;/p>"/>
    <properties name="usageUsage" label="usageUsage" comment="&lt;p>The &lt;code>Usages&lt;/code> that are &lt;code>features&lt;/code> of this &lt;code>Usage&lt;/code> (not necessarily owned).&lt;/p>"/>
    <properties name="usageDirectedUsage" label="usageDirectedUsage" comment="&lt;p>The &lt;code>usages&lt;/code> of this &lt;code>Usage&lt;/code> that are &lt;code>directedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedReference" label="usageNestedReference" comment="&lt;p>The &lt;code>ReferenceUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedAttribute" label="usageNestedAttribute" comment="&lt;p>The code>AttributeUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedEnumeration" label="usageNestedEnumeration" comment="&lt;p>The code>EnumerationUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;p>"/>
    <properties name="usageNestedOccurrence" label="usageNestedOccurrence" comment="&lt;p>The &lt;code>OccurrenceUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedItem" label="usageNestedItem" comment="&lt;p>The &lt;code>ItemUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedPart" label="usageNestedPart" comment="&lt;p>The &lt;code>PartUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedPort" label="usageNestedPort" comment="&lt;p>The &lt;code>PortUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedConnection" label="usageNestedConnection" comment="&lt;p>The &lt;code>ConnectorAsUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>. Note that this list includes &lt;code>BindingConnectorAsUsages&lt;/code> and &lt;code>SuccessionAsUsages&lt;/code>, even though these are &lt;code>ConnectorAsUsages&lt;/code> but not &lt;code>ConnectionUsages&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedFlow" label="usageNestedFlow" comment="&lt;p>The code>FlowConnectionUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedInterface" label="usageNestedInterface" comment="&lt;p>The &lt;code>InterfaceUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedAllocation" label="usageNestedAllocation" comment="&lt;p>The &lt;code>AllocationUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="usageNestedAction" label="usageNestedAction" comment="&lt;p>The &lt;code>ActionUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedState" label="usageNestedState" comment="&lt;p>The &lt;code>StateUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedTransition" label="usageNestedTransition" comment="&lt;p>The &lt;code>TransitionUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedCalculation" label="usageNestedCalculation" comment="&lt;p>The &lt;code>CalculationUsage&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedConstraint" label="usageNestedConstraint" comment="&lt;p>The &lt;code>ConstraintUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedRequirement" label="usageNestedRequirement" comment="&lt;p>The &lt;code>RequirementUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedConcern" label="usageNestedConcern" comment="&lt;p>The &lt;code>ConcernUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedCase" label="usageNestedCase" comment="&lt;p>The &lt;code>CaseUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedAnalysisCase" label="usageNestedAnalysisCase" comment="&lt;p>The &lt;code>AnalysisCaseUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedVerificationCase" label="usageNestedVerificationCase" comment="&lt;p>The &lt;code>VerificationCaseUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedUseCase" label="usageNestedUseCase" comment="&lt;p>The &lt;code>UseCaseUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="usageNestedView" label="usageNestedView" comment="&lt;p>The &lt;code>ViewUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedViewpoint" label="usageNestedViewpoint" comment="&lt;p>The &lt;code>ViewpointUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedRendering" label="usageNestedRendering" comment="&lt;p>The &lt;code>RenderingUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this &lt;code>Usage&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="usageNestedMetadata" label="usageNestedMetadata" comment="&lt;p>The &lt;code>MetadataUsages&lt;/code> that are &lt;code>nestedUsages&lt;/code> of this of this &lt;code>Usage&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingFeatureOfType" label="typeFeaturingFeatureOfType" comment="&lt;p>The &lt;code>Feature&lt;/code> that is featured by the &lt;code>featuringType&lt;/code>. It is the &lt;code>source&lt;/code> of the &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingFeaturingType" label="typeFeaturingFeaturingType" comment="&lt;p>The &lt;code>Type&lt;/code> that features the &lt;code>featureOfType&lt;/code>. It is the &lt;code>target&lt;/code> of the &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingOwningFeatureOfType" label="typeFeaturingOwningFeatureOfType" comment="&lt;p>A &lt;code>featureOfType&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberElementId" label="membershipMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>memberElement&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberShortName" label="membershipMemberShortName" comment="&lt;p>The short name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberName" label="membershipMemberName" comment="&lt;p>The name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipVisibility" label="membershipVisibility" comment="&lt;p>Whether or not the &lt;code>Membership&lt;/code> of the &lt;code>memberElement&lt;/code> in the &lt;code>membershipOwningNamespace&lt;/code> is publicly visible outside that &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipMembershipOwningNamespace" label="membershipMembershipOwningNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> of which the &lt;code>memberElement&lt;/code> becomes a &lt;cpde>member due to this &lt;code>Membership&lt;/code>.&lt;/cpde>&lt;/p>&#xA;"/>
    <properties name="membershipMemberElement" label="membershipMemberElement" comment="&lt;p>The &lt;code>Element&lt;/code> that becomes a &lt;code>member&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this &lt;code>Membership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="dependencyClient" label="dependencyClient" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> dependent on the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>"/>
    <properties name="dependencySupplier" label="dependencySupplier" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> on which the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> depend in some respect.&lt;/p>"/>
    <properties name="behaviorStep" label="behaviorStep" comment="&lt;p>The &lt;code>Steps&lt;/code> that make up this &lt;code>Behavior&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="behaviorParameter" label="behaviorParameter" comment="&lt;p>The parameters of this &lt;code>Behavior&lt;/code>, which are defined as its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the &lt;code>Behavior&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeIsAbstract" label="typeIsAbstract" comment="&lt;p>Indicates whether instances of this &lt;code>Type&lt;/code> must also be instances of at least one of its specialized &lt;code>Types&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeIsSufficient" label="typeIsSufficient" comment="&lt;p>Whether all things that meet the classification conditions of this &lt;code>Type&lt;/code> must be classified by the &lt;code>Type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>(A &lt;code>Type&lt;/code>&amp;nbsp;gives conditions that must be met by whatever it classifies, but when &lt;code>isSufficient&lt;/code> is false, things may meet those conditions but still not be classified by the &lt;code>Type&lt;/code>. For example, a Type &lt;code>&lt;em>Car&lt;/em>&lt;/code> that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would classify as cars. However, if the &lt;code>Type&lt;/code> &lt;code>&lt;em>Car&lt;/em>&lt;/code> were sufficient, it would classify all four-wheeled things.)&lt;/p>&#xA;"/>
    <properties name="typeIsConjugated" label="typeIsConjugated" comment="&lt;p>Indicates whether this &lt;code>Type&lt;/code> has an &lt;code>ownedConjugator&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedSpecialization" label="typeOwnedSpecialization" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Specializations&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeatureMembership" label="typeOwnedFeatureMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>FeatureMemberships&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>owningType&lt;/code>. Each such &lt;code>FeatureMembership&lt;/code> identifies an &lt;code>ownedFeature&lt;/code> of the &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeature" label="typeOwnedFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>ownedFeatureMemberships&lt;/code> of this &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedEndFeature" label="typeOwnedEndFeature" comment="&lt;p>All &lt;code>endFeatures&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>ownedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeFeature" label="typeFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>featureMemberships&lt;/code> of this &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInput" label="typeInput" comment="&lt;p>All &lt;code>features&lt;/code> related to this &lt;code>Type&lt;/code> by &lt;code>FeatureMemberships&lt;/code> that have &lt;code>direction&lt;/code> &lt;code>in&lt;code> or &lt;code>inout&lt;code>.&lt;/code>&lt;/code>&lt;/code>&lt;/code>&lt;/p>&#xA;"/>
    <properties name="typeOutput" label="typeOutput" comment="&lt;p>All &lt;code>features&lt;/code> related to this &lt;code>Type&lt;/code> by &lt;code>FeatureMemberships&lt;/code> that have &lt;code>direction&lt;/code> &lt;code>out&lt;code> or &lt;code>inout&lt;code>.&lt;/code>&lt;/code>&lt;/code>&lt;/code>&lt;/p>&#xA;"/>
    <properties name="typeInheritedMembership" label="typeInheritedMembership" comment="&lt;p>All &lt;code>Memberships&lt;/code> inherited by this &lt;code>Type&lt;/code> via &lt;code>Specialization&lt;/code> or &lt;code>Conjugation&lt;/code>. These are included in the derived union for the &lt;code>memberships&lt;/code> of the &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeEndFeature" label="typeEndFeature" comment="&lt;p>All &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> with &lt;code>isEnd = true&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedConjugator" label="typeOwnedConjugator" comment="&lt;p>A &lt;code>Conjugation&lt;/code> owned by this &lt;code>Type&lt;/code> for which the &lt;code>Type&lt;/code> is the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedFeature" label="typeInheritedFeature" comment="&lt;p>All the &lt;code>memberFeatures&lt;/code> of the &lt;code>inheritedMemberships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>FeatureMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeMultiplicity" label="typeMultiplicity" comment="&lt;p>An &lt;code>ownedMember&lt;/code> of this &lt;code>Type&lt;/code> that is a &lt;code>Multiplicity&lt;/code>, which constraints the cardinality of the &lt;code>Type&lt;/code>. If there is no such &lt;code>ownedMember&lt;/code>, then the cardinality of this &lt;code>Type&lt;/code> is constrained by all the &lt;code>Multiplicity&lt;/code> constraints applicable to any direct supertypes.&lt;/p>&#xA;&#xA;&lt;p>&amp;nbsp;&lt;/p>&#xA;"/>
    <properties name="typeUnioningType" label="typeUnioningType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>unioningTypes&lt;/code> are asserted to be the same as those of all the &lt;code>unioningTypes&lt;/code> together, which are the &lt;code>Types&lt;/code> derived from the &lt;code>unioningType&lt;/code> of the &lt;code>ownedUnionings&lt;/code> of this &lt;code>Type&lt;/code>. For example, a &lt;code>Classifier&lt;/code> for people might be the union of &lt;code>Classifiers&lt;/code> for all the sexes. Similarly, a feature for people&amp;#39;s children might be the union of features dividing them in the same ways as people in general.&lt;/p>&#xA;"/>
    <properties name="typeOwnedIntersecting" label="typeOwnedIntersecting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Intersectings&lt;/code>, have the &lt;code>Type&lt;/code> as their &lt;code>typeIntersected&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeIntersectingType" label="typeIntersectingType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>intersectingTypes&lt;/code> are asserted to be those in common among the &lt;code>intersectingTypes&lt;/code>, which are the &lt;code>Types&lt;/code> derived from the &lt;code>intersectingType&lt;/code> of the &lt;code>ownedIntersectings&lt;/code> of this &lt;code>Type&lt;/code>. For example, a &lt;code>Classifier&lt;/code> might be an intersection of &lt;code>Classifiers&lt;/code> for people of a particular sex and of a particular nationality. Similarly, a feature for people&amp;#39;s children of a particular sex might be the intersection of a &lt;code>Feature&lt;/code> for their children and a &lt;code>Classifier&lt;/code> for people of that sex (because the interpretations of the children &lt;code>Feature&lt;/code> that identify those of that sex are also interpretations of the Classifier for that sex).&lt;/p>&#xA;"/>
    <properties name="typeOwnedUnioning" label="typeOwnedUnioning" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Unionings&lt;/code>, having the &lt;code>Type&lt;/code> as their &lt;code>typeUnioned&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedDisjoining" label="typeOwnedDisjoining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Disjoinings&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>typeDisjoined&lt;/code> &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeFeatureMembership" label="typeFeatureMembership" comment="&lt;p>The &lt;code>FeatureMemberships&lt;/code> for &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code>, which include all &lt;code>ownedFeatureMemberships&lt;/code> and those &lt;code>inheritedMemberships&lt;/code> that are &lt;code>FeatureMemberships&lt;/code> (but does &lt;em>not&lt;/em> include any &lt;code>importedMemberships&lt;/code>).&lt;/p>&#xA;"/>
    <properties name="typeDifferencingType" label="typeDifferencingType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>differencingTypes&lt;/code> are asserted to be those of the first of those &lt;code>Types&lt;/code>, but not including those of the remaining &lt;code>Types&lt;/code>. For example, a &lt;code>Classifier&lt;/code> might be the difference of a &lt;code>Classifier&lt;/code> for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a &lt;code>Classifier&lt;/code> for people of a particular sex, identifying their children not of that sex (because the interpretations of the children &lt;code>Feature&lt;/code> that identify those of that sex are also interpretations of the &lt;code>Classifier&lt;/code> for that sex).&lt;/p>&#xA;"/>
    <properties name="typeOwnedDifferencing" label="typeOwnedDifferencing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Differencings&lt;/code>, having this &lt;code>Type&lt;/code> as their &lt;code>typeDifferenced&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeDirectedFeature" label="typeDirectedFeature" comment="&lt;p>The &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> that have a non-null &lt;code>direction&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureChainingChainingFeature" label="featureChainingChainingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> whose values partly determine values of &lt;code>featureChained&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureChainingFeatureChained" label="featureChainingFeatureChained" comment="&lt;p>The &lt;code>Feature&lt;/code> whose values are partly determined by values of the &lt;code>chainingFeature&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="specializationGeneral" label="specializationGeneral" comment="&lt;p>A &lt;code>Type&lt;/code> with a superset of all instances of the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code>, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationSpecific" label="specializationSpecific" comment="&lt;p>A &lt;code>Type&lt;/code> with a subset of all instances of the &lt;code>general&lt;/code> &lt;code>Type&lt;/code>, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationOwningType" label="specializationOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> of this &lt;code>Specialization&lt;/code> and owns it as its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="conjugatedPortTypingPortDefinition" label="conjugatedPortTypingPortDefinition" comment="&lt;p>The &lt;code>originalPortDefinition&lt;/code> of the &lt;code>conjugatedPortDefinition&lt;/code> of this &lt;code>ConjugatedPortTyping&lt;/code>.&lt;/p>"/>
    <properties name="conjugatedPortTypingConjugatedPortDefinition" label="conjugatedPortTypingConjugatedPortDefinition" comment="&lt;p>The &lt;code>type&lt;/code> of this &lt;code>ConjugatedPortTyping&lt;/code> considered as a &lt;code>FeatureTyping&lt;/code>, which must be a &lt;code>ConjugatedPortDefinition&lt;/code>.&lt;/p>&#xA;"/>
  </vocabularies>
  <vocabularies namespaceURI="https://www.omg.org/spec/KerML/20230201/vocab#" label="KerML Vocabulary" preferredNamespacePrefix="kerml_vocab">
    <classes name="MembershipImport" label="MembershipImport" comment="&lt;p>A &lt;code>MembershipImport&lt;/code> is an &lt;code>Import&lt;/code> that imports its &lt;code>importedMembership&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isRecursive = true&lt;/code> and the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code> is a &lt;code>Namespace&lt;/code>, then the equivalent of a recursive &lt;code>NamespaceImport&lt;/code> is also performed on that &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;importedElement = importedMembership.memberElement"/>
    <classes name="Import" label="Import" comment="&lt;p>An &lt;code>Import&lt;/code> is an &lt;code>Relationship&lt;/code> between its &lt;code>importOwningNamespace&lt;/code> and either a &lt;code>Membership&lt;/code> (for a &lt;code>MembershipImport&lt;/code>) or another &lt;code>Namespace&lt;/code> (for a &lt;code>NamespaceImport&lt;/code>), which determines a set of &lt;code>Memberships&lt;/code> that become &lt;code>importedMemberships&lt;/code> of the &lt;code>importOwningNamespace&lt;/code>. If &lt;code>isImportAll = false&lt;/code> (the default), then only public &lt;code>Memberships&lt;/code> are considered &amp;quot;visible&amp;quot;. If &lt;code>isImportAll = true&lt;/code>, then all &lt;code>Memberships&lt;/code> are considered &amp;quot;visible&amp;quot;, regardless of their declared &lt;code>visibility&lt;/code>. If &lt;code>isRecursive = true&lt;/code>, then visible &lt;code>Memberships&lt;/code> are also recursively imported from owned sub-&lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <classes name="Relationship" label="Relationship" comment="&lt;p>A &lt;code>Relationship&lt;/code> is an &lt;code>Element&lt;/code> that relates other &lt;code>Element&lt;/code>. Some of its &lt;code>relatedElements&lt;/code> may be owned, in which case those &lt;code>ownedRelatedElements&lt;/code> will be deleted from a model if their &lt;code>owningRelationship&lt;/code> is. A &lt;code>Relationship&lt;/code> may also be owned by another &lt;code>Element&lt;/code>, in which case the &lt;code>ownedRelatedElements&lt;/code> of the &lt;code>Relationship&lt;/code> are also considered to be transitively owned by the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The &lt;code>relatedElements&lt;/code> of a &lt;code>Relationship&lt;/code> are divided into &lt;code>source&lt;/code> and &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. The &lt;code>Relationship&lt;/code> is considered to be directed from the &lt;code>source&lt;/code> to the &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>. An undirected &lt;code>Relationship&lt;/code> may have either all &lt;code>source&lt;/code> or all &lt;code>target&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &amp;quot;relationship &lt;code>Element&lt;/code>&amp;quot; in the abstract syntax is generically any &lt;code>Element&lt;/code> that is an instance of either &lt;code>Relationship&lt;/code> or a direct or indirect specialization of &lt;code>Relationship&lt;/code>. Any other kind of &lt;code>Element&lt;/code> is a &amp;quot;non-relationship &lt;code>Element&lt;/code>&amp;quot;. It is a convention of that non-relationship &lt;code>Elements&lt;/code> are &lt;em>only&lt;/em> related via reified relationship &lt;code>Elements&lt;/code>. Any meta-associations directly between non-relationship &lt;code>Elements&lt;/code> must be derived from underlying reified &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;&#xA;relatedElement = source->union(target)"/>
    <classes name="Element" label="Element" comment="&lt;p>An &lt;code>Element&lt;/code> is a constituent of a model that is uniquely identified relative to all other &lt;code>Elements&lt;/code>. It can have &lt;code>Relationships&lt;/code> with other &lt;code>Elements&lt;/code>. Some of these &lt;code>Relationships&lt;/code> might imply ownership of other &lt;code>Elements&lt;/code>, which means that if an &lt;code>Element&lt;/code> is deleted from a model, then so are all the &lt;code>Elements&lt;/code> that it owns.&lt;/p>&#xA;&#xA;ownedElement = ownedRelationship.ownedRelatedElement&#xA;owner = owningRelationship.owningRelatedElement&#xA;qualifiedName =&#xA;    if owningNamespace = null then null&#xA;    else if owningNamespace.owner = null then escapedName()&#xA;    else if owningNamespace.qualifiedName = null or &#xA;            escapedName() = null then null&#xA;    else owningNamespace.qualifiedName + '::' + escapedName()&#xA;    endif endif endif&#xA;documentation = ownedElement->selectByKind(Documentation)&#xA;ownedAnnotation = ownedRelationship->&#xA;    selectByKind(Annotation)->&#xA;    select(a | a.annotatedElement = self)&#xA;name = effectiveName()&#xA;ownedRelationship->exists(isImplied) implies isImpliedIncluded&#xA;isLibraryElement = libraryNamespace() &lt;> null&#xA;&#xA;shortName = effectiveShortName()&#xA;owningNamespace =&#xA;    if owningMembership = null then null&#xA;    else owningMembership.membershipOwningNamespace&#xA;    endif&#xA;textualRepresentation = ownedElement->selectByKind(TextualRepresentation)"/>
    <classes name="OwningMembership" label="OwningMembership" comment="&lt;p>An &lt;code>OwningMembership&lt;/code> is a &lt;code>Membership&lt;/code> that owns its &lt;code>memberElement&lt;/code> as a &lt;code>ownedRelatedElement&lt;/code>. The &lt;code>ownedMemberElement&lt;/code> becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;&#xA;ownedMemberName = ownedMemberElement.name&#xA;ownedMemberShortName = ownedMemberElement.shortName"/>
    <classes name="Membership" label="Membership" comment="&lt;p>A &lt;code>Membership&lt;/code> is a &lt;code>Relationship&lt;/code> between a &lt;code>Namespace&lt;/code> and an &lt;code>Element&lt;/code> that indicates the &lt;code>Element&lt;/code> is a &lt;code>member&lt;/code> of (i.e., is contained in) the Namespace. Any &lt;code>memberNames&lt;/code> specify how the &lt;code>memberElement&lt;/code> is identified in the &lt;code>Namespace&lt;/code> and the &lt;code>visibility&lt;/code> specifies whether or not the &lt;code>memberElement&lt;/code> is publicly visible from outside the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If a &lt;code>Membership&lt;/code> is an &lt;code>OwningMembership&lt;/code>, then it owns its &lt;code>memberElement&lt;/code>, which becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code>. Otherwise, the &lt;code>memberNames&lt;/code> of a &lt;code>Membership&lt;/code> are effectively aliases within the &lt;code>membershipOwningNamespace&lt;/code> for an &lt;code>Element&lt;/code> with a separate &lt;code>OwningMembership&lt;/code> in the same or a different &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&amp;nbsp;&lt;/p>&#xA;&#xA;memberElementId = memberElement.elementId"/>
    <classes name="Namespace" label="Namespace" comment="&lt;p>A &lt;code>Namespace&lt;/code> is an &lt;code>Element&lt;/code> that contains other &lt;code>Elements&lt;/code>, known as its &lt;code>members&lt;/code>, via &lt;code>Membership&lt;/code> &lt;code>Relationships&lt;/code> with those &lt;code>Elements&lt;/code>. The &lt;code>members&lt;/code> of a &lt;code>Namespace&lt;/code> may be owned by the &lt;code>Namespace&lt;/code>, aliased in the &lt;code>Namespace&lt;/code>, or imported into the &lt;code>Namespace&lt;/code> via &lt;code>Import&lt;/code> &lt;code>Relationships&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Namespace&lt;/code> can provide names for its &lt;code>members&lt;/code> via the &lt;code>memberNames&lt;/code> and &lt;code>memberShortNames&lt;/code> specified by the &lt;code>Memberships&lt;/code> in the &lt;code>Namespace&lt;/code>. If a &lt;code>Membership&lt;/code> specifies a &lt;code>memberName&lt;/code> and/or &lt;code>memberShortName&lt;/code>, then those are names of the corresponding &lt;code>memberElement&lt;/code> relative to the &lt;code>Namespace&lt;/code>. For an &lt;code>OwningMembership&lt;/code>, the &lt;code>owningMemberName&lt;/code> and &lt;code>owningMemberShortName&lt;/code> are given by the &lt;code>Element&lt;/code> &lt;code>name&lt;/code> and &lt;code>shortName&lt;/code>. Note that the same &lt;code>Element&lt;/code> may be the &lt;code>memberElement&lt;/code> of multiple &lt;code>Memberships&lt;/code> in a &lt;code>Namespace&lt;/code> (though it may be owned at most once), each of which may define a separate alias for the &lt;code>Element&lt;/code> relative to the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;&#xA;membership->forAll(m1 | &#xA;    membership->forAll(m2 | &#xA;        m1 &lt;> m2 implies m1.isDistinguishableFrom(m2)))&#xA;member = membership.memberElement&#xA;ownedMember = ownedMembership->selectByKind(OwningMembership).ownedMemberElement&#xA;importedMembership = importedMemberships(Set{})&#xA;ownedImport = ownedRelationship->selectByKind(Import)&#xA;ownedMembership = ownedRelationship->selectByKind(Membership)"/>
    <classes name="Documentation" label="Documentation" comment="&lt;p>&lt;code>Documentation&lt;/code> is a &lt;code>Comment&lt;/code> that specifically documents a &lt;code>documentedElement&lt;/code>, which must be its &lt;code>owner&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Comment" label="Comment" comment="&lt;p>A &lt;code>Comment&lt;/code> is an &lt;code>AnnotatingElement&lt;/code> whose &lt;code>body&lt;/code> in some way describes its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="AnnotatingElement" label="AnnotatingElement" comment="&lt;p>An &lt;code>AnnotatingElement&lt;/code> is an &lt;code>Element&lt;/code> that provides additional description of or metadata on some other &lt;code>Element&lt;/code>. An &lt;code>AnnotatingElement&lt;/code> is either attached to its &lt;code>annotatedElements&lt;/code> by &lt;code>Annotation&lt;/code> &lt;code>Relationships&lt;/code>, or it implicitly annotates its &lt;code>owningNamespace&lt;/code>.&lt;/p>&#xA;&#xA;annotatedElement = &#xA; if annotation->notEmpty() then annotation.annotatedElement&#xA; else Sequence{owningNamespace} endif&#xA;ownedAnnotatingRelationship = ownedRelationship->&#xA;    selectByKind(Annotation)->&#xA;    select(a | a.annotatingElement = self)"/>
    <classes name="Annotation" label="Annotation" comment="&lt;p>An &lt;code>Annotation&lt;/code> is a Relationship between an &lt;code>AnnotatingElement&lt;/code> and the &lt;code>Element&lt;/code> that is annotated by that &lt;code>AnnotatingElement&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="TextualRepresentation" label="TextualRepresentation" comment="&lt;p>A &lt;code>TextualRepresentation&lt;/code> is an &lt;code>AnnotatingElement&lt;/code> whose &lt;code>body&lt;/code> represents the &lt;code>representedElement&lt;/code> in a given &lt;code>language&lt;/code>. The &lt;code>representedElement&lt;/code> must be the &lt;code>owner&lt;/code> of the &lt;code>TextualRepresentation&lt;/code>. The named &lt;code>language&lt;/code> can be a natural language, in which case the &lt;code>body&lt;/code> is an informal representation, or an artificial language, in which case the &lt;code>body&lt;/code> is expected to be a formal, machine-parsable representation.&lt;/p>&#xA;&#xA;&lt;p>If the named &lt;code>language&lt;/code> of a &lt;code>TextualRepresentation&lt;/code> is machine-parsable, then the &lt;code>body&lt;/code> text should be legal input text as defined for that &lt;code>language&lt;/code>. The interpretation of the named language string shall be case insensitive. The following &lt;code>language&lt;/code> names are defined to correspond to the given standard languages:&lt;/p>&#xA;&#xA;&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; width=&quot;498&quot;>&#xA;&#x9;&lt;thead>&#xA;&#x9;&lt;/thead>&#xA;&#x9;&lt;tbody>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>kerml&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Kernel Modeling Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>ocl&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Object Constraint Language&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;text-align: center; width: 154px;&quot;>&lt;code>alf&lt;/code>&lt;/td>&#xA;&#x9;&#x9;&#x9;&lt;td style=&quot;width: 332px;&quot;>Action Language for fUML&lt;/td>&#xA;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&lt;/tbody>&#xA;&lt;/table>&#xA;&#xA;&lt;p>Other specifications may define specific &lt;code>language&lt;/code> strings, other than those shown above, to be used to indicate the use of languages from those specifications in KerML &lt;code>TextualRepresentation&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>If the &lt;code>language&lt;/code> of a &lt;code>TextualRepresentation&lt;/code> is &amp;quot;&lt;code>kerml&lt;/code>&amp;quot;, then the &lt;code>body&lt;/code> text shall be a legal representation of the &lt;code>representedElement&lt;/code> in the KerML textual concrete syntax. A conforming tool can use such a &lt;code>TextualRepresentation&lt;/code> &lt;code>Annotation&lt;/code> to record the original KerML concrete syntax text from which an &lt;code>Element&lt;/code> was parsed. In this case, it is a tool responsibility to ensure that the &lt;code>body&lt;/code> of the &lt;code>TextualRepresentation&lt;/code> remains correct (or the Annotation is removed) if the annotated &lt;code>Element&lt;/code> changes other than by re-parsing the &lt;code>body&lt;/code> text.&lt;/p>&#xA;&#xA;&lt;p>An &lt;code>Element&lt;/code> with a &lt;code>TextualRepresentation&lt;/code> in a language other than KerML is essentially a semantically &amp;quot;opaque&amp;quot; &lt;code>Element&lt;/code> specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.&lt;/p>&#xA;"/>
    <classes name="NamespaceImport" label="NamespaceImport" comment="&lt;p>A &lt;code>NamespaceImport&lt;/code> is an Import that imports &lt;code>Memberships&lt;/code> from its &lt;code>importedNamespace&lt;/code> into the &lt;code>importOwningNamespace&lt;/code>. If &lt;code> isRecursive = false&lt;/code>, then only the visible &lt;code>Memberships&lt;/code> of the &lt;code>importedNamespace&lt;/code> are imported. If &lt;code> isRecursive = true&lt;/code>, then, in addition, &lt;code>Memberships&lt;/code> are recursively imported from any &lt;code>ownedMembers&lt;/code> of the &lt;code>importedNamespace&lt;/code> that are &lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;importedElement = importedNamespace"/>
    <classes name="Dependency" label="Dependency" comment="&lt;p>A &lt;code>Dependency&lt;/code> is a &lt;code>Relationship&lt;/code> that indicates that one or more &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> require one more &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> for their complete specification. In general, this means that a change to one of the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code> may necessitate a change to, or re-specification of, the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>Note that a &lt;code>Dependency&lt;/code> is entirely a model-level &lt;code>Relationship&lt;/code>, without instance-level semantics.&lt;/p>"/>
    <classes name="FeatureTyping" label="FeatureTyping" comment="&lt;p>&lt;code>FeatureTyping&lt;/code> is &lt;code>Specialization&lt;/code> in which the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> is a &lt;code>Feature&lt;/code>. This means the set of instances of the (specific) &lt;code>typedFeature&lt;/code> is a subset of the set of instances of the (general) &lt;code>type&lt;/code>. In the simplest case, the &lt;code>type&lt;/code> is a &lt;code>Classifier&lt;/code>, whereupon the &lt;code>typedFeature&lt;/code> has values that are instances of the &lt;code>Classifier&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Specialization" label="Specialization" comment="&lt;p>&lt;code>Specialization&lt;/code> is a &lt;code>Relationship&lt;/code> between two &lt;code>Types&lt;/code> that requires all instances of the &lt;code>specific&lt;/code> type to also be instances of the &lt;code>general&lt;/code> Type (i.e., the set of instances of the &lt;code>specific&lt;/code> Type is a &lt;em>subset&lt;/em> of those of the &lt;code>general&lt;/code> Type, which might be the same set).&lt;/p>&#xA;&#xA;not specific.isConjugated"/>
    <classes name="Type" label="Type" comment="&lt;p>A &lt;code>Type&lt;/code> is a &lt;code>Namespace&lt;/code> that is the most general kind of &lt;code>Element&lt;/code> supporting the semantics of classification. A &lt;code>Type&lt;/code> may be a &lt;code>Classifier&lt;/code> or a &lt;code>Feature&lt;/code>, defining conditions on what is classified by the &lt;code>Type&lt;/code> (see also the description of &lt;code>isSufficient&lt;/code>).&lt;/p>&#xA;&#xA;ownedSpecialization = ownedRelationship->selectByKind(Specialization)->&#xA;    select(s | s.special = self)&#xA;    &#xA;multiplicity = &#xA;    let ownedMultiplicities: Sequence(Multiplicity) =&#xA;        ownedMember->selectByKind(Multiplicity) in&#xA;    if ownedMultiplicities->isEmpty() then null&#xA;    else ownedMultiplicities->first()&#xA;    endif&#xA;ownedFeatureMembership = ownedRelationship->selectByKind(FeatureMembership)&#xA;ownedConjugator =&#xA;    let ownedConjugators: Sequence(Conjugator) = &#xA;        ownedRelationship->selectByKind(Conjugation) in&#xA;    if ownedConjugators->isEmpty() then null &#xA;    else ownedConjugators->at(1) endif&#xA;output = feature->select(f | &#xA;    let direction: FeatureDirectionKind = directionOf(f) in&#xA;    direction = FeatureDirectionKind::out or&#xA;    direction = FeatureDirectionKind::inout)&#xA;input = feature->select(f | &#xA;    let direction: FeatureDirectionKind = directionOf(f) in&#xA;    direction = FeatureDirectionKind::_'in' or&#xA;    direction = FeatureDirectionKind::inout)&#xA;inheritedMembership = inheritedMemberships(Set{})&#xA;specializesFromLibrary('Base::Anything')&#xA;directedFeature = feature->select(f | directionOf(f) &lt;> null)&#xA;feature = featureMembership.ownedMemberFeature&#xA;featureMembership = ownedFeatureMembership->union(&#xA;    inheritedMembership->selectByKind(FeatureMembership))&#xA;ownedFeature = ownedFeatureMembership.ownedMemberFeature&#xA;differencingType = ownedDifferencing.differencingType&#xA;intersectingType->excludes(self)&#xA;differencingType->excludes(self)&#xA;unioningType = ownedUnioning.unioningType&#xA;unioningType->excludes(self)&#xA;intersectingType = ownedIntersecting.intersectingType&#xA;ownedRelationship->selectByKind(Conjugation)->size() &lt;= 1&#xA;ownedMember->selectByKind(Multiplicity)->size() &lt;= 1&#xA;endFeature = feature->select(isEnd)&#xA;ownedDisjoining =&#xA;    ownedRelationship->selectByKind(Disjoining)&#xA;ownedUnioning =&#xA;    ownedRelationship->selectByKind(Unioning)&#xA;ownedRelationship->selectByKind(Intersecting)&#xA;ownedDifferencing =&#xA;    ownedRelationship->selectByKind(Differencing)&#xA;ownedEndFeature = ownedFeature->select(isEnd)&#xA;inheritedFeature = inheritedMemberships->&#xA;    selectByKind(FeatureMembership).memberFeature&#xA;ownedUnioning->size() &lt;> 1&#xA;ownedIntersecting->size() &lt;> 1&#xA;ownedDifferencing->size() &lt;> 1"/>
    <classes name="FeatureMembership" label="FeatureMembership" comment="&lt;p>A &lt;code>FeatureMembership&lt;/code> is an &lt;code>OwningMembership&lt;/code> between a &lt;code>Feature&lt;/code> in an &lt;code>owningType&lt;/code> that is also a &lt;code>Featuring&lt;/code> &lt;code>Relationship&lt;code> between the &lt;code>Feature&lt;/code> and the &lt;code>Type&lt;/code>, in which the &lt;code>featuringType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featureOfType&lt;/code> is the &lt;code>target&lt;/code>. A &lt;code>FeatureMembership&lt;/code> is always owned by its &lt;code>owningType&lt;/code>, which is the &lt;code>featuringType&lt;/code> for the &lt;code>FeatureMembership&lt;/code> considered as a &lt;code>Featuring&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Featuring" label="Featuring" comment="&lt;p>&lt;code>Featuring&lt;/code> is a &lt;code>Relationship&lt;/code> between a &lt;code>Type&lt;/code> and a &lt;code>Feature&lt;/code> that is featured by that &lt;code>Type&lt;/code>. It asserts that every instance in the domain of the &lt;code>feature&lt;/code> must be classified by the &lt;code>type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;code>Featuring&lt;/code> is abstract and does not commit to which of &lt;code>feature&lt;/code> or &lt;code>type&lt;/code> are the &lt;code>source&lt;/code> or &lt;code>target&lt;/code> of the &lt;code>Relationship&lt;/code>. This commitment is made in the subclasses of &lt;code>Featuring&lt;/code>, &lt;code>TypeFeaturing&lt;/code> and &lt;code>FeatureMembership&lt;/code>, which have opposite directions.&lt;/p>"/>
    <classes name="Feature" label="Feature" comment="&lt;p>A &lt;code>Feature&lt;/code> is a &lt;code>Type&lt;/code> that classifies relations between multiple things (in the universe). The domain of the relation is the intersection of the &lt;code>featuringTypes&lt;/code> of the &lt;code>Feature&lt;/code>. (The domain of a &lt;code>Feature&lt;/code> with no &lt;code>featuringTyps&lt;/code> is implicitly the most general &lt;code>Type&lt;/code> &lt;em>&lt;code>Base::Anything&lt;/code>&lt;/em> from the Kernel Semantic Library.) The co-domain of the relation is the intersection of the &lt;code>types&lt;/code> of the &lt;code>Feature&lt;/code>.&#xA;&#xA;&lt;p>In the simplest cases, the &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> are &lt;code>Classifiers&lt;/code> and the &lt;code>Feature&lt;/code> relates two things, one from the domain and one from the range. Examples include cars paired with wheels, people paired with other people, and cars paired with numbers representing the car length.&lt;/p>&#xA;&#xA;&lt;p>Since &lt;code>Features&lt;/code> are &lt;code>Types&lt;/code>, their &lt;code>featuringTypes&lt;/code> and &lt;code>types&lt;/code> can be &lt;code>Features&lt;/code>. In this case, the &lt;code>Feature&lt;/code> effectively classifies relations between relations, which can be interpreted as the sequence of things related by the domain &lt;code>Feature&lt;/code> concatenated with the sequence of things related by the co-domain &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The &lt;em>values&lt;/em> of a &lt;code>Feature&lt;/code> for a given instance of its domain are all the instances of its co-domain that are related to that domain instance by the &lt;code>Feature&lt;/code>. The values of a &lt;code>Feature&lt;/code> with &lt;code>chainingFeatures&lt;/code> are the same as values of the last &lt;code>Feature&lt;/code> in the chain, which can be found by starting with values of the first &lt;code>Feature&lt;/code>, then using those values as domain instances to obtain valus of the second &lt;code>Feature&lt;/code>, and so on, to values of the last &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;ownedRedefinition = ownedSubsetting->selectByKind(Redefinition)&#xA;ownedTypeFeaturing = ownedRelationship->selectByKind(TypeFeaturing)->&#xA;    select(tf | tf.featureOfType = self)&#xA;ownedSubsetting = ownedSpecialization->selectByKind(Subsetting)&#xA;ownedTyping = ownedGeneralization->selectByKind(FeatureTyping)&#xA;type = &#xA;    let types : OrderedSet(Types) = OrderedSet{self}->&#xA;        -- Note: The closure operation automatically handles circular relationships.&#xA;        closure(typingFeatures()).typing.type->asOrderedSet() in&#xA;    types->reject(t1 | types->exist(t2 | t2 &lt;> t1 and t2.specializes(t1)))&#xA;multiplicity &lt;> null implies multiplicity.featuringType = featuringType &#xA;specializesFromLibrary('Base::things')&#xA;chainingFeature->excludes(self)&#xA;ownedFeatureChaining = ownedRelationship->selectByKind(FeatureChaining)&#xA;chainingFeature = ownedFeatureChaining.chainingFeature&#xA;chainingFeature->size() &lt;> 1&#xA;isEnd and owningType &lt;> null implies&#xA;    let i : Integer = &#xA;        owningType.ownedEndFeature->indexOf(self) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;             supertype.endFeature->size() >= i implies&#xA;                redefines(supertype.endFeature->at(i))&#xA;direction = null and&#xA;ownedSpecializations->forAll(isImplied) implies&#xA;    ownedMembership->&#xA;        selectByKind(FeatureValue)->&#xA;        forAll(fv | specializes(fv.value.result))&#xA;isEnd and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Association) or&#xA; owningType.oclIsKindOf(Connector)) implies&#xA;    specializesFromLibrary('Links::Link::participant')&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Structure)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.type->includes(oclIsKindOf(Structure))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(FeatureReferenceExpression) and&#xA;self = owningType.oclAsType(FeatureReferenceExpression).result implies&#xA;    specializes(owningType.oclAsType(FeatureReferenceExpression).referent)&#xA;&#xA;ownedTyping.type->exists(selectByKind(Class)) implies&#xA;    specializesFromLibrary('Occurrences::occurrences')&#xA;isComposite and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')&#xA;ownedTyping.type->exists(selectByKind(DataType)) implies&#xA;    specializesFromLibrary('Base::dataValues')&#xA;owningType &lt;> null and&#xA;owningType.oclIsKindOf(ItemFlowEnd) and&#xA;owningType.ownedFeature->at(1) = self implies&#xA;    let flowType : Type = owningType.owningType in&#xA;    flowType &lt;> null implies&#xA;        let i : Integer = &#xA;            flowType.ownedFeature.indexOf(owningType) in&#xA;        (i = 1 implies &#xA;            redefinesFromLibrary('Transfers::Transfer::source::sourceOutput')) and&#xA;        (i = 2 implies&#xA;            redefinesFromLibrary('Transfers::Transfer::source::targetInput'))&#xA;                 &#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Behavior) or&#xA; owningType.oclIsKindOf(Step)) implies&#xA;    let i : Integer = &#xA;        owningType.ownedFeature->select(direction &lt;> null) in&#xA;    owningType.ownedSpecialization.general->&#xA;        forAll(supertype |&#xA;            let ownedParameters : Sequence(Feature) = &#xA;                supertype.ownedFeature->select(direction &lt;> null) in&#xA;            ownedParameters->size() >= i implies&#xA;                redefines(ownedParameters->at(i))&#xA;ownedTyping.type->exists(selectByKind(Structure)) implies&#xA;    specializesFromLibary('Objects::objects')&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Function) and&#xA;    self = owningType.oclAsType(Function).result or&#xA; owningType.oclIsKindOf(Expression) and&#xA;    self = owningType.oclAsType(Expression).result) implies&#xA;    owningType.ownedSpecialization.general->&#xA;        select(oclIsKindOf(Function) or oclIsKindOf(Expression))->&#xA;        forAll(supertype |&#xA;            redefines(&#xA;                if superType.oclIsKindOf(Function) then&#xA;                    superType.oclAsType(Function).result&#xA;                else&#xA;                    superType.oclAsType(Expression).result&#xA;                endif)&#xA;ownedFeatureInverting = ownedRelationship->selectByKind(FeatureInverting)->&#xA;    select(fi | fi.featureInverted = self)&#xA;featuringType =&#xA;    let featuringTypes : OrderedSet(Type) = &#xA;        featuring.type->asOrderedSet() in&#xA;    if chainingFeature->isEmpty() then featuringTypes&#xA;    else&#xA;        featuringTypes->&#xA;            union(chainingFeature->first().featuringType)->&#xA;            asOrderedSet()&#xA;    endif&#xA;ownedReferenceSubsetting =&#xA;    let referenceSubsettings : OrderedSet(ReferenceSubsetting) =&#xA;        ownedSubsetting->selectByKind(ReferenceSubsetting) in&#xA;    if referenceSubsettings->isEmpty() then null&#xA;    else referenceSubsettings->first() endif&#xA;ownedSubsetting->selectByKind(ReferenceSubsetting)->size() &lt;= 1&#xA;Sequence{1..chainingFeature->size() - 1}->forAll(i |&#xA;    chainingFeature->at(i + 1).featuringType->forAll(t | &#xA;        chainingFeature->at(i).specializes(t)))&#xA;&#xA;isPortion and&#xA;ownedTyping.type->includes(oclIsKindOf(Class)) and&#xA;owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Class) or&#xA; owningType.oclIsKindOf(Feature) and&#xA;    owningType.oclAsType(Feature).type->&#xA;        exists(oclIsKindOf(Class))) implies&#xA;    specializesFromLibrary('Occurrence::Occurrence::portions')"/>
    <classes name="Redefinition" label="Redefinition" comment="&lt;p>&lt;code>Redefinition&lt;/code> is a kind of &lt;code>Subsetting&lt;/code> that requires the &lt;code>redefinedFeature&lt;/code> and the &lt;code>redefiningFeature&lt;/code> to have the same values (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>). This means any restrictions on the &lt;code>redefiningFeature&lt;/code>, such as &lt;code>type&lt;/code> or &lt;code>multiplicity&lt;/code>, also apply to the &lt;code>redefinedFeature&lt;/code> (on each instance of the domain of the &lt;code>redefiningFeature&lt;/code>), and vice versa. The &lt;code>redefinedFeature&lt;/code> might have values for instances of the domain of the &lt;code>redefiningFeature&lt;/code>, but only as instances of the domain of the &lt;code>redefinedFeature&lt;/code> that happen to also be instances of the domain of the &lt;code>redefiningFeature&lt;/code>. This is supported by the constraints inherited from &lt;code>Subsetting&lt;/code> on the domains of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code>. However, these constraints are narrowed for &lt;code>Redefinition&lt;/code> to require the &lt;code>owningTypes&lt;/code> of the &lt;code>redefiningFeature&lt;/code> and &lt;code>redefinedFeature&lt;/code> to be different and the &lt;code>redefinedFeature&lt;/code> to not be inherited into the &lt;code>owningNamespace&lt;/code> of the &lt;code>redefiningFeature&lt;/code>.This enables the &lt;code>redefiningFeature&lt;/code> to have the same name as the &lt;code>redefinedFeature&lt;/code>, if desired.&lt;/p>&#xA;&#xA;let anythingType: Type =&#xA;    redefiningFeature.resolveGlobal('Base::Anything').modelElement.oclAsType(Type) in &#xA;-- Including &quot;Anything&quot; accounts for implicit featuringType of Features&#xA;-- with no explicit featuringType.&#xA;let redefiningFeaturingTypes: Set(Type) =&#xA;    redefiningFeature.featuringTypes->asSet()->including(anythingType) in&#xA;let redefinedFeaturingTypes: Set(Type) =&#xA;    redefinedFeature.featuringTypes->asSet()->including(anythingType) in&#xA;redefiningFeaturingTypes &lt;> redefinedFeaturingType&#xA;featuringType->forAll(t |&#xA;    let direction : FeatureDirectionKind = t.directionOf(redefinedFeature) in&#xA;    ((direction = FeatureDirectionKind::_'in' or &#xA;      direction = FeatureDirectionKind::out) implies&#xA;         redefiningFeature.direction = direction)&#xA;    and &#xA;    (direction = FeatureDirectionKind::inout implies&#xA;        redefiningFeature.direction &lt;> null))"/>
    <classes name="Subsetting" label="Subsetting" comment="&lt;p>&lt;code>Subsetting&lt;/code> is &lt;code>Specialization&lt;/code> in which the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> &lt;code>Types&lt;/code> are &lt;code>Features&lt;/code>. This means all values of the &lt;code>subsettingFeature&lt;/code> (on instances of its domain, i.e., the intersection of its &lt;code>featuringTypes&lt;/code>) are values of the &lt;code>subsettedFeature&lt;/code> on instances of its domain. To support this the domain of the &lt;code>subsettingFeature&lt;/code> must be the same or specialize (at least indirectly) the domain of the &lt;code>subsettedFeature&lt;/code> (via &lt;code>Specialization&lt;/code>), and the co-domain (intersection of the &lt;code>types&lt;/code>) of the &lt;code>subsettingFeature&lt;/code> must specialize the co-domain of the &lt;code>subsettedFeature&lt;/code>.&lt;/p>&#xA;&#xA;let subsettingFeaturingTypes: OrderedSet(Type) =&#xA;    subsettingFeature.featuringTypes in&#xA;let subsettedFeaturingTypes: OrderedSet(Type) =&#xA;    subsettedFeature.featuringTypes in&#xA;let anythingType: Element =&#xA;    subsettingFeature.resolveGlobal('Base::Anything').memberElement in &#xA;subsettedFeaturingTypes->forAll(t |&#xA;    subsettingFeaturingTypes->isEmpty() and t = anythingType or&#xA;    subsettingFeaturingTypes->exists(specializes(t))&#xA;subsettedFeature.isUnique implies subsettingFeature.isUnique"/>
    <classes name="TypeFeaturing" label="TypeFeaturing" comment="&lt;p>A &lt;code>TypeFeaturing&lt;/code> is a &lt;code>Featuring&lt;/code> &lt;code>Relationship&lt;/code> in which the &lt;code>featureOfType&lt;/code> is the &lt;code>source&lt;/code> and the &lt;code>featuringType&lt;/code> is the &lt;code>target&lt;/code>.&lt;/p>"/>
    <classes name="FeatureInverting" label="FeatureInverting" comment="&lt;p>A &lt;code>FeatureInverting&lt;/code> is a &lt;code>Relationship&lt;/code> between &lt;code>Features&lt;/code> asserting that their interpretations (sequences) are the reverse of each other, identified as &lt;code>featureInverted&lt;/code> and &lt;code>invertingFeature&lt;/code>. For example, a &lt;code>Feature&lt;/code> identifying each person&amp;#39;s parents is the inverse of a &lt;code>Feature&lt;/code> identifying each person&amp;#39;s children. A person identified as a parent of another will identify that other as one of their children.&lt;/p>&#xA;"/>
    <classes name="FeatureChaining" label="FeatureChaining" comment="&lt;p>&lt;code>FeatureChaining&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its target &lt;code>Feature&lt;/code> one of the &lt;code>chainingFeatures&lt;/code> of its owning &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <classes name="ReferenceSubsetting" label="ReferenceSubsetting" comment="&lt;p>&lt;code>ReferenceSubsetting&lt;/code> is a kind of &lt;code>Subsetting&lt;/code> in which the &lt;code>referencedFeature&lt;/code> is syntactically distinguished from other &lt;code>Features&lt;/code> subsetted by the &lt;code>referencingFeature&lt;/code>. &lt;code>ReferenceSubsetting&lt;/code> has the same semantics as &lt;code>Subsetting&lt;/code>, but the &lt;code>referenceFeature&lt;/code> may have a special purpose relative to the &lt;code>referencingFeature&lt;/code>. For instance, &lt;code>ReferenceSubsetting&lt;/code> is used to identify the &lt;code>relatedFeatures&lt;/code> of a &lt;code>Connector&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;code>ReferenceSubsetting&lt;/code> is always an &lt;code>ownedRelationship&lt;/code> of its &lt;code>referencingFeature&lt;/code>. A &lt;code>Feature&lt;/code> can have at most one &lt;code>ownedReferenceSubsetting&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Conjugation" label="Conjugation" comment="&lt;p>&lt;code>Conjugation&lt;/code> is a &lt;code>Relationship&lt;/code> between two types in which the &lt;code>conjugatedType&lt;/code> inherits all the &lt;code>Features&lt;/code> of the &lt;code>originalType&lt;/code>, but with all &lt;code>input&lt;/code> and &lt;code>output&lt;/code> &lt;code>Features&lt;/code> reversed. That is, any &lt;code>Features&lt;/code> with a &lt;code>direction&lt;/code> &lt;em>in&lt;/em> relative to the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>out&lt;/em> relative to the &lt;code>conjugatedType&lt;/code> and, similarly, &lt;code>Features&lt;/code> with &lt;code>direction&lt;/code> &lt;em>out&lt;/em> in the &lt;code>originalType&lt;/code> are considered to have an effective &lt;code>direction&lt;/code> of &lt;em>in&lt;/em> in the &lt;code>conjugatedType&lt;/code>. &lt;code>Features&lt;/code> with &lt;code>direction&lt;/code> &lt;em>inout&lt;/em>, or with no &lt;code>direction&lt;/code>, in the &lt;code>originalType&lt;/code>, are inherited without change.&lt;/p>&#xA;&#xA;&lt;p>A &lt;code>Type&lt;/code> may participate as a &lt;code>conjugatedType&lt;/code> in at most one &lt;code>Conjugation&lt;/code> relationship, and such a &lt;code>Type&lt;/code> may not also be the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> in any &lt;code>Specialization&lt;/code> relationship.&lt;/p>&#xA;"/>
    <classes name="Multiplicity" label="Multiplicity" comment="&lt;p>A &lt;code>Multiplicity&lt;/code> is a &lt;code>Feature&lt;/code> whose co-domain is a set of natural numbers giving the allowed cardinalities of each &lt;code>typeWithMultiplicity&lt;/code>. The &lt;em>cardinality&lt;/em> of a &lt;code>Type&lt;/code> is defined as follows, depending on whether the &lt;code>Type&lt;/code> is a &lt;code>Classifier&lt;/code> or &lt;code>Feature&lt;/code>.&#xA;&lt;ul>&#xA;&lt;li>&lt;code>Classifier&lt;/code> &#x2013; The number of basic instances of the &lt;code>Classifier&lt;/code>, that is, those instances representing things, which are not instances of any subtypes of the &lt;code>Classifier&lt;/code> that are &lt;code>Features&lt;/code>.&#xA;&lt;li>&lt;code>Features&lt;/code> &#x2013; The number of instances with the same featuring instances. In the case of a &lt;code>Feature&lt;/code> with a &lt;code>Classifier&lt;/code> as its &lt;code>featuringType&lt;/code>, this is the number of values of &lt;code>Feature&lt;/code> for each basic instance of the &lt;code>Classifier&lt;/code>. Note that, for non-unique &lt;code>Features&lt;/code>, all duplicate values are included in this count.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&lt;p>&lt;code>Multiplicity&lt;/code> co-domains (in models) can be specified by &lt;code>Expression&lt;/code> that might vary in their results. If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Classifier&lt;/code>, the domain of the &lt;code>Multiplicity&lt;/code> shall be &lt;em>&lt;code>Base::Anything&lt;/code>&lt;/em>.  If the &lt;code>typeWithMultiplicity&lt;/code> is a &lt;code>Feature&lt;/code>,  the &lt;code>Multiplicity&lt;/code> shall have the same domain as the &lt;code>typeWithMultiplicity&lt;/code>.&lt;/p>&#xA;&#xA;if owningType &lt;> null and owningType.oclIsKindOf(Feature) then&#xA;    featuringType = &#xA;        owningType.oclAsType(Feature).featuringType&#xA;else&#xA;    featuringType->isEmpty()&#xA;endif&#xA;specializesFromLibrary('Base::naturals')"/>
    <classes name="Intersecting" label="Intersecting" comment="&lt;p>&lt;code>Intersecting&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>intersectingType&lt;/code> one of the &lt;code>intersectingTypes&lt;/code> of its &lt;code>typeIntersected&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Unioning" label="Unioning" comment="&lt;p>&lt;code>Unioning&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>unioningType&lt;/code> one of the &lt;code>unioningTypes&lt;/code> of its &lt;code>typeUnioned&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="Disjoining" label="Disjoining" comment="&lt;p>A &lt;code>Disjoining&lt;/code> is a &lt;code>Relationship&lt;/code> between &lt;code>Types&lt;/code> asserted to have interpretations that are not shared (disjoint) between them, identified as &lt;code>typeDisjoined&lt;/code> and &lt;code>disjoiningType&lt;/code>. For example, a &lt;code>Classifier&lt;/code> for mammals is disjoint from a &lt;code>Classifier&lt;/code> for minerals, and a &lt;code>Feature&lt;/code> for people&amp;#39;s parents is disjoint from a &lt;code>Feature&lt;/code> for their children.&lt;/p>&#xA;"/>
    <classes name="Differencing" label="Differencing" comment="&lt;p>&lt;code>Differencing&lt;/code> is a &lt;code>Relationship&lt;/code> that makes its &lt;code>differencingType&lt;/code> one of the &lt;code>differencingTypes&lt;/code> of its &lt;code>typeDifferenced&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="EndFeatureMembership" label="EndFeatureMembership" comment="&lt;p>&lt;code>EndFeatureMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that requires its &lt;code>memberFeature&lt;/code> be owned and have &lt;code>isEnd = true&lt;/code>.&lt;/p>&#xA;&#xA;ownedMemberFeature.isEnd"/>
    <classes name="Classifier" label="Classifier" comment="&lt;p>A &lt;code>Classifier&lt;/code> is a &lt;code>Type&lt;/code> that classifies:&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Things (in the universe) regardless of how &lt;code>Features&lt;/code> relate them. (These are interpreted semantically as sequences of exactly one thing.)&lt;/li>&#xA;&#x9;&lt;li>How the above things are related by &lt;code>Features.&lt;/code> (These are interpreted semantically as sequences of multiple things, such that the last thing in the sequence is also classified by the &lt;code>Classifier&lt;/code>. Note that this means that a &lt;code>Classifier&lt;/code> modeled as specializing a &lt;code>Feature&lt;/code> cannot classify anything.)&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;&#xA;ownedSubclassification = &#xA;    ownedSpecialization->selectByKind(Subclassification)&#xA;multiplicity &lt;> null implies multiplicity.featuringType->isEmpty()"/>
    <classes name="Subclassification" label="Subclassification" comment="&lt;p>&lt;code>Subclassification&lt;/code> is &lt;code>Specialization&lt;/code> in which both the &lt;code>specific&lt;/code> and &lt;code>general&lt;/code> &lt;code>Types&lt;/code> are &lt;code>Classifier&lt;/code>. This means all instances of the specific &lt;code>Classifier&lt;/code> are also instances of the general &lt;code>Classifier&lt;/code>.&lt;/p>&#xA;"/>
    <classes name="MetadataFeature" label="MetadataFeature" comment="&lt;p>A &lt;code>MetadataFeature&lt;/code> is a &lt;code>Feature&lt;/code> that is an &lt;code>AnnotatingElement&lt;/code> used to annotate another &lt;code>Element&lt;/code> with metadata. It is typed by a &lt;code>Metaclass&lt;/code>. All its &lt;code>ownedFeatures&lt;/code> must redefine &lt;code>features&lt;/code> of its &lt;code>metaclass&lt;/code> and any feature bindings must be model-level evaluable.&lt;/p>&#xA;&#xA;&#xA;specializesFromLibrary('Metaobjects::metaobjects')&#xA;isSemantic() implies&#xA;    let annotatedTypes : Sequence(Type) = &#xA;        annotatedElement->selectAsKind(Type) in&#xA;    let baseTypes : Sequence(MetadataFeature) = &#xA;        evaluateFeature(resolveGlobal(&#xA;            'Metaobjects::SemanticMetadata::baseType').&#xA;            memberElement.&#xA;            oclAsType(Feature))->&#xA;        selectAsKind(MetadataFeature) in&#xA;    annotatedTypes->notEmpty() and &#xA;    baseTypes()->notEmpty() and &#xA;    baseTypes()->first().isSyntactic() implies&#xA;        let annotatedType : Type = annotatedTypes->first() in&#xA;        let baseType : Element = baseTypes->first().syntaxElement() in&#xA;        if annotatedType.oclIsKindOf(Classifier) and &#xA;            baseType.oclIsKindOf(Feature) then&#xA;            baseType.oclAsType(Feature).type->&#xA;                forAll(t | annotatedType.specializes(t))&#xA;        else if baseType.oclIsKindOf(Type) then&#xA;            annotatedType.specializes(baseType.oclAsType(Type))&#xA;        else&#xA;            true&#xA;        endif&#xA;not metaclass.isAbstract&#xA;let baseAnnotatedElementFeature : Feature =&#xA;    resolveGlobal('Metaobjects::Metaobject::annotatedElement').memberElement.&#xA;    oclAsType(Feature) in&#xA;let annotatedElementFeatures : OrderedSet(Feature) = feature->&#xA;    select(specializes(baseAnnotatedElementFeature))->&#xA;    excluding(baseAnnotatedElementFeature) in&#xA;annotatedElementFeatures->notEmpty() implies&#xA;    let annotatedElementTypes : Set(Feature) =&#xA;        annotatedElementFeatures.typing.type->asSet() in&#xA;    let metaclasses : Set(Metaclass) =&#xA;        annotatedElement.oclType().qualifiedName->collect(qn | &#xA;            resolveGlobal(qn).memberElement.oclAsType(Metaclass)) in&#xA;   metaclasses->forAll(m | annotatedElementTypes->exists(t | m.specializes(t)))&#xA;ownedFeature->closure(ownedFeature)->forAll(f |&#xA;    f.declaredName = null and f.declaredShortName = null and&#xA;    f.valuation &lt;> null implies f.valuation.value.isModelLevelEvaluable and&#xA;    f.redefinition.redefinedFeature->size() = 1)&#xA;metaclass = &#xA;    let metaclassTypes : Sequence(Type) = type->selectByKind(Metaclass) in&#xA;    if metaclassTypes->isEmpty() then null&#xA;    else metaClassTypes->first()&#xA;    endif&#xA;type->selectByKind(Metaclass).size() = 1"/>
    <classes name="Metaclass" label="Metaclass" comment="&lt;p>A &lt;code>Metaclass&lt;/code> is a &lt;code>Structure&lt;/code> used to type &lt;code>MetadataFeatures&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Metaobjects::Metaobject')"/>
    <classes name="Structure" label="Structure" comment="&lt;p>A &lt;code>Structure&lt;/code> is a &lt;code>Class&lt;/code> of objects in the modeled universe that are primarily structural in nature. While such an object is not itself behavioral, it may be involved in and acted on by &lt;code>Behaviors&lt;/code>, and it may be the performer of some of them.&lt;/p>&#xA;&#xA;specializesFromLibrary('Objects::Object')&#xA;ownedSpecialization.general->forAll(not oclIsKindOf(Behavior))"/>
    <classes name="Class" label="Class" comment="&lt;p>A &lt;code>Class&lt;/code> is a &lt;code>Classifier&lt;/code> of things (in the universe) that can be distinguished without regard to how they are related to other things (via &lt;code>Features&lt;/code>). This means multiple things classified by the same &lt;code>Class&lt;/code> can be distinguished, even when they are related other things in exactly the same way.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurrences::Occurrence')&#xA;ownedSpecialization.general->&#xA;    forAll(not oclIsKindOf(DataType)) and&#xA;not oclIsKindOf(Association) implies&#xA;    ownedSpecialization.general->&#xA;        forAll(not oclIsKindOf(Association))"/>
    <classes name="LiteralInteger" label="LiteralInteger" comment="&lt;p>A &lt;code>LiteralInteger&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides an &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>Integer&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalIntegerEvaluations')"/>
    <classes name="LiteralExpression" label="LiteralExpression" comment="&lt;p>A &lt;code>LiteralExpression&lt;/code> is an &lt;code>Expression&lt;/code> that provides a basic &lt;code>&lt;em>DataValue&lt;/em>&lt;/code> as a result.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = true&#xA;specializesFromLibrary('Performances::literalEvaluations')"/>
    <classes name="Expression" label="Expression" comment="&lt;p>An &lt;code>Expression&lt;/code> is a &lt;code>Step&lt;/code> that is typed by a &lt;code>Function&lt;/code>. An &lt;code>Expression&lt;/code> that also has a &lt;code>Function&lt;/code> as its &lt;code>featuringType&lt;/code> is a computational step within that &lt;code>Function&lt;/code>. An &lt;code>Expression&lt;/code> always has a single &lt;code>result&lt;/code> parameter, which redefines the &lt;code>result&lt;/code> parameter of its defining &lt;code>function&lt;/code>. This allows &lt;code>Expressions&lt;/code> to be interconnected in tree structures, in which inputs to each &lt;code>Expression&lt;/code> in the tree are determined as the results of other &lt;code>Expression&lt;/code> in the tree.&lt;/p>&#xA;&#xA;isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})&#xA;specializesFromLibrary('Performances::evaluations')&#xA;owningMembership &lt;> null and &#xA;owningMembership.oclIsKindOf(FeatureValue) implies&#xA;    let featureWithValue : Feature = &#xA;        owningMembership.oclAsType(FeatureValue).featureWithValue in&#xA;    featuringType = featureWithValue.featuringType&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;result =&#xA;    let resultParams : Sequence(Feature) =&#xA;        ownedFeatureMemberships->&#xA;            selectByKind(ReturnParameterMembership).&#xA;            ownedParameterMember in&#xA;    if resultParams->notEmpty() then resultParams->first()&#xA;    else if function &lt;> null then function.result&#xA;    else null&#xA;    endif endif&#xA;ownedFeatureMembership->&#xA;    selectByKind(ReturnParameterMembership)->&#xA;    size() &lt;= 1&#xA;membership->selectByKind(ResultExpressionMembership)->size() &lt;= 1"/>
    <classes name="Step" label="Step" comment="&lt;p>A &lt;code>Step&lt;/code> is a &lt;code>Feature&lt;/code> that is typed by one or more &lt;code>Behaviors&lt;/code>. &lt;code>Steps&lt;/code> may be used by one &lt;code>Behavior&lt;/code> to coordinate the performance of other &lt;code>Behaviors&lt;/code>, supporting a steady refinement of behavioral descriptions. &lt;code>Steps&lt;/code> can be ordered in time and can be connected using &lt;code>ItemFlows&lt;/code> to specify things flowing between their &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::performances')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) implies&#xA;    specializesFromLibrary('Performances::Performance::enclosedPerformance')&#xA;isComposite and owningType &lt;> null and&#xA;(owningType.oclIsKindOf(Structure) or&#xA; owningType.oclIsKindOf(Feature) and&#xA; owningType.oclAsType(Feature).type->&#xA;    exists(oclIsKindOf(Structure)) implies&#xA;    specializesFromLibrary('Objects::Object::ownedPerformance')&#xA;owningType &lt;> null and&#xA;    (owningType.oclIsKindOf(Behavior) or&#xA;     owningType.oclIsKindOf(Step)) and&#xA;    self.isComposite implies&#xA;    specializesFromLibrary('Performances::Performance::subperformance')&#xA;behavior = type->selectByKind(Behavior)"/>
    <classes name="Behavior" label="Behavior" comment="&lt;p>A &lt;code>Behavior &lt;/code>coordinates occurrences of other &lt;code>Behaviors&lt;/code>, as well as changes in objects. &lt;code>Behaviors&lt;/code> can be decomposed into &lt;code>Steps&lt;/code> and be characterized by &lt;code>parameters&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::Performance')&#xA;step = feature->selectByKind(Step)&#xA;ownedSpecialization.general->forAll(not oclIsKindOf(Structure))"/>
    <classes name="Function" label="Function" comment="&lt;p>A &lt;code>Function&lt;/code> is a &lt;code>Behavior&lt;/code> that has an &lt;code>out&lt;/code> &lt;code>parameter&lt;/code> that is identified as its &lt;code>result&lt;/code>. A &lt;code>Function&lt;/code> represents the performance of a calculation that produces the values of its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code>. This calculation may be decomposed into &lt;code>Expressions&lt;/code> that are &lt;code>steps&lt;/code> of the &lt;code>Function&lt;/code>.&lt;/p>&#xA;&#xA;ownedMembership.selectByKind(ResultExpressionMembership)->&#xA;    forAll(mem | ownedFeature.selectByKind(BindingConnector)->&#xA;        exists(binding |&#xA;            binding.relatedFeature->includes(result) and&#xA;            binding.relatedFeature->includes(mem.ownedResultExpression.result)))&#xA;specializesFromLibrary('Performances::Evaluation')&#xA;result =&#xA;    let resultParams : Sequence(Feature) =&#xA;        ownedFeatureMemberships->&#xA;            selectByKind(ReturnParameterMembership).&#xA;            ownedParameterMember in&#xA;    if resultParams->notEmpty() then resultParams->first()&#xA;    else null&#xA;    endif&#xA;ownedFeatureMembership->&#xA;    selectByKind(ReturnParameterMembership)->&#xA;    size() &lt;= 1&#xA;membership->selectByKind(ResultExpressionMembership)->size() &lt;= 1"/>
    <classes name="InvocationExpression" label="InvocationExpression" comment="&lt;p>An &lt;code>InvocationExpression&lt;/code> is an &lt;code>Expression&lt;/code> each of whose input &lt;code>parameters&lt;/code> are bound to the &lt;code>result&lt;/code> of an &lt;code>argument&lt;/code> Expression.&lt;/p>&#xA;&#xA;not ownedTyping->exists(oclIsKindOf(Behavior)) and&#xA;not ownedSubsetting.subsettedFeature.type->exists(oclIsKindOf(Behavior)) implies&#xA;    ownedFeature.selectByKind(BindingConnector)->exists(&#xA;        relatedFeature->includes(self) and&#xA;        relatedFeature->includes(result))&#xA;            &#xA;TBD&#xA;ownedFeature->&#xA;    select(direction = _'in').valuation->&#xA;    select(v | v &lt;> null).value&#xA;let features : Set(Feature) = type.feature->asSet() in&#xA;input->forAll(inp | &#xA;    inp.ownedRedefinition.redefinedFeature->&#xA;        intersection(features)->size() = 1)&#xA;let features : Set(Feature) = type.feature->asSet() in&#xA;input->forAll(inp1 | input->forAll(inp2 |&#xA;    inp1 &lt;> inp2 implies&#xA;        inp1.ownedRedefinition.redefinedFeature->&#xA;            intersection(inp2.ownedRedefinition.redefinedFeature)->&#xA;            intersection(features)->isEmpty()))"/>
    <classes name="LiteralInfinity" label="LiteralInfinity" comment="&lt;p>A &lt;code>LiteralInfinity&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides the positive infinity value (&lt;code>*&lt;/code>). It's &lt;code>result&lt;/code> must have the type &lt;code>&lt;em>Positive&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalIntegerEvaluations')"/>
    <classes name="SelectExpression" label="SelectExpression" comment="&lt;p>A &lt;code>SelectExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose operator is &lt;code>&quot;select&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::select&lt;/code>&lt;/em> from the Kernel Functions Library.&lt;/p>&#xA;operator = 'select'"/>
    <classes name="OperatorExpression" label="OperatorExpression" comment="&lt;p>An &lt;code>OperatorExpression&lt;/code> is an &lt;code>InvocationExpression&lt;/code> whose &lt;code>function&lt;/code> is determined by resolving its &lt;code>operator&lt;/code> in the context of one of the standard packages from the Kernel Function Library.&lt;/p>&#xA;let libFunctions : Sequence(Element) = &#xA;    Sequence{'BaseFunctions', 'DataFunctions', 'ControlFunctions'}->&#xA;    collect(ns | resolveGlobal(ns + &quot;::'&quot; + operator + &quot;'&quot;).&#xA;    memberElement) in&#xA;libFunctions->includes(function)&#xA;    &#xA;"/>
    <classes name="NullExpression" label="NullExpression" comment="&lt;p>A &lt;code>NullExpression&lt;/code> is an &lt;code>Expression&lt;/code> that results in a null value.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::nullEvaluations')"/>
    <classes name="MetadataAccessExpression" label="MetadataAccessExpression" comment="&lt;p>A &lt;code>MetadataAccessExpression&lt;/code> is an &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is a sequence of instances of &lt;code>Metaclasses&lt;/code> representing all the &lt;code>MetadataFeature&lt;/code> annotations of the &lt;code>referencedElement&lt;/code>. In addition, the sequence includes an instance of the reflective &lt;code>Metaclass&lt;/code> corresponding to the MOF class of the &lt;code>referencedElement&lt;/code>, with values for all the abstract syntax properties of the &lt;code>referencedElement&lt;/code>.&lt;/p>&#xA;specializesFromLibrary('Performances::metadataAccessEvaluations')"/>
    <classes name="LiteralRational" label="LiteralRational" comment="&lt;p>A &lt;code>LiteralRational&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>Rational&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>Rational&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalRationalEvaluations')"/>
    <classes name="LiteralString" label="LiteralString" comment="&lt;p>A &lt;code>LiteralString&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>String&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have the type &lt;code>&lt;em>String&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalStringEvaluations')"/>
    <classes name="LiteralBoolean" label="LiteralBoolean" comment="&lt;p>&lt;code>LiteralBoolean&lt;/code> is a &lt;code>LiteralExpression&lt;/code> that provides a &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value as a result. Its &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> must have type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::literalBooleanEvaluations')"/>
    <classes name="CollectExpression" label="CollectExpression" comment="&lt;p>A &lt;code>CollectExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose &lt;code>operator&lt;/code> is &lt;code>&quot;collect&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::collect&lt;/code>&lt;/em> from the Kernel Functions Library.&lt;/p>&#xA;operator = &quot;collect&quot;"/>
    <classes name="FeatureReferenceExpression" label="FeatureReferenceExpression" comment="&lt;p>A &lt;code>FeatureReferenceExpression&lt;/code> is an &lt;code>Expression&lt;/code> whose &lt;code>result&lt;/code> is bound to a &lt;code>referent&lt;/code> &lt;code>Feature&lt;/code>.&lt;/p>&#xA;referent =&#xA;    let nonParameterMemberships : Sequence(Membership) = ownedMembership->&#xA;        reject(oclIsKindOf(ParameterMembership)) in&#xA;    if nonParameterMemberships->isEmpty() or&#xA;       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)&#xA;    then null&#xA;    else nonParameterMemberships->first().memberElement.oclAsType(Feature)&#xA;    endif&#xA;ownedMember->selectByKind(BindingConnector)->exists(b |&#xA;    b.relatedFeatures->includes(targetFeature) and&#xA;    b.relatedFeatures->includes(result))&#xA;let membership : Membership = &#xA;    ownedMembership->reject(m | m.oclIsKindOf(ParameterMembership)) in&#xA;membership->notEmpty() and&#xA;membership->at(1).memberElement.oclIsKindOf(Feature)"/>
    <classes name="FeatureChainExpression" label="FeatureChainExpression" comment="&lt;p>A &lt;code>FeatureChainExpression&lt;/code> is an &lt;code>OperatorExpression&lt;/code> whose operator is &lt;code>&quot;.&quot;&lt;/code>, which resolves to the &lt;code>Function&lt;/code> &lt;em>&lt;code>ControlFunctions::'.'&lt;/code>&lt;/em> from the Kernel Functions Library. It evaluates to the result of chaining the &lt;code>result&lt;/code> &lt;code>Feature&lt;/code> of its single &lt;code>argument&lt;/code> &lt;code>Expression&lt;/code> with its &lt;code>targetFeature&lt;/code>.&lt;/p>&#xA;let sourceParameter : Feature = sourceTargetFeature() in&#xA;sourceTargetFeature &lt;> null and&#xA;sourceTargetFeature.redefinesFromLibrary('ControlFunctions::'.'::source::target')&#xA;let sourceParameter : Feature = sourceTargetFeature() in&#xA;sourceTargetFeature &lt;> null and&#xA;sourceTargetFeature.redefines(targetFeature)&#xA;targetFeature =&#xA;    let nonParameterMemberships : Sequence(Membership) = ownedMembership->&#xA;        reject(oclIsKindOf(ParameterMembership)) in&#xA;    if nonParameterMemberships->isEmpty() or&#xA;       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)&#xA;    then null&#xA;    else nonParameterMemberships->first().memberElement.oclAsType(Feature)&#xA;    endif&#xA;argument->notEmpty() implies&#xA;    targetFeature.featuringType->forAll(t | &#xA;        t.specializes(argument->at(1).result))"/>
    <classes name="Predicate" label="Predicate" comment="&lt;p>A &lt;code>Predicate&lt;/code> is a &lt;code>Function&lt;/code> whose &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> has type &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> and multiplicity &lt;code>1..1&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::BooleanEvaluation')"/>
    <classes name="ReturnParameterMembership" label="ReturnParameterMembership" comment="&lt;p>A &lt;code>ReturnParameterMembership&lt;/code> is a &lt;code>ParameterMembership&lt;/code> that indicates that the &lt;code>ownedMemberParameter&lt;/code> is the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of a &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code>. The &lt;code>direction&lt;/code> of the &lt;code>ownedMemberParameter&lt;/code> must be &lt;code>out&lt;/code>.&lt;/p>&#xA;&#xA;owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)"/>
    <classes name="ParameterMembership" label="ParameterMembership" comment="&lt;p>A &lt;code>ParameterMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that identifies its &lt;code>memberFeature&lt;/code> as a parameter, which is always owned, and must have a &lt;code>direction&lt;/code>. A &lt;code>ParameterMembership&lt;/code> must be owned by a &lt;code>Behavior&lt;/code> or a &lt;code>Step&lt;/code>.&lt;/p>&#xA;ownedMemberParameter.direction = parameterDirection()&#xA;owningType.oclIsKindOf(Behavior) or owningType.oclIsKindOf(Step)"/>
    <classes name="BooleanExpression" label="BooleanExpression" comment="&lt;p>A &lt;code>BooleanExpression&lt;/code> is a &lt;em>&lt;code>Boolean&lt;/code>&lt;/em>-valued &lt;code>Expression&lt;/code> whose type is a &lt;code>Predicate&lt;/code>. It represents a logical condition resulting from the evaluation of the &lt;code>Predicate&lt;/code>.&lt;/p>&#xA;&#xA;specializesFromLibrary('Performances::booleanEvaluations')"/>
    <classes name="Invariant" label="Invariant" comment="&lt;p>An &lt;code>Invariant&lt;/code> is a &lt;code>BooleanExpression&lt;/code> that is asserted to have a specific &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> result value. If &lt;code>isNegated = false&lt;/code>, then the result is asserted to be true. If &lt;code>isNegated = true&lt;/code>, then the result is asserted to be false.&lt;/p>&#xA;&#xA;if isNegated then&#xA;    specializesFromLibrary('Performances::falseEvaluations')&#xA;else&#xA;    specializesFromLibrary('Performances::trueEvaluations')&#xA;endif"/>
    <classes name="ResultExpressionMembership" label="ResultExpressionMembership" comment="&lt;p>A &lt;code>ResultExpressionMembership&lt;/code> is a &lt;code>FeatureMembership&lt;/code> that indicates that the &lt;code>ownedResultExpression&lt;/code> provides the result values for the &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code> that owns it. The owning &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code> must contain a &lt;code>BindingConnector&lt;/code> between the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>ownedResultExpression&lt;/code> and the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the owning &lt;code>Function&lt;/code> or &lt;code>Expression&lt;/code>.&lt;/p>&#xA;&#xA;owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)"/>
    <classes name="FeatureValue" label="FeatureValue" comment="&lt;p>A &lt;code>FeatureValue&lt;/code> is a &lt;code>Membership&lt;/code> that identifies a particular member &lt;code>Expression&lt;/code> that provides the value of the &lt;code>Feature&lt;/code> that owns the &lt;code>FeatureValue&lt;/code>. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A &lt;code>Feature&lt;/code> can have at most one &lt;code>FeatureValue&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The result of the &lt;code>value&lt;/code> &lt;code>Expression&lt;/code> is bound to the &lt;code>featureWithValue&lt;/code> using a &lt;code>BindingConnector&lt;/code>. If &lt;code>isInitial = false&lt;/code>, then the &lt;code>featuringType&lt;/code> of the &lt;code>BindingConnector&lt;/code> is the same as the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>. If &lt;code>isInitial = true&lt;/code>, then the &lt;code>featuringType&lt;/code> of the &lt;code>BindingConnector&lt;/code> is restricted to its &lt;code>startShot&lt;/code>.&#xA;&#xA;&lt;p>If &lt;code>isDefault = false&lt;/code>, then the above semantics of the &lt;code>FeatureValue&lt;/code> are realized for the given &lt;code>featureWithValue&lt;/code>. Otherwise, the semantics are realized for any individual of the &lt;code>featuringType&lt;/code> of the &lt;code>featureWithValue&lt;/code>, unless another value is explicitly given for the &lt;code>featureWithValue&lt;/code> for that individual.&lt;/p>&#xA;&#xA;not isDefault implies&#xA;    featureWithValue.ownedMember->&#xA;        selectByKind(BindingConnector)->exists(b |&#xA;            b.relatedFeature->includes(featureWithValue) and&#xA;            b.relatedFeature->includes(value.result) and&#xA;            if not isInitial then &#xA;                b.featuringType = featureWithValue.featuringType&#xA;            else &#xA;                b.featuringType->exists(t |&#xA;                    t.oclIsKindOf(Feature) and&#xA;                    t.oclAsType(Feature).chainingFeature =&#xA;                        Sequence{&#xA;                            resolveGlobal('Base::things::that').&#xA;                                memberElement,&#xA;                            resolveGlobal('Occurrences::Occurrence::startShot').&#xA;                                memberElement&#xA;                        }&#xA;                )&#xA;            endif)&#xA;featureWithValue.redefinition.redefinedFeature->&#xA;    closure(redefinition.redefinedFeature).valuation->&#xA;    forAll(isDefault)"/>
    <classes name="DataType" label="DataType" comment="&lt;p>A &lt;code>DataType&lt;/code> is a &lt;code>Classifier&lt;/code> of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same &lt;code>DataType&lt;/code>&lt;/p>&#xA;&#xA;&lt;ul>&#xA;&#x9;&lt;li>Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.&lt;/li>&#xA;&#x9;&lt;li>Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.&lt;/li>&#xA;&lt;/ul>&#xA;&#xA;specializesFromLibrary('Base::DataValue')&#xA;ownedSpecialization.general->&#xA;    forAll(not oclIsKindOf(Class) and &#xA;           not oclIsKindOf(Association))"/>
    <classes name="MultiplicityRange" label="MultiplicityRange" comment="&lt;p>A &lt;code>MultiplicityRange&lt;/code> is a &lt;code>Multiplicity&lt;/code> whose value is defined to be the (inclusive) range of natural numbers given by the result of a &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code> and the result of an &lt;code>upperBound&lt;/code> &lt;code>Expression&lt;/code>. The result of these &lt;code>Expressions&lt;/code> shall be of type &lt;code>&lt;em>Natural&lt;/em>&lt;/code>. If the result of the &lt;code>upperBound&lt;/code> &lt;code>Expression&lt;/code> is the unbounded value &lt;code>*&lt;/code>, then the specified range includes all natural numbers greater than or equal to the &lt;code>lowerBound&lt;/code> value. If no &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code>, then the default is that the lower bound has the same value as the upper bound, except if the &lt;code>upperBound&lt;/code> evaluates to &lt;code>*&lt;/code>, in which case the default for the lower bound is 0.&lt;/p>&#xA;&#xA;bound->forAll(b | b.featuringType = self.featuringType)&#xA;bound->forAll(b |&#xA;    b.result.specializesFromLibrary('ScalarValues::Integer') and&#xA;    let value : UnlimitedNatural = valueOf(b) in&#xA;    value &lt;> null implies value >= 0&#xA;)&#xA;lowerBound =&#xA;    let ownedMembers : Sequence(Element) = &#xA;        ownedMembership->selectByKind(OwningMembership).ownedMember in&#xA;    if ownedMembers->size() &lt; 2 or &#xA;        not ownedMembers->first().oclIsKindOf(Expression) then null&#xA;    else ownedMembers->first().oclAsType(Expression)&#xA;    endif&#xA;upperBound =&#xA;    let ownedMembers : Sequence(Element) = &#xA;        ownedMembership->selectByKind(OwningMembership).ownedMember in&#xA;    if ownedMembers->isEmpty() or &#xA;       not ownedMembers->last().oclIsKindOf(Expression) &#xA;    then null&#xA;    else ownedMembers->last().oclAsType(Expression)&#xA;    endif "/>
    <classes name="ItemFeature" label="ItemFeature" comment="&lt;p>An &lt;code>ItemFeature&lt;/code> is the &lt;code>ownedFeature&lt;/code> of an &lt;code>ItemFlow&lt;/code> that identifies the things carried by the kinds of transfers that are instances of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;ownedRedefinition.redefinedFeature->&#xA;    redefinesFromLibrary('Transfers::Transfer::item')"/>
    <classes name="ItemFlow" label="ItemFlow" comment="&lt;p>An &lt;code>ItemFlow&lt;/code> is a &lt;code>Step&lt;/code> that represents the transfer of objects or data values from one &lt;code>Feature&lt;/code> to another. &lt;code>ItemFlows&lt;/code> can take non-zero time to complete.&lt;/p>&#xA;&#xA;if itemFlowEnds->isEmpty() then&#xA;    specializesFromLibrary('Transfers::transfers')&#xA;else&#xA;    specializesFromLibrary('Transfers::flowTransfers')&#xA;endif&#xA;itemType =&#xA;    if itemFeature = null then Sequence{}&#xA;    else itemFeature.type&#xA;    endif&#xA;sourceOutputFeature =&#xA;    if connectorEnd->isEmpty() or &#xA;        connectorEnd.ownedFeature->isEmpty()&#xA;    then null&#xA;    else connectorEnd.ownedFeature->first()&#xA;    endif&#xA;targetInputFeature =&#xA;    if connectorEnd->size() &lt; 2 or &#xA;        connectorEnd->at(2).ownedFeature->isEmpty()&#xA;    then null&#xA;    else connectorEnd->at(2).ownedFeature->first()&#xA;    endif&#xA;itemFlowEnd = connectorEnd->selectByKind(ItemFlowEnd)&#xA;itemFeature =&#xA;    let itemFeatures : Sequence(ItemFeature) = &#xA;        ownedFeature->selectByKind(ItemFeature) in&#xA;    if itemFeatures->isEmpty() then null&#xA;    else itemFeatures->first()&#xA;    endif&#xA;ownedFeature->selectByKind(ItemFeature)->size() &lt;= 1"/>
    <classes name="Connector" label="Connector" comment="&lt;p>A &lt;code>Connector&lt;/code> is a usage of &lt;code>Associations&lt;/code>, with links restricted according to instances of the &lt;code>Type&lt;/code> in which they are used (domain of the &lt;code>Connector&lt;/code>). The &lt;code>associations&lt;/code> of the &lt;code>Connector&lt;/code> restrict what kinds of things might be linked. The &lt;code>Connector&lt;/code> further restricts these links to be between values of &lt;code>Features&lt;/code> on instances of its domain.&lt;/p>&#xA;&#xA;relatedFeature = connectorEnd.ownedReferenceSubsetting->&#xA;    select(s | s &lt;> null).subsettedFeature&#xA;relatedFeature->forAll(f | &#xA;    if featuringType->isEmpty() then f.isFeaturedWithin(null)&#xA;    else featuringType->forAll(t | f.isFeaturedWithin(t))&#xA;    endif)&#xA;sourceFeature = &#xA;    if relatedFeature->isEmpty() then null &#xA;    else relatedFeature->first() &#xA;    endif&#xA;targetFeature =&#xA;    if relatedFeature->size() &lt; 2 then OrderedSet{}&#xA;    else &#xA;        relatedFeature->&#xA;            subSequence(2, relatedFeature->size())->&#xA;            asOrderedSet()&#xA;    endif&#xA;not isAbstract implies relatedFeature->size() >= 2&#xA;specializesFromLibrary('Links::links')&#xA;association->exists(oclIsKindOf(AssociationStructure)) implies&#xA;    specializesFromLibrary('Objects::linkObjects')&#xA;connectorEnds->size() = 2 and&#xA;association->exists(oclIsKindOf(AssocationStructure)) implies&#xA;    specializesFromLibrary('Objects::binaryLinkObjects')&#xA;connectorEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::binaryLinks')&#xA;connectorEnds->size() > 2 implies&#xA;    not specializesFromLibrary('Links::BinaryLink')"/>
    <classes name="Association" label="Association" comment="&lt;p>An &lt;code>Association&lt;/code> is a &lt;code>Relationship&lt;/code> and a &lt;code>Classifier&lt;/code> to enable classification of links between things (in the universe). The co-domains (&lt;code>types&lt;/code>) of the &lt;code>associationEnd&lt;/code> &lt;code>Features&lt;/code> are the &lt;code>relatedTypes&lt;/code>, as co-domain and participants (linked things) of an &lt;code>Association&lt;/code> identify each other.&lt;/p>&#xA;&#xA;relatedType = associationEnd.type&#xA;specializesFromLibrary('Links::Link')&#xA;oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)&#xA;associationEnd->size() = 2 implies&#xA;    specializesFromLibrary('Links::BinaryLink')&#xA;not isAbstract implies relatedType->size() >= 2&#xA;associationEnds->size() > 2 implies&#xA;    not specializesFromLibrary('Links::BinaryLink')&#xA;sourceType =&#xA;    if relatedType->isEmpty() then null&#xA;    else relatedType->first() endif&#xA;targetType =&#xA;    if relatedType->size() &lt; 2 then OrderedSet{}&#xA;    else &#xA;        relatedType->&#xA;            subSequence(2, relatedType->size())->&#xA;            asOrderedSet() &#xA;    endif"/>
    <classes name="ItemFlowEnd" label="ItemFlowEnd" comment="&lt;p>An &lt;code>ItemFlowEnd&lt;/code> is a &lt;code>Feature&lt;/code> that is one of the &lt;code>connectorEnds&lt;/code> giving the &lt;code>&lt;em>source&lt;/em>&lt;/code> or &lt;code>&lt;em>target&lt;/em>&lt;/code> of an &lt;code>ItemFlow&lt;/code>. For &lt;code>ItemFlows&lt;/code> typed by &lt;code>&lt;em>FlowTransfer&lt;/em>&lt;/code> or its specializations, &lt;code>ItemFlowEnds&lt;/code> must have exactly one &lt;code>ownedFeature&lt;/code>, which redefines &lt;code>&lt;em>Transfer::source::sourceOutput&lt;/em>&lt;/code> or &lt;code>&lt;em>Transfer::target::targetInput&lt;/em>&lt;/code> and redefines the corresponding feature of the &lt;code>relatedElement&lt;/code> for its end.&lt;/p>&#xA;isEnd&#xA;ownedFeature->size() = 1&#xA;owningType &lt;> null and owningType.oclIsKindOf(ItemFlow)"/>
    <classes name="Interaction" label="Interaction" comment="&lt;p>An &lt;code>Interaction&lt;/code> is a &lt;code>Behavior&lt;/code> that is also an &lt;code>Association&lt;/code>, providing a context for multiple objects that have behaviors that impact one another.&lt;/p>&#xA;"/>
    <classes name="SuccessionItemFlow" label="SuccessionItemFlow" comment="&lt;p>A &lt;code>SuccessionItemFlow&lt;/code> is an &lt;code>ItemFlow&lt;/code> that also provides temporal ordering. It classifies &lt;code>&lt;em>Transfers&lt;/em>&lt;/code> that cannot start until the source &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> has completed and that must complete before the target &lt;code>&lt;em>Occurrence&lt;/em>&lt;/code> can start.&lt;/p>&#xA;specializesFromLibrary('Transfers::flowTransfersBefore')"/>
    <classes name="Succession" label="Succession" comment="&lt;p>A &lt;code>Succession&lt;/code> is a binary &lt;code>Connector&lt;/code> that requires its &lt;code>relatedFeatures&lt;/code> to happen separately in time.&lt;/p>&#xA;&#xA;specializesFromLibrary('Occurences::happensBeforeLinks')&#xA;transitionStep =&#xA;    if owningNamespace.oclIsKindOf(Step) and &#xA;        owningNamespace.oclAsType(Step).&#xA;            specializesFromLibrary('TransitionPerformances::TransitionPerformance') then&#xA;        owningNamespace.oclAsType(Step)&#xA;    else null&#xA;    endif&#xA;triggerStep =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 2 or&#xA;       not transitionStep.ownedFeature->at(2).oclIsKindOf(Step) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(2).oclAsType(Step)}&#xA;    endif&#xA;effectStep =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 4 or&#xA;       not transitionStep.ownedFeature->at(4).oclIsKindOf(Step) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(4).oclAsType(Step)}&#xA;    endif&#xA;guardExpression =&#xA;    if transitionStep = null or &#xA;       transitionStep.ownedFeature.size() &lt; 3 or&#xA;       not transitionStep.ownedFeature->at(3).oclIsKindOf(Expression) &#xA;    then Set{}&#xA;    else Set{transitionStep.ownedFeature->at(3).oclAsType(Expression)}&#xA;    endif"/>
    <classes name="Package" label="Package" comment="&lt;p>A &lt;code>Package&lt;/code> is a &lt;code>Namespace&lt;/code> used to group &lt;code>Elements&lt;/code>, without any instance-level semantics. It may have one or more model-level evaluable &lt;code>filterCondition&lt;/code> &lt;code>Expressions&lt;/code> used to filter its &lt;code>importedMemberships&lt;/code>. Any imported &lt;code>member&lt;/code> must meet all of the &lt;code>filterConditions&lt;/code>.&lt;/p>&#xA;filterCondition = ownedMembership->&#xA;    selectByKind(ElementFilterMembership).condition"/>
    <classes name="LibraryPackage" label="LibraryPackage" comment="&lt;p>A &lt;code>LibraryPackage&lt;/code> is a &lt;code>Package&lt;/code> that is the container for a model library. A &lt;code>LibraryPackage&lt;/code> is itself a library &lt;code>Element&lt;/code> as are all &lt;code>Elements&lt;/code> that are directly or indirectly contained in it.&lt;/p>&#xA;"/>
    <classes name="ElementFilterMembership" label="ElementFilterMembership" comment="&lt;p>&lt;code>ElementFilterMembership&lt;/code> is a &lt;code>Membership&lt;/code> between a &lt;code>Namespace&lt;/code> and a model-level evaluable &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>-valued &lt;code>Expression&lt;/code>, asserting that imported &lt;code>members&lt;/code> of the &lt;code>Namespace&lt;/code> should be filtered using the &lt;code>condition&lt;/code> &lt;code>Expression&lt;/code>. A general &lt;code>Namespace&lt;/code> does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of &lt;code>Namespaces&lt;/code>.&lt;/p>&#xA;&#xA;condition.isModelLevelEvaluable&#xA;condition.result.specializesFromLibrary('ScalarValues::Boolean')"/>
    <classes name="AssociationStructure" label="AssociationStructure" comment="&lt;p>An &lt;code>AssociationStructure&lt;/code> is an &lt;code>Association&lt;/code> that is also a &lt;code>Structure&lt;/code>, classifying link objects that are both links and objects. As objects, link objects can be created and destroyed, and their non-end &lt;code>Features&lt;/code> can change over time. However, the values of the end &lt;code>Features&lt;/code> of a link object are fixed and cannot change over its lifetime.&lt;/p>&#xA;specializesFromLibrary('Objects::LinkObject')&#xA;endFeature->size() = 2 implies&#xA;    specializesFromLibrary('Objects::BinaryLinkObject')"/>
    <classes name="BindingConnector" label="BindingConnector" comment="&lt;p>A &lt;code>BindingConnector&lt;/code> is a binary &lt;code>Connector&lt;/code> that requires its &lt;code>relatedFeatures&lt;/code> to identify the same things (have the same values).&lt;/p>&#xA;&#xA;specializesFromLibrary('Links::selfLinks')&#xA;relatedFeature->size() = 2"/>
    <properties name="typeFeaturingFeatureOfType" label="typeFeaturingFeatureOfType" comment="&lt;p>The &lt;code>Feature&lt;/code> that is featured by the &lt;code>featuringType&lt;/code>. It is the &lt;code>source&lt;/code> of the &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingFeaturingType" label="typeFeaturingFeaturingType" comment="&lt;p>The &lt;code>Type&lt;/code> that features the &lt;code>featureOfType&lt;/code>. It is the &lt;code>target&lt;/code> of the &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="typeFeaturingOwningFeatureOfType" label="typeFeaturingOwningFeatureOfType" comment="&lt;p>A &lt;code>featureOfType&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>TypeFeaturing&lt;/code>.&lt;/p>"/>
    <properties name="featureIsUnique" label="featureIsUnique" comment="&lt;p>Whether or not values for this &lt;code>Feature&lt;/code> must have no duplicates or not.&lt;/p>&#xA;"/>
    <properties name="featureIsOrdered" label="featureIsOrdered" comment="&lt;p>Whether an order exists for the values of this &lt;code>Feature&lt;/code> or not.&lt;/p>"/>
    <properties name="featureIsComposite" label="featureIsComposite" comment="&lt;p>Whether the &lt;code>Feature&lt;/code> is a composite &lt;code>feature&lt;/code> of its &lt;code>featuringType&lt;/code>. If so, the values of the &lt;code>Feature&lt;/code> cannot exist after its featuring instance no longer does.&lt;/p>&#xA;"/>
    <properties name="featureIsEnd" label="featureIsEnd" comment="&lt;p>Whether or not the this &lt;code>Feature&lt;/code> is an end &lt;code>Feature&lt;/code>, requiring a different interpretation of the &lt;code>multiplicity&lt;/code> of the &lt;code>Feature&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>An end &lt;code>Feature&lt;/code> is always considered to map each domain instance to a single co-domain instance, whether or not a &lt;code>Multiplicity&lt;/code> is given for it. If a &lt;code>Multiplicity&lt;/code> is given for an end &lt;code>Feature&lt;/code>, rather than giving the co-domain cardinality for the &lt;code>Feature&lt;/code> as usual, it specifies a cardinality constraint for &lt;em>navigating&lt;/em> across the &lt;code>endFeatures&lt;/code> of the &lt;code>featuringType&lt;/code> of the end &lt;code>Feature&lt;/code>. That is, if a &lt;code>Type&lt;/code> has &lt;em>n&lt;/em> &lt;code>endFeatures&lt;/code>, then the &lt;code>Multiplicity&lt;/code> of any one of those end &lt;code>Features&lt;/code> constrains the cardinality of the set of values of that &lt;code>Feature&lt;/code> when the values of the other &lt;em>n-1&lt;/em> end &lt;code>Features&lt;/code> are held fixed.&lt;/p>&#xA;"/>
    <properties name="featureIsDerived" label="featureIsDerived" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> can always be computed from the values of other &lt;code>Features&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureIsReadOnly" label="featureIsReadOnly" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> can change over the lifetime of an instance of the domain.&lt;/p>&#xA;"/>
    <properties name="featureIsPortion" label="featureIsPortion" comment="&lt;p>Whether the values of this &lt;code>Feature&lt;/code> are contained in the space and time of instances of the domain of the &lt;code>Feature&lt;/code> and represent the same thing as those instances.&lt;/p>&#xA;"/>
    <properties name="featureDirection" label="featureDirection" comment="&lt;p>Indicates how values of this &lt;code>Feature&lt;/code> are determined or used (as specified for the &lt;code>FeatureDirectionKind&lt;/code>).&lt;/p>&#xA;"/>
    <properties name="featureOwningType" label="featureOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the &lt;code>owningType&lt;/code> of the &lt;code>owningFeatureMembership&lt;/code> of this &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureType" label="featureType" comment="&lt;p>&lt;code>Types&lt;/code> that restrict the values of this &lt;code>Feature&lt;/code>, such that the values must be instances of all the &lt;code>types&lt;/code>. The types of a &lt;code>Feature&lt;/code> are derived from its &lt;code>typings&lt;/code> and the &lt;code>types&lt;/code> of its &lt;code>subsettings&lt;/code>. If the &lt;code>Feature&lt;/code> is chained, then the &lt;code>types&lt;/code> of the last &lt;code>Feature&lt;/code> in the chain are also &lt;code>types&lt;/code> of the chained &lt;code>Feature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwnedRedefinition" label="featureOwnedRedefinition" comment="&lt;p>The &lt;code>ownedSubsettings&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>Redefinitions&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>redefiningFeature&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="featureOwnedSubsetting" label="featureOwnedSubsetting" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>Subsettings&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureOwningFeatureMembership" label="featureOwningFeatureMembership" comment="&lt;p>The &lt;code>FeatureMembership&lt;/code> that owns this &lt;code>Feature&lt;/code> as an &lt;code>ownedMemberFeature&lt;/code>, determining its &lt;code>owningType&lt;/code>.&lt;/p>"/>
    <properties name="featureEndOwningType" label="featureEndOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is related to this &lt;code>Feature&lt;/code> by an &lt;code>EndFeatureMembership&lt;/code> in which the &lt;code>Feature&lt;/code> is an &lt;code>ownedMemberFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTyping" label="featureOwnedTyping" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureTypings&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>typedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureFeaturingType" label="featureFeaturingType" comment="&lt;p>&lt;code>Types&lt;/code> that feature this &lt;code>Feature&lt;/code>, such that any instance in the domain of the &lt;code>Feature&lt;/code> must be classified by all of these &lt;code>Types&lt;/code>, including at least all the &lt;code>featuringTypes&lt;/code> of its &lt;code>typeFeaturings&lt;/code>.  If the &lt;code>Feature&lt;/code> is chained, then the &lt;code>featuringTypes&lt;/code> of the first &lt;code>Feature&lt;/code> in the chain are also &lt;code>featuringTypes&lt;/code> of the chained &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedTypeFeaturing" label="featureOwnedTypeFeaturing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>TypeFeaturings&lt;/code> and for which the &lt;code>Feature&lt;/code> is the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featureChainingFeature" label="featureChainingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that are chained together to determine the values of this &lt;code>Feature&lt;/code>, derived from the &lt;code>chainingFeatures&lt;/code> of the &lt;code>ownedFeatureChainings&lt;/code> of this &lt;code>Feature&lt;/code>, in the same order. The values of a &lt;code>Feature&lt;/code> with &lt;code>chainingFeatures&lt;/code> are the same as values of the last &lt;code>Feature&lt;/code> in the chain, which can be found by starting with the values of the first &lt;code>Feature&lt;/code> (for each instance of the domain of the original &lt;code>Feature&lt;/code>), then using each of those as domain instances to find the values of the second &lt;code>Feature&lt;/code> in chainingFeatures, and so on, to values of the last &lt;code>Feature&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureInverting" label="featureOwnedFeatureInverting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureInvertings&lt;/code> and for which the &lt;code>Feature&lt;/code> is the &lt;code>featureInverted&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedFeatureChaining" label="featureOwnedFeatureChaining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Feature&lt;/code> that are &lt;code>FeatureChainings&lt;/code>, for which the &lt;code>Feature&lt;/code> will be the &lt;code>featureChained&lt;/code>.&lt;/p>"/>
    <properties name="featureOwnedReferenceSubsetting" label="featureOwnedReferenceSubsetting" comment="&lt;p>The one &lt;code>ownedSubsetting&lt;/code> of this &lt;code>Feature&lt;/code>, if any, that is a &lt;code>ReferenceSubsetting&lt;/code>, for which the &lt;code>Feature&lt;/code> is the &lt;code>referencingFeature&lt;/code>.&lt;/p>"/>
    <properties name="expressionIsModelLevelEvaluable" label="expressionIsModelLevelEvaluable" comment="&lt;p>Whether this &lt;code>Expression&lt;/code> meets the constraints necessary to be evaluated at &lt;em>model level&lt;/em>, that is, using metadata within the model.&lt;/p>"/>
    <properties name="expressionFunction" label="expressionFunction" comment="&lt;p>The &lt;code>Function&lt;/code> that types this &lt;code>Expression&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>This is the Function that types the Expression.&lt;/p>&#xA;"/>
    <properties name="expressionResult" label="expressionResult" comment="&lt;p>&lt;p>An &lt;code>output&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>Expression&lt;/code> whose value is the result of the &lt;code>Expression&lt;/code>. The result of an &lt;code>Expression&lt;/code> is either inherited from its &lt;code>function&lt;/code> or it is related to the &lt;code>Expression&lt;/code> via a &lt;code>ReturnParameterMembership&lt;/code>, in which case it redefines the &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of its &lt;code>function&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="importVisibility" label="importVisibility" comment="&lt;p>The visibility level of the imported &lt;code>members&lt;/code> from this Import relative to the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="importIsRecursive" label="importIsRecursive" comment="&lt;p>Whether to recursively import Memberships from visible, owned sub-Namespaces.&lt;/p>"/>
    <properties name="importIsImportAll" label="importIsImportAll" comment="&lt;p>Whether to import memberships without regard to declared visibility.&lt;/p>&#xA;"/>
    <properties name="importImportOwningNamespace" label="importImportOwningNamespace" comment="&lt;p>The Namespace into which Memberships are imported by this Import, which must be the &lt;code>owningRelatedElement&lt;/code> of the Import.&lt;/p> &#xA;"/>
    <properties name="importImportedElement" label="importImportedElement" comment="&lt;p>The effectively imported &lt;code>Element&lt;/code> for this &lt;/code>Import&lt;/code>. For a &lt;code>MembershipImport&lt;/code>, this is the &lt;code>memberElement&lt;/code> of the &lt;code>importedMembership&lt;/code>. For a &lt;code>NamespaceImport&lt;/code>, it is the &lt;code>importedNamespace&lt;/code>.&lt;/p>"/>
    <properties name="resultExpressionMembershipOwnedResultExpression" label="resultExpressionMembershipOwnedResultExpression" comment="&lt;p>The &lt;code>Expression&lt;/code> that provides the result for the owner of the &lt;code>ResultExpressionMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemType" label="itemFlowItemType" comment="&lt;p>The type of values transferred, which is the &lt;code>type&lt;/code> of the &lt;code>itemFeature&lt;/code> of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="itemFlowTargetInputFeature" label="itemFlowTargetInputFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that receives the values carried by the &lt;code>ItemFlow&lt;/code>. It must be an owned &lt;code>output&lt;/code> of the target participant of the &lt;code>ItemFlow&lt;/code>.&lt;/p>"/>
    <properties name="itemFlowSourceOutputFeature" label="itemFlowSourceOutputFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that provides the items carried by the &lt;code>ItemFlow&lt;/code>. It must be an owned &lt;code>output&lt;/code> of the &lt;code>source&lt;/code> of the &lt;code>ItemFlow&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFlowEnd" label="itemFlowItemFlowEnd" comment="&lt;p>The &lt;code>connectorEnds&lt;/code> of this &lt;code>ItemFlow&lt;/code> that are &lt;code>ItemFlowEnds&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="itemFlowItemFeature" label="itemFlowItemFeature" comment="&lt;p>The &lt;code>ownedFeature&lt;/code> of the &lt;code>ItemFlow&lt;/code> that is an &lt;code>ItemFeature&lt;/code> (if any).&lt;/p>&#xA;"/>
    <properties name="itemFlowInteraction" label="itemFlowInteraction" comment="&lt;p>The &lt;code>Interactions&lt;/code> that type this &lt;code>ItemFlow&lt;/code>. &lt;code>Interactions&lt;/code> are both &lt;code>Associations&lt;/code> and &lt;code>Behaviors&lt;/code>, which can type &lt;code>Connectors&lt;/code> and &lt;code>Steps&lt;/code>, respectively.&lt;/p>"/>
    <properties name="associationRelatedType" label="associationRelatedType" comment="&lt;p>The &lt;code>types&lt;/code> of the &lt;code>associationEnds&lt;/code> of the &lt;code>Association&lt;/code>, which are the &lt;code>relatedElements&lt;/code> of the &lt;code>Association&lt;/code> considered as a &lt;code>Relationship&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="associationSourceType" label="associationSourceType" comment="&lt;p>The source &lt;code>relatedType&lt;/code> for this &lt;code>Association&lt;/code>. It is the first &lt;code>relatedType&lt;/code> of the &lt;code>Association&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="associationTargetType" label="associationTargetType" comment="&lt;p>The target &lt;code>relatedTypes&lt;/code> for this &lt;code>Association&lt;/code>. This includes all the &lt;code>relatedTypes&lt;/code> other than the &lt;code>sourceType&lt;/code>.&lt;/p> &#xA;"/>
    <properties name="associationAssociationEnd" label="associationAssociationEnd" comment="&lt;p>The &lt;code>features&lt;/code> of the &lt;code>Association&lt;/code> that identify the things that can be related by it. A concrete &lt;code>Association&lt;/code> must have at least two &lt;code>associationEnds&lt;/code>. When it has exactly two, the &lt;code>Association&lt;/code> is called a &lt;em>binary&lt;/em> &lt;code>Association&lt;/code>.&lt;/p> &#xA;&#xA;&lt;p>The ends of the Association determine which elements are eligible to be related by instances of the Association.&lt;/p>&#xA;"/>
    <properties name="featureReferenceExpressionReferent" label="featureReferenceExpressionReferent" comment="&lt;p>The &lt;code>Feature&lt;/code> that is referenced by this &lt;code>FeatureReferenceExpression&lt;/code>, which is its first non-&lt;code>parameter&lt;/code> &lt;code>member&lt;/code>.&lt;p>"/>
    <properties name="successionTransitionStep" label="successionTransitionStep" comment="&lt;p>A &lt;code>Step&lt;/code> that is typed by the &lt;code>Behavior&lt;/code> &lt;code>&lt;em>TransitionPerformances::TransitionPerformance&lt;/em>&lt;/code> (from the Kernel Semantic Library) that has this &lt;code>Succession&lt;/code> as its &lt;em>&lt;code>transitionLink&lt;/code>&lt;/em>.&lt;/p>&#xA;"/>
    <properties name="successionTriggerStep" label="successionTriggerStep" comment="&lt;p>&lt;code>Steps&lt;/code> that map incoming events to the timing of occurrences of the &lt;code>transitionStep&lt;/code>. The values of &lt;code>triggerStep&lt;/code> subset the list of acceptable events to be received by a &lt;code>Behavior&lt;/code> or the object that performs it.&lt;/p>&#xA;"/>
    <properties name="successionEffectStep" label="successionEffectStep" comment="&lt;p>&lt;code>Steps&lt;/code> that represent occurrences that are side effects of the &lt;code>transitionStep&lt;/code> occurring.&lt;/p>&#xA;"/>
    <properties name="successionGuardExpression" label="successionGuardExpression" comment="&lt;p>&lt;code>Expressions&lt;/code> that must evaluate to true before the &lt;code>transitionStep&lt;/code> can occur.&lt;/p>&#xA;"/>
    <properties name="literalBooleanValue" label="literalBooleanValue" comment="&lt;p>The &lt;code>&lt;em>Boolean&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralBoolean&lt;/code>.&lt;/p>&#xA;&lt;p>The Boolean value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="featureTypingOwningFeature" label="featureTypingOwningFeature" comment="&lt;p>A &lt;code>typedFeature&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>FeatureTyping&lt;/code>.&lt;/p>"/>
    <properties name="featureTypingTypedFeature" label="featureTypingTypedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that has a &lt;code>type&lt;/code> determined by this &lt;code>FeatureTyping&lt;/code>.&lt;/p>"/>
    <properties name="featureTypingType" label="featureTypingType" comment="&lt;p>The &lt;code>Type&lt;/code> that is being applied by this &lt;code>FeatureTyping&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="differencingDifferencingType" label="differencingDifferencingType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeDifferenced&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="differencingTypeDifferenced" label="differencingTypeDifferenced" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>differencingType&lt;/code>, as described in &lt;code>Type::differencingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipImportImportedMembership" label="membershipImportImportedMembership" comment="&lt;p>The &lt;code>Membership&lt;/code> to be imported.&lt;/p>&#xA;"/>
    <properties name="conjugationOriginalType" label="conjugationOriginalType" comment="&lt;p>The &lt;code>Type&lt;/code> to be conjugated.&lt;/p>&#xA;"/>
    <properties name="conjugationConjugatedType" label="conjugationConjugatedType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the result of applying &lt;code>Conjugation&lt;/code> to the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="conjugationOwningType" label="conjugationOwningType" comment="&lt;p>The &lt;code>conjugatedType&lt;/code> of this &lt;code>Conjugation&lt;/code> that is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="classifierOwnedSubclassification" label="classifierOwnedSubclassification" comment="&lt;p>The &lt;code>ownedSpecializations&lt;/code> of this &lt;code>Classifier&lt;/code> that are &lt;code>Subclassifications&lt;/code>, for which this &lt;code>Classifier&lt;/code> is the &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwnedMemberFeature" label="featureMembershipOwnedMemberFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that this &lt;code>FeatureMembership&lt;/code> relates to its &lt;code>owningType&lt;/code>, making it an &lt;code>ownedFeature&lt;/code> of the &lt;code>owningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureMembershipOwningType" label="featureMembershipOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that owns this &lt;code>FeatureMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="literalRationalValue" label="literalRationalValue" comment="&lt;p>The value whose rational approximation is the result of evaluating this &lt;code>LiteralRational&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Real value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="connectorRelatedFeature" label="connectorRelatedFeature" comment="&lt;p>The &lt;code>Features&lt;/code> that are related by this &lt;code>Connector&lt;/code> considered as a &lt;code>Relationship&lt;/code> and that restrict the links it identifies, given by the referenced &lt;code>Features&lt;/code> of the &lt;code>connectorEnds&lt;/code> of the &lt;code>Connector&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorAssociation" label="connectorAssociation" comment="&lt;p>The &lt;code>Associations&lt;/code> that type the &lt;code>Connector&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="connectorConnectorEnd" label="connectorConnectorEnd" comment="&lt;p>The &lt;code>endFeatures&lt;/code> of a &lt;code>Connector&lt;/code>, which redefine the &lt;code>endFeatures&lt;/code> of the &lt;code>associations&lt;/code> of the &lt;code>Connector&lt;/code>. The &lt;code>connectorEnds&lt;/code> determine via &lt;code>ReferenceSubsetting&lt;/code> &lt;code>Relationships&lt;/code> which &lt;code>Features&lt;/code> are related by the &lt;code>Connector&lt;/code>.&lt;/p>"/>
    <properties name="connectorSourceFeature" label="connectorSourceFeature" comment="&lt;p>The source &lt;code>relatedFeature&lt;/code> for this &lt;code>Connector&lt;/code>. It is the first &lt;code>relatedFeature&lt;/code>.&lt;/p>"/>
    <properties name="connectorTargetFeature" label="connectorTargetFeature" comment="&lt;p>The target &lt;code>relatedFeatures&lt;/code> for this &lt;code>Connector&lt;/code>. This includes all the &lt;code>relatedFeatures&lt;/code> other than the &lt;code>sourceFeature&lt;/code>.&lt;/p>"/>
    <properties name="literalIntegerValue" label="literalIntegerValue" comment="&lt;p>The &lt;code>&lt;em>Integer&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralInteger&lt;/code>.&lt;/p>&#xA;&lt;p>The Integer value that is the result of evaluating this Expression.&lt;/p>&#xA;"/>
    <properties name="intersectingIntersectingType" label="intersectingIntersectingType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeIntersected&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="intersectingTypeIntersected" label="intersectingTypeIntersected" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>intersectingType&lt;/code>, as described in &lt;code>Type::intersectingType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="invariantIsNegated" label="invariantIsNegated" comment="&lt;p>Whether this &lt;code>Invariant&lt;/code> is asserted to be false rather than true.&lt;/p>&#xA;"/>
    <properties name="featureChainingChainingFeature" label="featureChainingChainingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> whose values partly determine values of &lt;code>featureChained&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureChainingFeatureChained" label="featureChainingFeatureChained" comment="&lt;p>The &lt;code>Feature&lt;/code> whose values are partly determined by values of the &lt;code>chainingFeature&lt;/code>, as described in &lt;code>Feature::chainingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="commentLocale" label="commentLocale" comment="&lt;p>Identification of the language of the &lt;code>body&lt;/code> text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format &lt;code>[language[_territory][.codeset][@modifier]]&lt;/code>.&lt;/p>"/>
    <properties name="commentBody" label="commentBody" comment="&lt;p>The annotation text for the &lt;code>Comment&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="multiplicityRangeLowerBound" label="multiplicityRangeLowerBound" comment="&lt;p>The &lt;code>Expression&lt;/code> whose result provides the lower bound of the &lt;code>MultiplicityRange&lt;/code>. If no &lt;code>lowerBound&lt;/code> &lt;code>Expression&lt;/code> is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (&lt;code>*&lt;/code>), in which case the lower bound shall be 0.&lt;/p>&#xA;"/>
    <properties name="multiplicityRangeUpperBound" label="multiplicityRangeUpperBound" comment="The &lt;code>Expression&lt;/code> whose result is the upper bound of the &lt;code>MultiplicityRange&lt;/code>."/>
    <properties name="multiplicityRangeBound" label="multiplicityRangeBound" comment="&lt;p>The owned &lt;code>Expressions&lt;/code> of the &lt;code>MultiplicityRange&lt;/code> whose results provide its bounds. These must be the only &lt;code>ownedMembers&lt;/code> of the &lt;code>MultiplicityRange&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberElementId" label="membershipMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>memberElement&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberShortName" label="membershipMemberShortName" comment="&lt;p>The short name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>"/>
    <properties name="membershipMemberName" label="membershipMemberName" comment="&lt;p>The name of the &lt;code>memberElement&lt;/code> relative to the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipVisibility" label="membershipVisibility" comment="&lt;p>Whether or not the &lt;code>Membership&lt;/code> of the &lt;code>memberElement&lt;/code> in the &lt;code>membershipOwningNamespace&lt;/code> is publicly visible outside that &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="membershipMembershipOwningNamespace" label="membershipMembershipOwningNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> of which the &lt;code>memberElement&lt;/code> becomes a &lt;cpde>member due to this &lt;code>Membership&lt;/code>.&lt;/cpde>&lt;/p>&#xA;"/>
    <properties name="membershipMemberElement" label="membershipMemberElement" comment="&lt;p>The &lt;code>Element&lt;/code> that becomes a &lt;code>member&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this &lt;code>Membership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="unioningUnioningType" label="unioningUnioningType" comment="&lt;p>&lt;code>Type&lt;/code> that partly determines interpretations of &lt;code>typeUnioned&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="unioningTypeUnioned" label="unioningTypeUnioned" comment="&lt;p>&lt;code>Type&lt;/code> with interpretations partly determined by &lt;code>unioningType&lt;/code>, as described in &lt;code>Type::unioningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subclassificationSuperclassifier" label="subclassificationSuperclassifier" comment="&lt;p>The more &lt;code>general&lt;/code> Classifier in this &lt;code>Subclassification&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subclassificationSubclassifier" label="subclassificationSubclassifier" comment="&lt;p>The more specific &lt;code>Classifier&lt;/code> in this &lt;code>Subclassification&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subclassificationOwningClassifier" label="subclassificationOwningClassifier" comment="&lt;p>The &lt;code>Classifier&lt;/code> that owns this &lt;code>Subclassification&lt;/code> relationship, which must also be its &lt;code>subclassifier&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="dependencyClient" label="dependencyClient" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> dependent on the &lt;code>supplier&lt;/code> &lt;code>Elements&lt;/code>.&lt;/p>"/>
    <properties name="dependencySupplier" label="dependencySupplier" comment="&lt;p>The &lt;code>Element&lt;/code> or &lt;code>Elements&lt;/code> on which the &lt;code>client&lt;/code> &lt;code>Elements&lt;/code> depend in some respect.&lt;/p>"/>
    <properties name="referenceSubsettingReferencedFeature" label="referenceSubsettingReferencedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is referenced by the &lt;code>referencingFeature&lt;/code> of this &lt;code>ReferenceSubsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="referenceSubsettingReferencingFeature" label="referenceSubsettingReferencingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that owns this &lt;code>ReferenceSubsetting&lt;/code> relationship, which is also its &lt;code>subsettingFeature&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationLanguage" label="textualRepresentationLanguage" comment="&lt;p>The natural or artifical language in which the &lt;code>body&lt;/code> text is written.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationBody" label="textualRepresentationBody" comment="&lt;p>The textual representation of the &lt;code>representedElement&lt;/code> in the given &lt;code>language&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="textualRepresentationRepresentedElement" label="textualRepresentationRepresentedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is represented by this &lt;code>TextualRepresentation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="booleanExpressionPredicate" label="booleanExpressionPredicate" comment="&lt;p>The &lt;code>Predicate&lt;/code> that types this &lt;code>BooleanExpression&lt;/code>.&lt;/p>&#xA;&lt;p>The Predicate that types the Expression.&lt;/p>&#xA;"/>
    <properties name="annotationAnnotatingElement" label="annotationAnnotatingElement" comment="&lt;p>The &lt;code>AnnotatingElement&lt;/code> that annotates the &lt;code>annotatedElement&lt;/code> of this &lt;code>Annotation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotationAnnotatedElement" label="annotationAnnotatedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is annotated by the &lt;code>annotatingElement&lt;/code> of this Annotation.&lt;/p>&#xA;"/>
    <properties name="annotationOwningAnnotatedElement" label="annotationOwningAnnotatedElement" comment="&lt;p>The &lt;code>annotatedElement&lt;/code> of this &lt;code>Annotation&lt;/code>, when it is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotationOwningAnnotatingElement" label="annotationOwningAnnotatingElement" comment="&lt;p>The &lt;code>annotatingElement&lt;/code> of this &lt;code>Annotation&lt;/code>, when it is also its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="elementFilterMembershipCondition" label="elementFilterMembershipCondition" comment="&lt;p>The model-level evaluable &lt;code>Boolean&lt;/code>-valued &lt;code>Expression&lt;/code> used to filter the imported &lt;code>members&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> of this &lt;code>ElementFilterMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureValueIsInitial" label="featureValueIsInitial" comment="&lt;p>Whether this &lt;code>FeatureValue&lt;/code> specifies a bound value or an initial value for the &lt;code>featureWithValue&lt;/code>.&lt;/p>"/>
    <properties name="featureValueIsDefault" label="featureValueIsDefault" comment="&lt;p>Whether this &lt;code>FeatureValue&lt;/code> is a concrete specification of the bound or initial value of the &lt;code>featureWithValue&lt;/code>, or just a default value that may be overridden.&lt;/p>"/>
    <properties name="featureValueFeatureWithValue" label="featureValueFeatureWithValue" comment="&lt;p>The &lt;code>Feature&lt;/code> to be provided a value.&lt;/p>&#xA;&#xA;&lt;p>The Feature to be provided a value.&lt;/p>"/>
    <properties name="featureValueValue" label="featureValueValue" comment="&lt;p>The &lt;code>Expression&lt;/code> that provides the value of the &lt;code>featureWithValue&lt;/code> as its &lt;code>result&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The Expression that provides the value as a result.&lt;/p>"/>
    <properties name="libraryPackageIsStandard" label="libraryPackageIsStandard" comment="&lt;p>Whether this &lt;code>LibraryPackage&lt;/code> contains a standard library model. This should only be set to true for &lt;code>LibraryPackages&lt;/code> in the standard Kernel Model Libraries or in normative model libraries for a language built on KerML.&lt;/p>"/>
    <properties name="relationshipIsImplied" label="relationshipIsImplied" comment="&lt;p>Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.&lt;/p>"/>
    <properties name="relationshipOwnedRelatedElement" label="relationshipOwnedRelatedElement" comment="&lt;p>The &lt;tt>relatedElements&lt;/tt> of this Relationship that are owned by the Relationship.&lt;/p>"/>
    <properties name="relationshipOwningRelatedElement" label="relationshipOwningRelatedElement" comment="&lt;p>The &lt;tt>relatedElement&lt;/tt> of this Relationship that owns the Relationship, if any.&lt;/p>"/>
    <properties name="relationshipRelatedElement" label="relationshipRelatedElement" comment="&lt;p>The Elements that are related by this Relationship, derived as the union of the &lt;code>source&lt;/code> and &lt;code>target&lt;/code> Elements of the Relationship.&lt;/p>"/>
    <properties name="relationshipTarget" label="relationshipTarget" comment="&lt;p>The &lt;code>relatedElements&lt;/code> to which this Relationship is considered to be directed.&lt;/p>&#xA;"/>
    <properties name="relationshipSource" label="relationshipSource" comment="&lt;p>The &lt;code>relatedElements&lt;/c ode> from which this Relationship is considered to be directed.&lt;/p>"/>
    <properties name="elementAliasIds" label="elementAliasIds" comment="&lt;p>Various alternative identifiers for this Element. Generally, these will be set by tools.&lt;/p>"/>
    <properties name="elementDeclaredShortName" label="elementDeclaredShortName" comment="&lt;p>An optional alternative name for the &lt;code>Element&lt;/code> that is intended to be shorter or in some way more succinct than its primary &lt;code>name&lt;/code>. It may act as a modeler-specified identifier for the &lt;code>Element&lt;/code>, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.&lt;/p> &#xA;"/>
    <properties name="elementDeclaredName" label="elementDeclaredName" comment="&lt;p>The declared name of this &lt;code>Element&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementShortName" label="elementShortName" comment="&lt;p>The short name to be used for this &lt;code>Element&lt;/code> during name resolution within its &lt;code>owningNamespace&lt;/code>. This is derived using the &lt;code>effectiveShortName()&lt;/code> operation. By default, it is the same as the &lt;code>declaredShortName&lt;/code>, but this is overridden for certain kinds of &lt;code>Elements&lt;/code> to compute a &lt;code>shortName&lt;/code> even when the &lt;code>declaredName&lt;/code> is null.&lt;/p>"/>
    <properties name="elementQualifiedName" label="elementQualifiedName" comment="&lt;p>The full ownership-qualified name of this &lt;code>Element&lt;/code>, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The &lt;code>qualifiedName&lt;/code> is null if this &lt;code>Element&lt;/code> has no &lt;code>owningNamespace&lt;/code> or if there is not a complete ownership chain of named &lt;code>Namespaces&lt;/code> from a root &lt;code>Namespace&lt;/code> to this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="elementIsImpliedIncluded" label="elementIsImpliedIncluded" comment="&lt;p>Whether all necessary implied Relationships have been included in the &lt;code>ownedRelationships&lt;/code> of this Element. This property may be true, even if there are not actually any &lt;code>ownedRelationships&lt;/code> with &lt;code>isImplied = true&lt;/code>, meaning that no such Relationships are actually implied for this Element. However, if it is false, then &lt;code>ownedRelationships&lt;/code> may &lt;em>not&lt;/em> contain any implied Relationships. That is, either &lt;em>all&lt;/em> required implied Relationships must be included, or none of them.&lt;/p>"/>
    <properties name="elementIsLibraryElement" label="elementIsLibraryElement" comment="&lt;p>Whether this Element is contained in the ownership tree of a library model.&lt;/p>"/>
    <properties name="elementOwningMembership" label="elementOwningMembership" comment="&lt;p>The &lt;code>owningRelationship&lt;/code> of this &lt;code>Element&lt;/code>, if that &lt;code>Relationship&lt;/code> is a &lt;code>Membership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="elementOwningNamespace" label="elementOwningNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> that owns this &lt;code>Element&lt;/code>, which is the &lt;code>membershipOwningNamespace&lt;/code> of the &lt;code>owningMembership&lt;/code> of this &lt;code>Element&lt;/code>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwningRelationship" label="elementOwningRelationship" comment="&lt;p>The Relationship for which this Element is an &lt;tt>ownedRelatedElement&lt;/tt>, if any.&lt;/p>&#xA;"/>
    <properties name="elementOwnedRelationship" label="elementOwnedRelationship" comment="&lt;p>The Relationships for which this Element is the &lt;tt>owningRelatedElement&lt;/tt>.&lt;/p>"/>
    <properties name="elementOwner" label="elementOwner" comment="&lt;p>The owner of this Element, derived as the &lt;code>owningRelatedElement&lt;/code> of the &lt;code>owningRelationship&lt;/code> of this Element, if any.&lt;/p>"/>
    <properties name="elementOwnedElement" label="elementOwnedElement" comment="&lt;p>The Elements owned by this Element, derived as the &lt;tt>ownedRelatedElements&lt;/tt> of the &lt;tt>ownedRelationships&lt;/tt> of this Element.&lt;/p>&#xA;"/>
    <properties name="elementDocumentation" label="elementDocumentation" comment="&lt;p>The Documentation owned by this Element.&lt;/p>"/>
    <properties name="elementOwnedAnnotation" label="elementOwnedAnnotation" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Element&lt;/code> that are &lt;code>Annotations&lt;/code>, for which this &lt;code>Element&lt;/code> is the &lt;code>annotatedElement&lt;/code>.&lt;/code>"/>
    <properties name="elementTextualRepresentation" label="elementTextualRepresentation" comment="&lt;p>The &lt;code>TextualRepresentations&lt;/code> that annotate this &lt;code>Element&lt;/code>.&lt;/p>"/>
    <properties name="namespaceImportImportedNamespace" label="namespaceImportImportedNamespace" comment="&lt;p>The &lt;code>Namespace&lt;/code> whose visible &lt;code>Memberships&lt;/code> are imported by this &lt;code>NamespaceImport&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureChainExpressionTargetFeature" label="featureChainExpressionTargetFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is accessed by this &lt;code>FeatureChainExpression&lt;code>, which is its first non-&lt;code>parameter&lt;/code> &lt;code>member&lt;/code>.&lt;p>"/>
    <properties name="operatorExpressionOperator" label="operatorExpressionOperator" comment="&lt;p>An &lt;code>operator&lt;/code> symbol that names a corresponding &lt;code>Function&lt;/code> from one of the standard packages from the Kernel Function Library .&lt;/p>"/>
    <properties name="documentationDocumentedElement" label="documentationDocumentedElement" comment="&lt;p>The &lt;code>Element&lt;/code> that is documented by this &lt;code>Documentation&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="metadataFeatureMetaclass" label="metadataFeatureMetaclass" comment="&lt;p>The &lt;code>type&lt;/code> of this &lt;code>MetadataFeature&lt;/code>, which must be a &lt;code>Metaclass&lt;/code>.&lt;/p>"/>
    <properties name="literalStringValue" label="literalStringValue" comment="&lt;p>The &lt;code>&lt;em>String&lt;/em>&lt;/code> value that is the result of evaluating this &lt;code>LiteralString&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The String value that is the result of evaluating this Expression.&lt;/p>"/>
    <properties name="parameterMembershipOwnedMemberParameter" label="parameterMembershipOwnedMemberParameter" comment="&lt;p>The &lt;code>Feature&lt;/code> that is identified as a &lt;code>parameter&lt;/code> by this &lt;code>ParameterMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceMembership" label="namespaceMembership" comment="&lt;p>All &lt;code>Memberships&lt;/code> in this &lt;code>Namespace&lt;/code>, including (at least) the union of &lt;code>ownedMemberships&lt;/code> and &lt;code>importedMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedImport" label="namespaceOwnedImport" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Namespace&lt;/code> that are &lt;code>Imports&lt;/code>, for which the &lt;code>Namespace&lt;/code> is the &lt;code>importOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceMember" label="namespaceMember" comment="&lt;p>The set of all member &lt;code>Elements&lt;/code> of this &lt;code>Namespace&lt;/code>, which are the &lt;code>memberElements&lt;/code> of all &lt;code>memberships&lt;/code> of the &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMember" label="namespaceOwnedMember" comment="&lt;p>The owned &lt;code>members&lt;/code> of this &lt;code>Namespace&lt;/code>, which are the &lt;cpde>&lt;code>ownedMemberElements&lt;/code> of the &lt;code>ownedMemberships&lt;/code> of the .&lt;/cpde>&lt;/p>&#xA;"/>
    <properties name="namespaceImportedMembership" label="namespaceImportedMembership" comment="&lt;p>The &lt;code>Memberships&lt;/code> in this &lt;code>Namespace&lt;/code> that result from the &lt;code>ownedImports&lt;/code> of this &lt;code>Namespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="namespaceOwnedMembership" label="namespaceOwnedMembership" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Namespace&lt;/code> that are &lt;code>Memberships&lt;/code>, for which the &lt;code>Namespace&lt;/code> is the &lt;code>membershipOwningNamespace&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="stepBehavior" label="stepBehavior" comment="&lt;p>The &lt;code>Behaviors&lt;/code> that type this &lt;code>Step&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="stepParameter" label="stepParameter" comment="&lt;p>The &lt;code>parameters&lt;/code> of this &lt;code>Step&lt;/code>, which are defined as its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the &lt;code>Step&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featureInvertingFeatureInverted" label="featureInvertingFeatureInverted" comment="&lt;p>The &lt;code>Feature&lt;/code> that is an inverse of the &lt;code>invertingFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingInvertingFeature" label="featureInvertingInvertingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is an inverse of the &lt;code>invertedFeature&lt;/code>.&lt;/p>"/>
    <properties name="featureInvertingOwningFeature" label="featureInvertingOwningFeature" comment="&lt;p>A &lt;code>featureInverted&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>FeatureInverting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="packageFilterCondition" label="packageFilterCondition" comment="&lt;p>The model-level evaluable &lt;code>&lt;em>Boolean&lt;/em>&lt;/code>-valued &lt;code>Expression&lt;/code> used to filter the &lt;code>members&lt;/code> of this &lt;code>Package&lt;/code>, which are owned by the &lt;code>Package&lt;/code> are via &lt;code>ElementFilterMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="disjoiningTypeDisjoined" label="disjoiningTypeDisjoined" comment="&lt;p>&lt;code>Type&lt;/code> asserted to be disjoint with the &lt;code>disjoiningType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="disjoiningDisjoiningType" label="disjoiningDisjoiningType" comment="&lt;p>&lt;code>Type&lt;/code> asserted to be disjoint with the &lt;code>typeDisjoined&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="disjoiningOwningType" label="disjoiningOwningType" comment="&lt;p>A &lt;code>typeDisjoined&lt;/code> that is also an &lt;code>owningRelatedElement&lt;/code>.&lt;/p>"/>
    <properties name="functionIsModelLevelEvaluable" label="functionIsModelLevelEvaluable" comment="&lt;p>Whether this &lt;code>Function&lt;/code> can be used as the &lt;code>function&lt;/code> of a model-level evaluable &lt;code>InvocationExpression&lt;/code>. Certain &lt;code>Functions&lt;/code> from the Kernel Functions Library are considered to have &lt;code>isModelLevelEvaluable = true&lt;/code>. For all other &lt;code>Functions&lt;/code> it is &lt;code>false&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>&lt;strong>Note:&lt;/strong> See the specification of the KerML concrete syntax notation for &lt;code>Expressions&lt;/code> for an identification of which library &lt;code>Functions&lt;/code> are model-level evaluable.&lt;/p>"/>
    <properties name="functionExpression" label="functionExpression" comment="&lt;p>The &lt;code>Expressions&lt;/code> that are &lt;code>steps&lt;/code> in the calculation of the &lt;code>result&lt;/code> of this &lt;code>Function&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The set of expressions that represent computational steps or parts of a system of equations within the Function.&lt;/p>&#xA;"/>
    <properties name="functionResult" label="functionResult" comment="&lt;p>The &lt;code>result&lt;/code> &lt;code>parameter&lt;/code> of the &lt;code>Function&lt;/code>, which is owned by the &lt;code>Function&lt;/code> via a &lt;code>ReturnParameterMembership&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>The object or value that is the result of evaluating the Function.&lt;/p>"/>
    <properties name="invocationExpressionArgument" label="invocationExpressionArgument" comment="&lt;p>The &lt;code>value&lt;/code> &lt;code>Expressions&lt;/code> of the &lt;code>FeatureValues&lt;/code> of the owned input &lt;code>parameters&lt;/code> of the &lt;code>InvocationExpression&lt;/code>."/>
    <properties name="annotatingElementAnnotatedElement" label="annotatingElementAnnotatedElement" comment="&lt;p>The &lt;code>Elements&lt;/code> that are annotated by this &lt;code>AnnotatingElement&lt;/code>. If &lt;code>annotation&lt;/code> is not empty, these are the &lt;code>annotatedElements&lt;/code> of the &lt;code>annotations&lt;/code>. If &lt;code>annotation&lt;/code> is empty, then it is the &lt;code>owningNamespace&lt;/code> of the &lt;code>AnnotatingElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="annotatingElementOwnedAnnotatingRelationship" label="annotatingElementOwnedAnnotatingRelationship" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>AnnotatingElement&lt;/code> that are &lt;code>Annotations&lt;/code>, for which this &lt;code>AnnotatingElement&lt;/code> is the &lt;code>annotatingElement&lt;/code>.&lt;/p>"/>
    <properties name="annotatingElementAnnotation" label="annotatingElementAnnotation" comment="&lt;p>The &lt;code>Annotations&lt;/code> that relate this &lt;code>AnnotatingElement&lt;/code> to its &lt;code>annotatedElements&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="featuringType" label="featuringType" comment="&lt;p>The &lt;code>Type&lt;code> that features the &lt;code>featureOfType&lt;/code>.&lt;/p>"/>
    <properties name="featuringFeature" label="featuringFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is featured by the &lt;code>featuringType&lt;/code>.&lt;/p>"/>
    <properties name="typeIsAbstract" label="typeIsAbstract" comment="&lt;p>Indicates whether instances of this &lt;code>Type&lt;/code> must also be instances of at least one of its specialized &lt;code>Types&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeIsSufficient" label="typeIsSufficient" comment="&lt;p>Whether all things that meet the classification conditions of this &lt;code>Type&lt;/code> must be classified by the &lt;code>Type&lt;/code>.&lt;/p>&#xA;&#xA;&lt;p>(A &lt;code>Type&lt;/code>&amp;nbsp;gives conditions that must be met by whatever it classifies, but when &lt;code>isSufficient&lt;/code> is false, things may meet those conditions but still not be classified by the &lt;code>Type&lt;/code>. For example, a Type &lt;code>&lt;em>Car&lt;/em>&lt;/code> that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would classify as cars. However, if the &lt;code>Type&lt;/code> &lt;code>&lt;em>Car&lt;/em>&lt;/code> were sufficient, it would classify all four-wheeled things.)&lt;/p>&#xA;"/>
    <properties name="typeIsConjugated" label="typeIsConjugated" comment="&lt;p>Indicates whether this &lt;code>Type&lt;/code> has an &lt;code>ownedConjugator&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeatureMembership" label="typeOwnedFeatureMembership" comment="&lt;p>The &lt;code>ownedMemberships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>FeatureMemberships&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>owningType&lt;/code>. Each such &lt;code>FeatureMembership&lt;/code> identifies an &lt;code>ownedFeature&lt;/code> of the &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedFeature" label="typeOwnedFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>ownedFeatureMemberships&lt;/code> of this &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedEndFeature" label="typeOwnedEndFeature" comment="&lt;p>All &lt;code>endFeatures&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>ownedFeatures&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeFeature" label="typeFeature" comment="&lt;p>The &lt;code>ownedMemberFeatures&lt;/code> of the &lt;code>featureMemberships&lt;/code> of this &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInput" label="typeInput" comment="&lt;p>All &lt;code>features&lt;/code> related to this &lt;code>Type&lt;/code> by &lt;code>FeatureMemberships&lt;/code> that have &lt;code>direction&lt;/code> &lt;code>in&lt;code> or &lt;code>inout&lt;code>.&lt;/code>&lt;/code>&lt;/code>&lt;/code>&lt;/p>&#xA;"/>
    <properties name="typeOutput" label="typeOutput" comment="&lt;p>All &lt;code>features&lt;/code> related to this &lt;code>Type&lt;/code> by &lt;code>FeatureMemberships&lt;/code> that have &lt;code>direction&lt;/code> &lt;code>out&lt;code> or &lt;code>inout&lt;code>.&lt;/code>&lt;/code>&lt;/code>&lt;/code>&lt;/p>&#xA;"/>
    <properties name="typeInheritedMembership" label="typeInheritedMembership" comment="&lt;p>All &lt;code>Memberships&lt;/code> inherited by this &lt;code>Type&lt;/code> via &lt;code>Specialization&lt;/code> or &lt;code>Conjugation&lt;/code>. These are included in the derived union for the &lt;code>memberships&lt;/code> of the &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeEndFeature" label="typeEndFeature" comment="&lt;p>All &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> with &lt;code>isEnd = true&lt;/code>.&lt;/p>"/>
    <properties name="typeOwnedConjugator" label="typeOwnedConjugator" comment="&lt;p>A &lt;code>Conjugation&lt;/code> owned by this &lt;code>Type&lt;/code> for which the &lt;code>Type&lt;/code> is the &lt;code>originalType&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeInheritedFeature" label="typeInheritedFeature" comment="&lt;p>All the &lt;code>memberFeatures&lt;/code> of the &lt;code>inheritedMemberships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>FeatureMemberships&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeMultiplicity" label="typeMultiplicity" comment="&lt;p>An &lt;code>ownedMember&lt;/code> of this &lt;code>Type&lt;/code> that is a &lt;code>Multiplicity&lt;/code>, which constraints the cardinality of the &lt;code>Type&lt;/code>. If there is no such &lt;code>ownedMember&lt;/code>, then the cardinality of this &lt;code>Type&lt;/code> is constrained by all the &lt;code>Multiplicity&lt;/code> constraints applicable to any direct supertypes.&lt;/p>&#xA;&#xA;&lt;p>&amp;nbsp;&lt;/p>&#xA;"/>
    <properties name="typeUnioningType" label="typeUnioningType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>unioningTypes&lt;/code> are asserted to be the same as those of all the &lt;code>unioningTypes&lt;/code> together, which are the &lt;code>Types&lt;/code> derived from the &lt;code>unioningType&lt;/code> of the &lt;code>ownedUnionings&lt;/code> of this &lt;code>Type&lt;/code>. For example, a &lt;code>Classifier&lt;/code> for people might be the union of &lt;code>Classifiers&lt;/code> for all the sexes. Similarly, a feature for people&amp;#39;s children might be the union of features dividing them in the same ways as people in general.&lt;/p>&#xA;"/>
    <properties name="typeOwnedIntersecting" label="typeOwnedIntersecting" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Intersectings&lt;/code>, have the &lt;code>Type&lt;/code> as their &lt;code>typeIntersected&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeIntersectingType" label="typeIntersectingType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>intersectingTypes&lt;/code> are asserted to be those in common among the &lt;code>intersectingTypes&lt;/code>, which are the &lt;code>Types&lt;/code> derived from the &lt;code>intersectingType&lt;/code> of the &lt;code>ownedIntersectings&lt;/code> of this &lt;code>Type&lt;/code>. For example, a &lt;code>Classifier&lt;/code> might be an intersection of &lt;code>Classifiers&lt;/code> for people of a particular sex and of a particular nationality. Similarly, a feature for people&amp;#39;s children of a particular sex might be the intersection of a &lt;code>Feature&lt;/code> for their children and a &lt;code>Classifier&lt;/code> for people of that sex (because the interpretations of the children &lt;code>Feature&lt;/code> that identify those of that sex are also interpretations of the Classifier for that sex).&lt;/p>&#xA;"/>
    <properties name="typeOwnedUnioning" label="typeOwnedUnioning" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Unionings&lt;/code>, having the &lt;code>Type&lt;/code> as their &lt;code>typeUnioned&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedDisjoining" label="typeOwnedDisjoining" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Disjoinings&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>typeDisjoined&lt;/code> &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeFeatureMembership" label="typeFeatureMembership" comment="&lt;p>The &lt;code>FeatureMemberships&lt;/code> for &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code>, which include all &lt;code>ownedFeatureMemberships&lt;/code> and those &lt;code>inheritedMemberships&lt;/code> that are &lt;code>FeatureMemberships&lt;/code> (but does &lt;em>not&lt;/em> include any &lt;code>importedMemberships&lt;/code>).&lt;/p>&#xA;"/>
    <properties name="typeDifferencingType" label="typeDifferencingType" comment="&lt;p>The interpretations of a &lt;code>Type&lt;/code> with &lt;code>differencingTypes&lt;/code> are asserted to be those of the first of those &lt;code>Types&lt;/code>, but not including those of the remaining &lt;code>Types&lt;/code>. For example, a &lt;code>Classifier&lt;/code> might be the difference of a &lt;code>Classifier&lt;/code> for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a &lt;code>Classifier&lt;/code> for people of a particular sex, identifying their children not of that sex (because the interpretations of the children &lt;code>Feature&lt;/code> that identify those of that sex are also interpretations of the &lt;code>Classifier&lt;/code> for that sex).&lt;/p>&#xA;"/>
    <properties name="typeOwnedDifferencing" label="typeOwnedDifferencing" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Differencings&lt;/code>, having this &lt;code>Type&lt;/code> as their &lt;code>typeDifferenced&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeDirectedFeature" label="typeDirectedFeature" comment="&lt;p>The &lt;code>features&lt;/code> of this &lt;code>Type&lt;/code> that have a non-null &lt;code>direction&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="typeOwnedSpecialization" label="typeOwnedSpecialization" comment="&lt;p>The &lt;code>ownedRelationships&lt;/code> of this &lt;code>Type&lt;/code> that are &lt;code>Specializations&lt;/code>, for which the &lt;code>Type&lt;/code> is the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="redefinitionRedefiningFeature" label="redefinitionRedefiningFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is redefining the &lt;code>redefinedFeature&lt;/code> of this &lt;code>Redefinition&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="redefinitionRedefinedFeature" label="redefinitionRedefinedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is redefined by the &lt;code>redefiningFeature&lt;/code> of this &lt;code>Redefinition&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElementId" label="owningMembershipOwnedMemberElementId" comment="&lt;p>The &lt;code>elementId&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberShortName" label="owningMembershipOwnedMemberShortName" comment="&lt;p>The &lt;code>shortName&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>"/>
    <properties name="owningMembershipOwnedMemberName" label="owningMembershipOwnedMemberName" comment="&lt;p>The &lt;code>name&lt;/code> of the &lt;code>ownedMemberElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="owningMembershipOwnedMemberElement" label="owningMembershipOwnedMemberElement" comment="&lt;p>The &lt;code>Element&lt;/code> that becomes an &lt;code>ownedMember&lt;/code> of the &lt;code>membershipOwningNamespace&lt;/code> due to this &lt;code>OwningMembership&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subsettingSubsettedFeature" label="subsettingSubsettedFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is subsetted by the &lt;code>subsettingFeature&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subsettingSubsettingFeature" label="subsettingSubsettingFeature" comment="&lt;p>The &lt;code>Feature&lt;/code> that is a subset of the &lt;code>subsettedFeature&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="subsettingOwningFeature" label="subsettingOwningFeature" comment="&lt;p>A &lt;code>subsettingFeature&lt;/code> that is also the &lt;code>owningRelatedElement&lt;/code> of this &lt;code>Subsetting&lt;/code>.&lt;/p>&#xA;&#xA;"/>
    <properties name="behaviorStep" label="behaviorStep" comment="&lt;p>The &lt;code>Steps&lt;/code> that make up this &lt;code>Behavior&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="behaviorParameter" label="behaviorParameter" comment="&lt;p>The parameters of this &lt;code>Behavior&lt;/code>, which are defined as its &lt;code>directedFeatures&lt;/code>, whose values are passed into and/or out of a performance of the &lt;code>Behavior&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="specializationOwningType" label="specializationOwningType" comment="&lt;p>The &lt;code>Type&lt;/code> that is the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code> of this &lt;code>Specialization&lt;/code> and owns it as its &lt;code>owningRelatedElement&lt;/code>.&lt;/p>&#xA;"/>
    <properties name="specializationGeneral" label="specializationGeneral" comment="&lt;p>A &lt;code>Type&lt;/code> with a superset of all instances of the &lt;code>specific&lt;/code> &lt;code>Type&lt;/code>, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="specializationSpecific" label="specializationSpecific" comment="&lt;p>A &lt;code>Type&lt;/code> with a subset of all instances of the &lt;code>general&lt;/code> &lt;code>Type&lt;/code>, which might be the same set.&lt;/p>&#xA;"/>
    <properties name="metadataAccessExpressionReferencedElement" label="metadataAccessExpressionReferencedElement" comment="&lt;p> The &lt;code>Element&lt;/code> whose metadata is being accessed.&lt;/p>"/>
  </vocabularies>
</oscl4j_vocabulary:Vocabularies>
