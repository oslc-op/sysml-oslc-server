// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslcop.sysml.services;


import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response;

import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderCatalog;

import org.oasis.oslcop.sysml.ServerConstants;
import org.oasis.oslcop.sysml.SysmlServerManager;
import org.oasis.oslcop.sysml.servlet.ServiceProviderCatalogSingleton;

// Start of user code imports
// End of user code

@OslcService(OslcConstants.OSLC_CORE_DOMAIN)
@Path("catalog")
public class ServiceProviderCatalogService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    /**
     * Redirect requests to /catalog to /catalog/singleton
     *
     * By default, OSLC4J returns an OSLC query response for /catalog.  We really just
     * want the catalog itself which lives at /catalog/{serviceProviderCatalogId}
     *
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    @OslcDialog
    (
         title = "Service Provider Catalog Selection Dialog",
         label = "Service Provider Catalog Selection Dialog",
         uri = "/catalog",
         hintWidth = "1000px",
         hintHeight = "600px",
         resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER_CATALOG},
         usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
    @OslcQueryCapability
    (
        title = "Service Provider Catalog Query Capability",
        label = "Service Provider Catalog Query",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + OslcConstants.PATH_SERVICE_PROVIDER_CATALOG,
        resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER_CATALOG},
        usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
    @GET
    public Response getServiceProviderCatalogs() throws IOException, URISyntaxException
    {
        String forwardUri = uriInfo.getAbsolutePath() + "/singleton";
        httpServletResponse.sendRedirect(forwardUri);
        return Response.seeOther(new URI(forwardUri)).build();
    }

    /**
     * Return the OSLC service provider catalog as RDF/XML, XML or JSON
     *
     * @return
     */
    @GET
    @Path("{serviceProviderCatalogId}") // Required to distinguish from array result.  But, ignored.
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ServiceProviderCatalog getServiceProviderCatalog(@PathParam("serviceProviderCatalogId") final String serviceProviderCatalogId)
    {
        ServiceProviderCatalog catalog =  ServiceProviderCatalogSingleton.getServiceProviderCatalog(httpServletRequest);

        if (catalog != null) {
            httpServletResponse.addHeader(ServerConstants.HDR_OSLC_VERSION,"2.0");
            return catalog;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    /**
     * Return the catalog singleton as HTML
     *
     * Forwards to serviceprovidercatalog_html.jsp to build the html
     *
     */
    @GET
    @Path("{someId}")
    @Produces(MediaType.TEXT_HTML)
    public void getHtmlServiceProvider(@PathParam("someId") final String someId)
    {
        ServiceProviderCatalog catalog = ServiceProviderCatalogSingleton.getServiceProviderCatalog(httpServletRequest);

        if (catalog !=null )
        {
            httpServletRequest.setAttribute("catalog",catalog);
            // Start of user code getHtmlServiceProvider_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/org/oasis/oslcop/sysml/serviceprovidercatalog.jsp");
            try {
                rd.forward(httpServletRequest, httpServletResponse);
                return;
            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }
        }
    }
}

